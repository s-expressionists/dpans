*start*05147 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 07 JUL 88 11:37:01 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 7 Jul 88  11:36:33 PDTReceived: from RIO-DE-JANEIRO.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 429994; Thu 7-Jul-88 14:36:18 EDTDate: Thu, 7 Jul 88 14:35 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-CANONICAL-TYPE (Version 1)To: CL-Cleanup@SAIL.Stanford.EDUMessage-ID: <880707143558.6.KMP@RIO-DE-JANEIRO.SCRC.Symbolics.COM>Issue:          PATHNAME-CANONICAL-TYPEReferences:     MAKE-PATHNAME (p416)Category:       ADDITIONEdit history:   07-Jul-88, Version 1 by PitmanStatus:	        For Internal DiscussionRelated-Issues: PATHNAME-COMPONENT-CASEProblem Description:  The pathame-type of ``Lisp'' and ``Compiled Lisp'' files vary widely from  implementation to implementation.  "LSP" is common on Vax VMS. "lisp" is generally used for the Symbolics  file system. "l" and "lisp" are common on Unix. Some Lisp implementations  use customized extensions such as "cl" or even "jcl" (eg, for "Joe's CL").  It would be useful to probe the existence of either a source or a binary  file, but that cannot currently be done portably. Furthermore, it would be  useful to create certain standard kinds of files in a system-independent  fashion.  A common desire, for example, is to do    (DEFUN FILE-NEEDS-TO-BE-COMPILED (FILE)      (LET ((SOURCE (PROBE-FILE		      (MERGE-PATHNAMES FILE (MAKE-PATHNAME :TYPE ???))))	    (BINARY (PROBE-FILE		      (MERGE-PATHNAMES FILE (MAKE-PATHNAME :TYPE ???)))))        ... (FILE-WRITE-DATE SOURCE) ... (FILE-WRITE-DATE BINARY) ...))  The problem is that there's nothing portable to put in the ??? positions.  Indeed, depending on the host (ie, file system) of the pathname, the  type might need to differ even in the same Lisp implementation. For example,  Symbolics Genera stores its source files in names like "foo.l" on Unix,  "FOO.LSP" on VMS, etc.Proposal (PATHNAME-CANONICAL-TYPE:NEW-CONCEPT):  In addition to the normal strings and keywords currently allowed as fillers  of the TYPE field of a pathname, allow other keywords which designate  ``canonical types''.   A canonical type is translated to a real type by MAKE-PATHNAME so that the  (PATHNAME-TYPE (MAKE-PATHNAME :TYPE canonical-type)) is a string.  Introduce a new function PATHNAME-CANONICAL-TYPE which returns the canonical  type of an argument pathname, or the type if there is no canonical type.  For example,    (PATHNAME-CANONICAL-TYPE (MAKE-PATHNAME :TYPE :LISP)) => :LISP  [This information may be explicitly represented as an additional slot, or  computed on demand using a lookup table, as the implementor prefers.]  Define the following standard types:	:LISP		``Lisp'' (source) file	:BIN		``Compiled Lisp'' (object) file  Permit implementations to extend the set of canonical type names.Test Case:  (PATHNAME-TYPE (MAKE-PATHNAME :TYPE :LISP))   => "LSP" 	    ;Typically, on VMS   => "l" or "lisp" ;Typically, on Unix   => "L" or "LISP" ;Typically, on Unix 		    ; (assuming PATHNAME-COMPONENT-CASE:CANONICALIZE adopted)   ..etc.  (PATHNAME-TYPE (MAKE-PATHNAME :TYPE :BIN))   => "FAS" 	    ;eg, VAXLISP   => "BIN"	    ;eg, Symbolics file system   ...etc.  (PATHNAME-CANONICAL-TYPE (MAKE-PATHNAME :TYPE :LISP)) => :LISP  (PATHNAME-CANONICAL-TYPE (MAKE-PATHNAME :TYPE "LSP"))   => :LISP	    ;eg, VAXLISP   => "LSP"	    ;eg, UnixRationale:  This is a useful subset of the functionality already available in  at least one implementation.Current Practice:  Symbolics Genera implements this proposal.Cost to Implementors:  The cost of implementing these proposed features is very slightly.  MAKE-PATHNAME would have to change to coerce its :TYPE argument in implementations  where it does not do so already. PATHNAME-CANONICAL-TYPE can be implemented as a  fairly straightforward lookup.Cost to Users:  None. This change is upward compatible.Cost of Non-Adoption:  It would continue to be hard to portably name files when their types  differed from file system to file system.Benefits:  The cost of non-adoption would be avoided.Aesthetics:  Some programs would be able to abstract away from the particulars of the host  file system entirely. Some people believe this would be a definite improvement  in aesthetics.Discussion:  Note that different Lisp implementations which share the same file system,  need not and perhaps should not agree on the same type string for the  canonical type :BIN. That is, if I store source files on VAX VMS and compile  them both for use under Symbolics Genera and VAXLISP, then it is both  appropriate and useful that VAXLISP :BIN files be named "something.FAS"  and Genera :BIN files be named "something.BIN" since then they wouldn't  clobber each other.  Pitman supports PATHNAME-CANONICAL-TYPE:NEW-CONCEPT.*start*02059 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 08 JUL 88 05:42:32 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 8 Jul 88  05:41:28 PDTReceived: from PEWEE.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 430361; Fri 8-Jul-88 08:41:10 EDTReturn-path: <spt!gz@EDDIE.MIT.EDU>Received: from EDDIE.MIT.EDU by STONY-BROOK.SCRC.Symbolics.COM via INTERNET with SMTP id 430318; 8 Jul 88 03:37:40 EDTReceived: by EDDIE.MIT.EDU with UUCP with smail2.5 with sendmail-5.45/4.7 id <AA17975@EDDIE.MIT.EDU>; Fri, 8 Jul 88 03:37:19 EDTReceived: by spt.entity.com (smail2.5); 8 Jul 88 02:56:28 EDT (Fri)Date: 8 Jul 88 02:56:28 EDT (Fri)From: gz@spt.entity.com (Gail Zacharias)To: KMP@STONY-BROOK.SCRC.Symbolics.COMIn-Reply-To: <880707143558.6.KMP@RIO-DE-JANEIRO.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-CANONICAL-TYPE (Version 1)Message-Id: <8807080256.AA14902@spt.entity.com>Resent-To: CL-Cleanup@SAIL.Stanford.EDUResent-From: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Resent-Date: Fri, 8 Jul 88 08:41 EDTResent-Message-ID: <880708084100.2.KMP@PEWEE.SCRC.Symbolics.COM>In many environments where lisps operate, "binary" refers to something otherthan compiled lisp files (e.g., the executable files of the host system).Therefore I think the use of :BIN for compiled lisp code is a bad choice, asit precludes the use of :BIN for implementation-dependent local extensionswhere :BIN might be the most natural name (I can imagine some suchimplementations ending up with both :BIN and :BINARY, and you have to rememberwhich is which).  I would prefer :COMPILED-LISP.  Of course implementationswould be free to accept :BIN as a synonym for :COMPILED-LISP (especially inthe cases where compiled lisp files ARE in fact the executable files of thehost system :-).If you'd prefer something terse, I'd suggest :COMPILED or :LOAD.*start*02246 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 22 JUL 88 10:09:34 PDTReceived: from cs.utah.edu by SAIL.Stanford.EDU with TCP; 22 Jul 88  10:05:11 PDTReceived: by cs.utah.edu (5.54/utah-2.0-cs)	id AA26996; Fri, 22 Jul 88 11:04:49 MDTReceived: by cdr.utah.edu (5.54/utah-2.0-leaf)	id AA02415; Fri, 22 Jul 88 11:04:47 MDTFrom: sandra%cdr@cs.utah.edu (Sandra J Loosemore)Message-Id: <8807221704.AA02415@cdr.utah.edu>Date: Fri, 22 Jul 88 11:04:45 MDTSubject: Re: Issue: PATHNAME-CANONICAL-TYPE (Version 1)To: Kent M Pitman <KMP@stony-brook.scrc.symbolics.com>Cc: cl-cleanup@sail.stanford.eduIn-Reply-To: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>, Thu, 7 Jul 88 14:35 EDTThe problem this tries to address hasn't been a big one for me, but I don'tsee any harm in adopting this proposal.Under the "Current Practice" section, you might add that programmerswho need to do this kind of thing now typically make a constant orglobal variable that is initialized to hold the right file type forwhatever implementation is being used.  In fact, here is what I'vebeen using (which I believe was stolen from somebody else):(defvar *binary-file-type*    #+Symbolics                         (make-pathname :type "bin")    #+(and dec common vax (not ultrix)) (make-pathname :type "FAS")    #+(and dec common vax ultrix)       (make-pathname :type "fas")    #+pcls                              (make-pathname :type "b")    #+KCL                               (make-pathname :type "o")    #+Xerox                             (make-pathname :type "dfasl")    #+(and Lucid MC68000)               (make-pathname :type "lbin")    #+(and Lucid VAX VMS)               (make-pathname :type "vbin")    #+excl                              (make-pathname :type "fasl")    #+system::cmu                       (make-pathname :type "sfasl")    #+PRIME                             (make-pathname :type "pbin")    #+HP                                (make-pathname :type "b")    #+TI                                (make-pathname :type "xfasl")    "The default file type for compiled files.")-Sandra-------*start*02374 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 22 JUL 88 10:28:43 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 22 Jul 88  10:26:25 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 437286; Fri 22-Jul-88 13:25:37 EDTDate: Fri, 22 Jul 88 13:25 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Re: Issue: PATHNAME-CANONICAL-TYPE (Version 1)To: Sandra J Loosemore <sandra%cdr@cs.utah.edu>cc: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>, cl-cleanup@SAIL.STANFORD.EDUIn-Reply-To: <8807221704.AA02415@cdr.utah.edu>Message-ID: <19880722172514.1.MOON@EUPHRATES.SCRC.Symbolics.COM>    Date: Fri, 22 Jul 88 11:04:45 MDT    From: sandra%cdr@cs.utah.edu (Sandra J Loosemore)    Under the "Current Practice" section, you might add that programmers    who need to do this kind of thing now typically make a constant or    global variable that is initialized to hold the right file type for    whatever implementation is being used.  In fact, here is what I've    been using (which I believe was stolen from somebody else)....Looks like a good argument for standardization, since I think someof these are wrong, and it would probably take half a week to testthem all.    (defvar *binary-file-type*	#+Symbolics                         (make-pathname :type "bin")	#+(and dec common vax (not ultrix)) (make-pathname :type "FAS")	#+(and dec common vax ultrix)       (make-pathname :type "fas")	#+pcls                              (make-pathname :type "b")	#+KCL                               (make-pathname :type "o")	#+Xerox                             (make-pathname :type "dfasl")	#+(and Lucid MC68000)               (make-pathname :type "lbin")	#+(and Lucid VAX VMS)               (make-pathname :type "vbin")	#+excl                              (make-pathname :type "fasl")	#+system::cmu                       (make-pathname :type "sfasl")	#+PRIME                             (make-pathname :type "pbin")	#+HP                                (make-pathname :type "b")	#+TI                                (make-pathname :type "xfasl")	"The default file type for compiled files.")*start*01672 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 22 JUL 88 13:00:27 PDTReceived: from Riverside.SCRC.Symbolics.COM (SCRC-RIVERSIDE.ARPA) by SAIL.Stanford.EDU with TCP; 22 Jul 88  12:59:28 PDTReceived: from PEWEE.SCRC.Symbolics.COM by Riverside.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 271610; Fri 22-Jul-88 15:30:22 EDTDate: Fri, 22 Jul 88 15:30 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Re: Issue: PATHNAME-CANONICAL-TYPE (Version 1)To: sandra%cdr@cs.utah.educc: KMP@STONY-BROOK.SCRC.Symbolics.COM, cl-cleanup@sail.stanford.eduIn-Reply-To: <8807221704.AA02415@cdr.utah.edu>Message-ID: <880722153006.9.KMP@PEWEE.SCRC.Symbolics.COM>    Date: Fri, 22 Jul 88 13:25 EDT    From: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>    	Date: Fri, 22 Jul 88 11:04:45 MDT	From: sandra%cdr@cs.utah.edu (Sandra J Loosemore)    	Under the "Current Practice" section, you might add ...    	(defvar *binary-file-type* ...)    Good point. You're not the only one.    Looks like a good argument for standardization, since I think some    of these are wrong, and it would probably take half a week to test    them all.Just to clarify, I think Moon meant (he can correct me if I'm wrong)that this is an argument for canonical types, not an argument fora *binary-file-type* variable, since the same implementation may haveto talk to multiple file systems, and since different extensions maybe used in different file systems, and hence a single extension maynot be appropriate for every file system.*start*04571 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 22 JUL 88 13:36:16 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 22 Jul 88  13:34:55 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 437473; Fri 22-Jul-88 16:33:48 EDTDate: Fri, 22 Jul 88 16:33 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Re: Issue: PATHNAME-CANONICAL-TYPE (Version 1)To: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: sandra%cdr@cs.utah.edu, cl-cleanup@SAIL.STANFORD.EDUIn-Reply-To: <880722153006.9.KMP@PEWEE.SCRC.Symbolics.COM>Message-ID: <19880722203320.3.MOON@EUPHRATES.SCRC.Symbolics.COM>    Date: Fri, 22 Jul 88 15:30 EDT    From: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>	Date: Fri, 22 Jul 88 13:25 EDT	From: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>    	    Date: Fri, 22 Jul 88 11:04:45 MDT	    From: sandra%cdr@cs.utah.edu (Sandra J Loosemore)    	    Under the "Current Practice" section, you might add ...    	    (defvar *binary-file-type* ...)        Good point. You're not the only one.	Looks like a good argument for standardization, since I think some	of these are wrong, and it would probably take half a week to test	them all.    Just to clarify, I think Moon meant (he can correct me if I'm wrong)    that this is an argument for canonical types, not an argument for    a *binary-file-type* variable, since the same implementation may have    to talk to multiple file systems, and since different extensions may    be used in different file systems, and hence a single extension may    not be appropriate for every file system.Well, what I meant was that some of the file types in Sandra's list are(I suspect) not the ones that the compiler in those systems actually uses.I wasn't thinking deeper than that.Now, getting into details beyond what I meant, there is an argument forcanonical types because a single implementation may use multiple filesystems with different file types, and hence no single string perimplementation can work.  True.  That's the issue within a singleimplementation.  There is also the multiple implementation issue: canall implementations agree on a single canonical type that is used as theoutput of the compiler, or should there be a standardized variable whosevalue is that canonical type?  One might think that everyone could agreeon a single canonical type for compiler output, but in fact not allSymbolics implementations use the same canonical type, so even within asingle vendor there is disagreement.  One might think this is stupid,but in fact Symbolics has multiple types of bin files, all(?; more thanone anyway) of which are understood by some implementations, so it'sunclear how to squeeze that into a single universal canonical type.I suppose the people who aren't used to thinking about multiple filesystems at the same time are thoroughly confused at this point.  Let merecap:In increasing order of abstraction:KMP's pathname component case proposal abstracts the notion of "thisalphabetic case is the standard one, and this other case is the unusualone".  Abstracting this instead of just using strings verbatim is usefulbecause file systems disagree on which case is standard (Symbolics andUnix use lower case; all major computer vendors (IBM, DEC, CDC, etc.)use upper case.  [If anyone responds with an argument about who is majorand who is minor, I will jump up and down and scream.  That's not thepoint.]).Canonical types abstract the notion of "such and such pathname-typefield means such and such semantic content in the file".  Abstracting thisinstead of just using strings is useful because we might be dealingwith multiple file systems, each of which already has its own conventionfor what the string should be.*binary-file-type* (si:*default-binary-file-type* in Genera) abstractsthe notion of "this canonical type is the one the compiler outputs."Abstracting this instead of just picking a standard name for thiscanonical type is useful because there might be several different semanticfile types that could potentially be the output of the compiler.Whether anyone cares about these abstractions depends, obviously, onwhether the programs they write deal with these concepts and need tobe portable across file systems and/or across implementations.*start*01144 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 22 JUL 88 13:47:51 PDTReceived: from cs.utah.edu by SAIL.Stanford.EDU with TCP; 22 Jul 88  13:46:33 PDTReceived: by cs.utah.edu (5.54/utah-2.0-cs)	id AA03399; Fri, 22 Jul 88 14:45:33 MDTReceived: by cdr.utah.edu (5.54/utah-2.0-leaf)	id AA02616; Fri, 22 Jul 88 14:45:26 MDTFrom: sandra%cdr@cs.utah.edu (Sandra J Loosemore)Message-Id: <8807222045.AA02616@cdr.utah.edu>Date: Fri, 22 Jul 88 14:45:25 MDTSubject: Re: Issue: PATHNAME-CANONICAL-TYPE (Version 1)To: David A. Moon <Moon@stony-brook.scrc.symbolics.com>Cc: Kent M Pitman <KMP@stony-brook.scrc.symbolics.com>, sandra%cdr@cs.utah.edu, cl-cleanup@sail.stanford.eduIn-Reply-To: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>, Fri, 22 Jul 88 16:33 EDTSigh, I didn't mean to start a controversy on this.  I just wanted topoint out that people have been able to find other solutions to theproblem this proposal is supposed to address, although the alternativesare somewhat messier.-Sandra-------*start*02856 00024 USaReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 07 SEP 88 19:36:38 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 7 Sep 88  19:35:33 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 455967; Wed 7-Sep-88 22:34:32 EDTDate: Wed, 7 Sep 88 22:34 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-CANONICAL-TYPE (Version 1)To: CL-Cleanup@SAIL.STANFORD.EDUIn-Reply-To: <880707143558.6.KMP@RIO-DE-JANEIRO.SCRC.Symbolics.COM>Message-ID: <19880908023415.8.MOON@EUPHRATES.SCRC.Symbolics.COM>I would favor PATHNAME-CANONICAL-TYPE:NEW-CONCEPT if some smallmodifications were made, as follows:  (PATHNAME-CANONICAL-TYPE (MAKE-PATHNAME :TYPE :LISP)) => :LISP  [This information may be explicitly represented as an additional slot, or  computed on demand using a lookup table, as the implementor prefers.]I'm not sure what your bracketed comment means, but theimportant example is  (PATHNAME-CANONICAL-TYPE (PATHNAME "foo.lisp")) => :LISPwhere of course the string is implementation-dependent.  That is,PATHNAME-CANONICAL-TYPE must produce a canonical type even when thepathname was not constructed from a canonical type, but instead camefrom user typein, the TRUENAME function, the DIRECTORY function,or some similar source, when the pathname's type is one that acanonical type maps into.It would be good to have a facility for users (in addition toimplementations) to extend the set of canonical type names, since usersmay well have their own types of files.  In Genera this is namedFS:DEFINE-CANONICAL-TYPE.  The difficulty is that in any system thatsupports multiple file systems, FS:DEFINE-CANONICAL-TYPE has to becomplex enough to allow specification of separate mappings for each filesystem, which requires a way to name file system types, but maybe thatwould be too complex for some people's taste.  Define the following standard types:	:LISP		``Lisp'' (source) file	:BIN		``Compiled Lisp'' (object) file  Permit implementations to extend the set of canonical type names.All the comments I saw were opposed to :BIN, and I oppose it too.  Infact I am opposed to any standardized name for this canonical type,primarily because this ought to vary based on variousimplementation-dependent parameters.  For example, in Genera it variesdepending on the processor type.  I believe that Common Lisp shouldstandardize only the name of a variable whose value is the canonicaltype for the output of COMPILE-FILE.  In Genera this variable is namedSI:*DEFAULT-BINARY-FILE-TYPE*, a really lousy name.  How aboutcalling it *COMPILE-FILE-OUTPUT-TYPE*?*start*01500 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 23 NOV 88 15:42:17 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 23 Nov 88  15:39:08 PSTReceived: from Cabernet.ms by ArpaGateway.ms ; 23 NOV 88 14:43:00 PSTDate: 23 Nov 88 14:42 PSTFrom: masinter.paSubject: Re: Issue: PATHNAME-CANONICAL-TYPE (Version 1)To: CL-Cleanup@SAIL.STANFORD.EDUMessage-ID: <881123-144300-13354@Xerox>I would support the enhancement to MAKE-PATHNAME where it might be extendedto take keywords:SOURCE-LISP:COMPILED-LISPto mean the "canonical" type with regard to that file system. Such apathname might be given to DIRECTORY or PROBE-FILE.However, I am mildly apposed to the part of the proposal which adds aparser PATHNAME-CANONICAL-TYPE which guess the "proper" canoncal type for agiven pathname.It may be the case that the poor user is in the situation where on his hostoperating system, the *same* type portion of the pathname is used for twodifferent purposes. Thus, mapping from the PATHNAME to the "canonical type"is at most a heuristic. This smaller proposal would solve most of the problems in the "ProblemDescription." without adding any functions or constants to Common Lisp, bymerely extending the range of valid arguments to MAKE-PATHNAME.It would avoid most of the ambiguities and difficulties in specifying otherbehavior.What do you think?*start*00886 00024 USaReturn-Path: <KMP@STONY-BROOK.SCRC.Symbolics.COM>Received: from STONY-BROOK.SCRC.Symbolics.COM ([128.81.41.144]) by Xerox.COM ; 23 NOV 88 15:54:34 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 497567; Wed 23-Nov-88 18:55:05 ESTDate: Wed, 23 Nov 88 18:55 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Re: Issue: PATHNAME-CANONICAL-TYPE (Version 1)To: masinter.pacc: CL-Cleanup@SAIL.STANFORD.EDUIn-Reply-To: <881123-144300-13354@Xerox>Message-ID: <881123185515.3.KMP@BOBOLINK.SCRC.Symbolics.COM>I have some concerns about your alternate proposal but my mind is notclosed. I need more time to study this alternative and would like topostpone dealing with this issue until after the letter ballot, insteadtargeting a mailing in time for an in-person vote in January.*start*08622 00024 US GV-Info: X3J13-mailer@SAIL.Stanford.EDU at 23-Mar-89 15:18:30 from AGReturn-Path: <X3J13-mailer@SAIL.Stanford.EDU>Received: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 23 MAR 89 15:18:17 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 23 Mar 89  12:07:40 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via INTERNET with SMTP id 563815; 23 Mar 89 15:06:56 ESTDate: Thu, 23 Mar 89 15:06 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: **DRAFT** Issue: PATHNAME-CANONICAL-TYPE (Version 1)To: X3J13@SAIL.Stanford.EDUMessage-ID: <890323150638.0.KMP@BOBOLINK.SCRC.Symbolics.COM>	>>> PLEASE DO -NOT- REPLY TO THIS ISSUE <<<Bring your comments to the meeting.See summary of CL-Cleanup discussion at end of message. -kmp-----Issue:          PATHNAME-CANONICAL-TYPEReferences:     MAKE-PATHNAME (p416)Category:       ADDITIONEdit history:   07-Jul-88, Version 1 by PitmanStatus:	        For Internal DiscussionRelated-Issues: PATHNAME-COMPONENT-CASEProblem Description:  The pathame-type of ``Lisp'' and ``Compiled Lisp'' files vary widely from  implementation to implementation.  "LSP" is common on Vax VMS. "lisp" is generally used for the Symbolics  file system. "l" and "lisp" are common on Unix. Some Lisp implementations  use customized extensions such as "cl" or even "jcl" (eg, for "Joe's CL").  It would be useful to probe the existence of either a source or a binary  file, but that cannot currently be done portably. Furthermore, it would be  useful to create certain standard kinds of files in a system-independent  fashion.  A common desire, for example, is to do    (DEFUN FILE-NEEDS-TO-BE-COMPILED (FILE)      (LET ((SOURCE (PROBE-FILE		      (MERGE-PATHNAMES FILE (MAKE-PATHNAME :TYPE ???))))	    (BINARY (PROBE-FILE		      (MERGE-PATHNAMES FILE (MAKE-PATHNAME :TYPE ???)))))        ... (FILE-WRITE-DATE SOURCE) ... (FILE-WRITE-DATE BINARY) ...))  The problem is that there's nothing portable to put in the ??? positions.  Indeed, depending on the host (ie, file system) of the pathname, the  type might need to differ even in the same Lisp implementation. For example,  Symbolics Genera stores its source files in names like "foo.l" on Unix,  "FOO.LSP" on VMS, etc.Proposal (PATHNAME-CANONICAL-TYPE:NEW-CONCEPT):  In addition to the normal strings and keywords currently allowed as fillers  of the TYPE field of a pathname, allow other keywords which designate  ``canonical types''.   A canonical type is translated to a real type by MAKE-PATHNAME so that the  (PATHNAME-TYPE (MAKE-PATHNAME :TYPE canonical-type)) is a string.  Introduce a new function PATHNAME-CANONICAL-TYPE which returns the canonical  type of an argument pathname, or the type if there is no canonical type.  For example,    (PATHNAME-CANONICAL-TYPE (MAKE-PATHNAME :TYPE :LISP)) => :LISP  [This information may be explicitly represented as an additional slot, or  computed on demand using a lookup table, as the implementor prefers.]  Define the following standard types:	:LISP		``Lisp'' (source) file	:BIN		``Compiled Lisp'' (object) file  Permit implementations to extend the set of canonical type names.Test Case:  (PATHNAME-TYPE (MAKE-PATHNAME :TYPE :LISP))   => "LSP" 	    ;Typically, on VMS   => "l" or "lisp" ;Typically, on Unix   => "L" or "LISP" ;Typically, on Unix 		    ; (assuming PATHNAME-COMPONENT-CASE:CANONICALIZE adopted)   ..etc.  (PATHNAME-TYPE (MAKE-PATHNAME :TYPE :BIN))   => "FAS" 	    ;eg, VAXLISP   => "BIN"	    ;eg, Symbolics file system   ...etc.  (PATHNAME-CANONICAL-TYPE (MAKE-PATHNAME :TYPE :LISP)) => :LISP  (PATHNAME-CANONICAL-TYPE (MAKE-PATHNAME :TYPE "LSP"))   => :LISP	    ;eg, VAXLISP   => "LSP"	    ;eg, UnixRationale:  This is a useful subset of the functionality already available in  at least one implementation.Current Practice:  Symbolics Genera implements this proposal.Cost to Implementors:  The cost of implementing these proposed features is very slightly.  MAKE-PATHNAME would have to change to coerce its :TYPE argument in implementations  where it does not do so already. PATHNAME-CANONICAL-TYPE can be implemented as a  fairly straightforward lookup.Cost to Users:  None. This change is upward compatible.Cost of Non-Adoption:  It would continue to be hard to portably name files when their types  differed from file system to file system.Benefits:  The cost of non-adoption would be avoided.Aesthetics:  Some programs would be able to abstract away from the particulars of the host  file system entirely. Some people believe this would be a definite improvement  in aesthetics.Discussion:  Note that different Lisp implementations which share the same file system,  need not and perhaps should not agree on the same type string for the  canonical type :BIN. That is, if I store source files on VAX VMS and compile  them both for use under Symbolics Genera and VAXLISP, then it is both  appropriate and useful that VAXLISP :BIN files be named "something.FAS"  and Genera :BIN files be named "something.BIN" since then they wouldn't  clobber each other.  Pitman supports PATHNAME-CANONICAL-TYPE:NEW-CONCEPT.-------Summary of discussion on CL-Cleanup: GZ suggested :COMPILED-LISP was suggested as a better name than :BIN. Masinter thought :SOURCE-LISP might be better than :LISP. Either of these would be gratuitously incompatible with Symbolics Genera, which already implements canonical types, but otherwise not technically unreasonable and probably something we should discuss. Sandra Loosemore offered the following revealing piece of code from her work and asked why we couldn't just do this.  (defvar *binary-file-type*      #+Symbolics                         (make-pathname :type "bin")      #+(and dec common vax (not ultrix)) (make-pathname :type "FAS")      #+(and dec common vax ultrix)       (make-pathname :type "fas")      #+pcls                              (make-pathname :type "b")      #+KCL                               (make-pathname :type "o")      #+Xerox                             (make-pathname :type "dfasl")      #+(and Lucid MC68000)               (make-pathname :type "lbin")      #+(and Lucid VAX VMS)               (make-pathname :type "vbin")      #+excl                              (make-pathname :type "fasl")      #+system::cmu                       (make-pathname :type "sfasl")      #+PRIME                             (make-pathname :type "pbin")      #+HP                                (make-pathname :type "b")      #+TI                                (make-pathname :type "xfasl")      "The default file type for compiled files.") The reason is that some implementations (e.g., Symbolics) deal with more than one file system type -- and properly the information varies with the file system type, not with the implementations.  [Since most implementations have only one associated file system type, this may not be obvious, but it's quite obvious on a Symbolics machine that you vary the extension name based on the host file system requirements.] Moon suggested a compromise where *compile-file-output-type* (his name for Sandra's *binary-file-type*) existed but could be either a canonical type or a physical type. Masinter worries about the PATHNAME-CANONICAL-TYPE part of the proposal being forced to be heuristic in some cases. [Will any alternative be any less heuristic? -kmp] Moon wanted the following example to be guaranteed to work:   (PATHNAME-CANONICAL-TYPE (PATHNAME "foo.lisp")) => :LISP where of course the string is implementation-dependent.  That is, PATHNAME-CANONICAL-TYPE must produce a canonical type even when the pathname was not constructed from a canonical type, but instead came from user typein, the TRUENAME function, the DIRECTORY function, or some similar source, when the pathname's type is one that a canonical type maps into. Moon also thought it would be nice to have a facility for users  (in addition to implementations) to extend the set of canonical type names, since users may well have their own types of files.  However, he admitted that the difficulty is that in any system that supports multiple file systems, it has to be complex enough to allow specification of separate mappings for each file system, which in turn requires a way to name file system types.  [At this point, we probably don't have time left in our schedule to produce such a facility. -kmp]*start*01075 00024 US Date:  4 Apr 89 12:37 PDTSender: CL-Cleanup-mailer%SAIL.Stanford:EDU:XeroxFrom: KMP%STONY-BROOK.SCRC.Symbolics:COM:XeroxSubject: Issue: PATHNAME-CANONICAL-TYPETo: CL-Cleanup%SAIL.Stanford:EDU:XeroxGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-CANONICAL-TYPETo: CL-Cleanup@SAIL.Stanford.EDUReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 04 APR 89 12:31:09 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 4 Apr 89  12:23:18 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 571220; Tue 4-Apr-89 15:23:07 EDTOriginal-Date: Tue, 4 Apr 89 15:22 EDTMessage-ID: <890404152241.8.KMP@BOBOLINK.SCRC.Symbolics.COM>GVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVThis was identified as `medium' importance in the pathname worldand deferred to the next meeting.*start*01127 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at  9-Apr-89 22:49:07 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 09 APR 89 22:49:02 PDTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 9 Apr 89  22:48:14 PDTReceived: from Semillon.ms by ArpaGateway.ms ; 09 APR 89 22:48:13 PDTDate: 9 Apr 89 22:47 PDTFrom: masinter.paSubject: Re: Issue: PATHNAME-CANONICAL-TYPE (Version 1)In-reply-to: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>'s message of Wed, 23 Nov 88 18:55 ESTTo: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: CL-Cleanup@SAIL.STANFORD.EDUMessage-ID: <890409-224813-3470@Xerox>You said: "I have some concerns about your alternate proposal but my mind is notclosed. I need more time to study this alternative and would like topostpone dealing with this issue until after the letter ballot, insteadtargeting a mailing in time for an in-person vote in January."I still like my alternative proposal, which is just a smaller,but useful, subset. *start*05734 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 10-Apr-89 16:23:46 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 10 APR 89 16:23:40 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 10 Apr 89  16:21:00 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 574802; Mon 10-Apr-89 19:21:01 EDTDate: Mon, 10 Apr 89 19:20 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-CANONICAL-TYPETo: CL-Cleanup@sail.stanford.eduMessage-ID: <19890410232048.0.MOON@EUPHRATES.SCRC.Symbolics.COM>Larry suggests a simpler proposal than Kent's.  Here is some backgroundon pathname canonical types in general:There are three purposes served by pathname canonical types:(1) Construction.  There is currently no portable way to construct apathname that follows local file naming conventions.  For example, givena program named "foo", we'd like to construct the conventional names forits source and compiled files.  These will be "foo.l" and "foo.b" on onesystem, "FOO.LSP" and "FOO.BIN" on another system, and "foo.lisp" and"foo.ibin" on a third system.More generally, we would like to be able to access naming conventionsfor many types of files, not just Lisp source and compiled Lisp.  Asimplifying assumption is that all naming conventions affect only thetype field.  Thus a facility to translate canonical types into actualtypes is sufficient.  Another assumption is that a given file systemalways uses the same actual type for a given class of file; Symbolicspathname canonical types are more general than this, but that is notbeing proposed here, as it was primarily useful only in connection witha transition between different releases of Unix, an application toospecialized to be enshrined in Common Lisp.We would also like users to be able to define new classes of files oftheir own, with associated file-system-dependent naming conventions.For example, if I write a portable `defsystem', I would use a uniquenaming convention for the file in which it stores its configurationdatabase.  The naming convention might not use the same string on everyfile system, so it should be a canonical type.(2) Recognition.  There is currently no portable way to classify a filefrom its pathname.  If I write a portable editor, I would like to beable to recognize the syntax of a program source file from its pathnametype field (Lisp, C, Ada, etc.)  The same table of local file namingconventions used in part 1 can be accessed in reverse to translate anactual type to a canonical type.  The editor can then look up thecanonical type in a table of known languages.There is a tension here between two goals when there are subclasses offiles.  Consider two systems that can cross-compile for each other.This clearly involves two canonical types for compiled Lisp files.Should the canonical type reflect the system for which the file wascompiled, so that the canonical type of a particular file has the samevalue in both systems?  Or should both systems use the same canonicaltype for files compiled to be loaded locally, so that the canonical typeof a particular usage of a file has the same value in both systems?(3) Translation.  There is currently no portable way to translate apathname written in the file naming conventions of one file system intoa pathname written in the file naming conventions of a different filesystem.  A trivial use for this is cross-host pathname defaulting andmerging in a heterogeneous network, e.g. so a portable copy file commandcan default the output file name intelligently.  A much more importantuse is in logical pathnames (logical pathnames are a universal filesystem that is mapped into the locally available file system throughsite-dependent translations; this is primarily useful in softwaredistribution), where it is necessary to translate accurately betweenlogical pathname file naming conventions and local file namingconventions.  The table of file naming conventions used in part 1 can beaccessed in reverse to identify the canonical type of a logicalpathname, and then accessed forwards to translate to the actual type tobe used on the local file system.Whether we want Common Lisp to support these three features in aportable fashion is of course a matter of policy.  Omitting any or allof the features does not make the language unusable, it just means twothings: Users writing programs not intended to be portable will buildthe local conventions directly into their programs, causing problemslater if they change their minds about portability.  Every user writinga portable program that needs such capabilities has to implement themhimself, or obtain them from some supplier other than the Common Lisplanguage, which will produce a small non-portable appendage to theprogram that has to be redone for each port.Critique of the proposals:Larry's proposal addresses only the first paragraph of part 1.  Itdoes not allow user definition of file naming conventions and doesnot support recognition or translation at all.Kent's proposal addresses part 2 and the first paragraph of part 1.It probably extends trivially to address part 3 as well, by addinga statement that MERGE-PATHNAMES uses canonical types to mergethe type field.As noted in the discussion section of the proposal, I would prefera proposal that addressed all three parts, which would require away to name file system types.  We could follow the standard definedby the Internet Domain Name system.*start*02444 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 11-Apr-89 21:56:59 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 11 APR 89 21:56:57 PDTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 11 Apr 89  21:55:01 PDTReceived: from Semillon.ms by ArpaGateway.ms ; 11 APR 89 21:54:37 PDTDate: 11 Apr 89 21:53 PDTFrom: masinter.paSubject: Re: Issue: PATHNAME-CANONICAL-TYPEIn-reply-to: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>'s message of Mon, 10 Apr 89 19:20 EDTTo: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>cc: CL-Cleanup@sail.stanford.eduMessage-ID: <890411-215437-9502@Xerox>I like your analysis. My argument is that the first paragraph of (1) is the"most important", and is the only one that I think can be solved. While wecan make some requirements on lisp system's naming conventions, e.g., thatthe naming convention that distinguishes a Lisp source and compiled Lispmust affect only the type field, we can't require that of otherapplications. Since your "assumptions" are often false ("all namingconventions affect only the type field", "a given file system always usesthe same actual type for a given class of file"), a design which presumesthey are true are not good canditates for the standard. Similarly, there are numerous file systems where there is no good canonicalmapping from pathname-type to actual knowledge of the kind of file, and sothe prerequesites are not satisifed for being able to do recognition andtranslation based merely on pathname-type. (I'm thinking of the Macintosh,where the actual file type is frequently encoded not in the pathname butrather in the 'creator' and 'type' fields, and DOS, where the threecharacter limit means that the same pathname-type is frequently used fordifferent interpretations by different applications, and some Xeroxsystems, where the actual file type is encoded by a 16-bit file attribute,etc.)I don't think it is merely a matter of policy whether Common Lisp shouldsupport all three features; I think it is also a matter of feasibility. Ifsupporting the features is in fact impossible in many file systems, weshouldn't require them to be supported. Since Lisp implementors havecontrol over the file types used by their compiler, we can requirecanonical values for make-pathname, however.