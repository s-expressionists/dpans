*start*02770 00024 US GV-Info: boyer@CLI.COM at 17-Apr-89 12:34:43 from AGReturn-Path: <boyer@CLI.COM>Received: from CLI.COM ([192.31.85.1]) by Xerox.COM ; 17 APR 89 12:34:46 PDTReceived: by CLI.COM (4.0/1); Mon, 17 Apr 89 14:31:51 CDTDate: Mon, 17 Apr 89 14:31:51 CDTFrom: Robert S. Boyer <boyer@CLI.COM>Message-Id: <8904171931.AA00257@CLI.COM>To: masinter.paCc: wfs@CLI.COM, jonl@lucid.comSubject: Fast IOReply-To: boyer@cli.comSorry for not being informative about read-char, fast-read-char, and:in-line.In both Lucid and AKCL, it takes about 60 microseconds on a Sun-3/280to do a read-char or read-byte in the usual case.  That is a lot oftime!  I am not really sure why it should take so long, but it does.Something about doing necessary checking that the stream is not fancy,bidirectional, etc., etc.  (I am not making exact timing remarks here-- just ballpark.)Of course, in Unix on a Sun-3/280, the C programmer can get acharacter in a couple of microseconds (again, ballpark).  So bothLucid and AKCL have non-CLTL extensions to make it possible to movecharacters at microsecond speeds.  Lucid does this by defining 6functions that have a "fast-" prefix, e.g. fast-read-char.  AKCL(1.112) adds a new declaration (:in-line) whose semantics is somethinglike "I hereby assert that here is a really simple sort of stream andI want the AKCL compiler to therefore lay down fast code forread-char".If these explanations don't suffice, I'm in over my head.  I amspeaking here just as a user, not an implementor; but I am a user whosees the necessity of a fast way to read characters in any CommonLisp.  I suspect that since both AKCL and Lucid have run into thisproblem, other von Neumann machine Lisps will too.  (In fact, myrecollection is that read-char stood a lot of room for speeding up onLispms, too, perhaps for the same reasons.)I personally like the AKCL idea of somehow adding a declaration that astream is "simple".  As it is, in our theorem-prover code we now do a(proclaim '(declaration :in-file)), which, as I understand it, meansthat :in-file declarations will be ignored by, say, the Lucid compileror any other compiler that doesn't know about :in-line.  read-charwill go fast in AKCL, but the code will also work in Lucid.  If wewere to use Lucid's fast-read-char, say, that would work for Lucid butwe would need dialect conditionals defining such a function to getfast-read-char to work in other Lisps besides Lucid.  We abhor dialectconditionals.I would much prefer a CLTL uniform nomenclature, any nomenclature,fast-read-char, :in-line, or anything else.Thanks,BobP.S.  If you have any serious questions about :in-line, I suspect thatSchelter (wfs@cli.com) will be happy to answer them.*start*01013 00024 USaGV-Info: boyer@CLI.COM at 17-Apr-89 07:42:58 from AGReturn-Path: <boyer@CLI.COM>Received: from CLI.COM ([192.31.85.1]) by Xerox.COM ; 17 APR 89 07:42:44 PDTReceived: by CLI.COM (4.0/1); Mon, 17 Apr 89 09:39:49 CDTDate: Mon, 17 Apr 89 09:39:49 CDTFrom: Robert S. Boyer <boyer@CLI.COM>Message-Id: <8904171439.AA28390@CLI.COM>To: masinter.paCc: wfs@CLI.COM, jonl@lucid.comSubject:  Fast IOReply-To: boyer@cli.comPerhpas the ANSI standardization committee should consider the issueof standard nomenclature for fast IO for simple streams.  Lucid hasfast-read-char (and 5 other fast-... functions) which reads about 20times faster than read-char for vanilla file streams.  Schelter hasrecently added the declarations :in-file and :out-file to AKCL forsuch simple streams and implemented a similar speed-up.  Perhaps thisissue has already been considered and a standard nomenclature decidedupon.  If it has, could you please tell me what the new nomenclatureis?Thanks,Bob*start*01305 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 19-Apr-89 15:58:21 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 19 APR 89 15:58:19 PDTReceived: from lucid.com by SAIL.Stanford.EDU with TCP; 19 Apr 89  15:54:32 PDTReceived: from blacksox ([192.9.201.39]) by heavens-gate.lucid.com id AA11844g; Wed, 19 Apr 89 15:54:11 PDTReceived: by blacksox id AA01834g; Wed, 19 Apr 89 15:53:40 PDTDate: Wed, 19 Apr 89 15:53:40 PDTFrom: Eric Benson <eb@lucid.com>Message-Id: <8904192253.AA01834@blacksox>To: boyer@cli.comCc: Moon@STONY-BROOK.SCRC.Symbolics.COM, cl-cleanup@sail.stanford.edu, wfs@CLI.COMIn-Reply-To: Robert S. Boyer's message of Wed, 19 Apr 89 17:15:32 CDT <8904192215.AA03885@CLI.COM>Subject: no :in-fileHowever, in order to be competitive with C in speed it would be usefulto be able to do the following:For binary streams, declare the element-type of the stream, e.g. allowthe STREAM type specifier to take an optional element-type like ARRAYand COMPLEX.For binary streams, functions to read and write arrays in a singlechunk.  Lucid supplies READ-ARRAY and WRITE-ARRAY as extensions.For character input, a destructive version of READ-LINE.*start*02004 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 19-Apr-89 16:22:52 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 19 APR 89 16:22:53 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 19 Apr 89  16:21:42 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 581565; Wed 19-Apr-89 19:21:33 EDTDate: Wed, 19 Apr 89 19:21 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: no :in-fileTo: Eric Benson <eb@lucid.com>cc: boyer@cli.com, cl-cleanup@sail.stanford.edu, wfs@CLI.COMIn-Reply-To: <8904192253.AA01834@blacksox>Message-ID: <19890419232148.9.MOON@EUPHRATES.SCRC.Symbolics.COM>    Date: Wed, 19 Apr 89 15:53:40 PDT    From: Eric Benson <eb@lucid.com>    However, in order to be competitive with C in speed it would be useful    to be able to do the following:    For binary streams, declare the element-type of the stream, e.g. allow    the STREAM type specifier to take an optional element-type like ARRAY    and COMPLEX.I see no harm in this, if someone wants to propose it.  I'm not surewhether Symbolics would use it, but I think it's a reasonable thingfor imaginable implementations to want.    For binary streams, functions to read and write arrays in a single    chunk.  Lucid supplies READ-ARRAY and WRITE-ARRAY as extensions.    For character input, a destructive version of READ-LINE.Symbolics Genera has the equivalent of all of these under differentnames.  The read-array and write-array (shouldn't they be calledread-vector and write-vector?) are generic and work for characterstreams as well, given a string as the vector.  Someone should writea proposal for these features.  It might or might not be too lateto add this to X3J13 Common Lisp, but at least everybody could usecompatible names for their extensions.*start*00587 00024 US GV-Info: boyer@CLI.COM at 17-Apr-89 17:31:28 from AGReturn-Path: <boyer@CLI.COM>Received: from CLI.COM ([192.31.85.1]) by Xerox.COM ; 17 APR 89 17:17:00 PDTReceived: by CLI.COM (4.0/1); Mon, 17 Apr 89 19:14:08 CDTDate: Mon, 17 Apr 89 19:14:08 CDTFrom: Robert S. Boyer <boyer@CLI.COM>Message-Id: <8904180014.AA01927@CLI.COM>To: masinter.paCc: wfs@CLI.COM, jonl@lucid.comSubject: :in-line -> :in-fileReply-To: boyer@cli.comQuite a few times in my last message I wrote :in-line when I meant:in-file.  Sorry.  Every :in-line should have been :in-file.