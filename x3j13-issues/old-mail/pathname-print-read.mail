*start*03702 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 21 OCT 88 14:03:21 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 21 Oct 88  14:00:40 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 480184; Fri 21-Oct-88 17:00:54 EDTDate: Fri, 21 Oct 88 17:00 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-PRINT-READ (Version 1)To: CL-Cleanup@SAIL.Stanford.EDUMessage-ID: <881021170043.3.KMP@BOBOLINK.SCRC.Symbolics.COM>From my list of "pending issues" distributed at the last X3J13 meeting...-----Issue:        PATHNAME-PRINT-READReferences:   File System Interface (pp409-427)Category:     CHANGE/ADDITIONEdit history: 21-Oct-88, Version 1 by PitmanStatus:	      For Internal DiscussionProblem Description:  Although pathnames are required to print re-readably, there is no  standardized representation for pathnames and so no standardized  way in which they should print.  Further, it is common in programs to want pathnames to print in  their file-system specific format.Proposal (PATHNAME-PRINT-READ:SHARPSIGN-P):  Define the reader syntax #P"..." to be equivalent to   #.(PARSE-NAMESTRING "...").  Define that when *PRINT-ESCAPE* is T, the syntax #P"..." is  how a pathname should be printed by WRITE (and hence by PRIN1,  PRINT, etc.). The "..." is the namestring representation of the  pathname.  Define that when *PRINT-ESCAPE* is NIL, WRITE writes a pathname  object P by writing (NAMESTRING p) instead.Test Case:  (PARSE-NAMESTRING "foo.lisp")  => #P"foo.lisp"  (FORMAT NIL "Written to ~A." #P"foo.bin")  => "Written to foo.bin."  (TYPEP #P"foo.bin" 'PATHNAME)  => TRationale:  This satisfies the stated goals.  [For :ESCAPE T] It will not be possible to make the printed  pathname printed representation totally portable because of  variations in file systems, but for different Common Lisp  implementations on the same file system, or for Common Lisp  systems running on file systems having compatible syntax,  portability would be improved by this specification.  Also, some implementations (eg, Symbolics Genera) use  specialized representations for pathnames on different file  systems. Eg, an MSDOS pathname is of type MSDOS-PATHNAME,  not just type PATHNAME. #S(PATHNAME ...) is not only more  verbose than necessary but might be misleading to some users  because the object created will not have a TYPE-OF PATHNAME.  [For :ESCAPE NIL] Printing the namestring of a pathname is  a common operation and it is convenient to have a shorthand  for doing it. Further, some implementations may be able to  optimize the presentation of a pathname in this mode by  printing it without actually consing the string.Current Practice:  Symbolics Genera implements the proposed behavior.Cost to Implementors:  Fairly minor changes to the readtable and the printer.Cost to Users:  Users who now use the non-portable syntax #S(...) in order  to enter literal pathnames might have to change. [However,  implementations would be free to continue to support this  read syntax for compatibility.]Cost of Non-Adoption:  Portability of code and data involving pathnames within a  given file system (or between suitably similar file systems)  would be hampered needlessly.Benefits:  The cost of non-adoption would be avoided.Aesthetics:  The #P syntax is pretty and hides unimportant details.Discussion:  Pitman supports this change.*start*01379 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 21 OCT 88 14:36:54 PDTReceived: from multimax.ARPA (MULTIMAX.ENCORE.COM) by SAIL.Stanford.EDU with TCP; 21 Oct 88  14:35:33 PDTReceived:  by multimax.ARPA (5.51/25-eef)	id AA00495; Fri, 21 Oct 88 17:34:21 EDTReceived: from localhost by mist.UUCP (3.2/4.7)	id AA17855; Fri, 21 Oct 88 17:38:17 EDTMessage-Id: <8810212138.AA17855@mist.UUCP>To: Kent M Pitman <KMP%STONY-BROOK.SCRC.Symbolics.COM@MULTIMAX.ENCORE.COM>Cc: CL-Cleanup%SAIL.Stanford.EDU@MULTIMAX.ENCORE.COMSubject: Re: Issue: PATHNAME-PRINT-READ (Version 1) In-Reply-To: Your message of Fri, 21 Oct 88 17:00:00 -0400.             <881021170043.3.KMP@BOBOLINK.SCRC.Symbolics.COM> Date: Fri, 21 Oct 88 17:38:16 EDTFrom: Dan L. Pierson <pierson%mist@MULTIMAX.ENCORE.COM>For current practice:KCL uses #"..."(This is going to give KCL users trouble with Water's new portablepretty printer since Dick has said that he won't change because ``#"''is just too nice for his purposes.)  It would be nice to figure out some way to specify which charactersare for implementation extensions to the # read-macro and which arefor users, but that's probably a question to be answered by the(inactive) conformance subcommittee if at all.*start*01231 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 21 OCT 88 14:19:57 PDTReceived: from lucid.com by SAIL.Stanford.EDU with TCP; 21 Oct 88  14:18:02 PDTReceived: from blacksox ([192.9.201.39]) by heavens-gate.lucid.com id AA00442g; Fri, 21 Oct 88 14:17:45 PDTReceived: by blacksox id AA00256g; Fri, 21 Oct 88 14:13:50 pdtDate: Fri, 21 Oct 88 14:13:50 pdtFrom: Eric Benson <eb@lucid.com>Message-Id: <8810212113.AA00256@blacksox>To: KMP@STONY-BROOK.SCRC.Symbolics.COMCc: CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: Kent M Pitman's message of Fri, 21 Oct 88 17:00 EDT <881021170043.3.KMP@BOBOLINK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-PRINT-READ (Version 1)For Current Practice:Lucid CL also implements the proposed behavior.For Cost to Users:Users who define their own #P read macro may be unhappy.I weakly support this change.  I wish someone would make a proposalfor generic pathnames.  I don't think they ever got the considerationthey deserved.  (I know they aren't really related to this issue,except insofar as users would like to have portable pathnames in theirprograms.)*start*00845 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 02 JAN 89 21:02:39 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 2 Jan 89  21:02:16 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 02 JAN 89 21:00:45 PSTDate: 2 Jan 89 21:00 PSTFrom: masinter.paSubject: Re: Issue: PATHNAME-PRINT-READ (Version 1)In-reply-to: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>'s message of Fri, 21 Oct 88 17:00 EDTTo: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: CL-Cleanup@SAIL.Stanford.EDUMessage-ID: <890102-210045-1930@Xerox>For Current Practice, Envos Medley prints pathnames with the syntax #.(pathname "asdf").I like #P"asdf" better, but #.(pathname string) is currently pretty portable.*start*02919 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 05 JAN 89 21:47:22 PSTReceived: from ALDERAAN.SCRC.Symbolics.COM ([128.81.41.109]) by SAIL.Stanford.EDU with TCP; 5 Jan 89  20:29:41 PSTReceived: from GANG-GANG.SCRC.Symbolics.COM by ALDERAAN.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 256497; Thu 5-Jan-89 23:26:48 ESTDate: Thu, 5 Jan 89 23:26 ESTFrom: Glenn S. Burke <gsb@ALDERAAN.SCRC.Symbolics.COM>Subject: Issue PATHNAME-PRINT-READ, v1, and then someTo: KMP@STONY-BROOK.SCRC.Symbolics.COM, IIM@ECLA.USC.EDUcc: CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <890104184739.3.KMP@BOBOLINK.SCRC.Symbolics.COM>Message-ID: <19890106042619.9.GSB@GANG-GANG.SCRC.Symbolics.COM>    Date: Wed, 4 Jan 89 18:47 EST    From: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>    Yes, hosting is an issue that I deliberately glossed in the proposal.    Let me say a few words about that and other issues that have been raised.     - I think #P is better than #. for the same reasons that Touretzky       proposed #H instead of relying on #. . That is, because most Lisp       data can be understood by engines considerably less complex than       Lisp itself. Lists, numbers, etc. are parseable and manipulable       [are those really words? I say them a lot but they look funny        written down..] by simpler programs which do not contain EVAL.       Using #. makes a large barrier to such programs in manipulating       any data involving pathnames, which a priori should not be an       opaque concept to non-Lisp programs.    . . .I would strongly prefer that a more generic approach be taken toallocating reader syntax.Previously #S has been suggested as the obvious place for extensionssuch as this to occur.  In retrospect, I think that a slightly differentsyntax should be reserved for extension by Common Lisp, in order thatany existing #S usage by particular implementations not conflict withextensions dictated by CL.e.g., if #T(typename ...) is reserved as the area of extension, then ifCL says that pathnames are read as #T(PATHNAME "namestring") there wouldbe no conflict for an implementation which happened to implement thereadableness of pathnames through the #S syntax already.  Such animplementation should print a pathname using #T(PATHNAME "namestring")and read both its older #S(PATHNAME :name whatever ...) and the #Tsyntax.No implementation would be permitted to extend this syntax, thereforethere would never be any conflict when it is extended by CL.Doing this does not preclude eventual expansion of a user's ability todefine #S syntax (something I think should be done).  It DOES give CL aplace to expand read syntax into without using up all of the dispatchcharacters, something which is beginning to look pretty likely.*start*00813 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 04 JAN 89 15:03:38 PSTReceived: from ECLA.USC.EDU by SAIL.Stanford.EDU with TCP; 4 Jan 89  15:02:57 PSTDate: Wed, 4 Jan 89 13:57:23 PSTFrom: Kim A. Barrett <IIM@ECLA.USC.EDU>Subject: Issue PATHNAME-PRINT-READ, v1To: cl-cleanup@SAIL.STANFORD.EDUcc: iim@ECLA.USC.EDUMessage-ID: <12459944142.14.IIM@ECLA.USC.EDU>For Current Practice, IIM Common Lisp prints pathnames with the syntax#.(parse-namestring "asdf" "host").  The reason for using this convention isthat for some strings you need to know what parsing conventions to use in orderto get back an equivalent pathname.  And yes, I agree it is ugly and verbose.kab-------*start*03936 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 04 JAN 89 15:49:38 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 4 Jan 89  15:49:13 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 515448; Wed 4-Jan-89 18:48:01 ESTDate: Wed, 4 Jan 89 18:47 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue PATHNAME-PRINT-READ, v1To: IIM@ECLA.USC.EDUcc: CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <12459944142.14.IIM@ECLA.USC.EDU>Message-ID: <890104184739.3.KMP@BOBOLINK.SCRC.Symbolics.COM>Yes, hosting is an issue that I deliberately glossed in the proposal.Let me say a few words about that and other issues that have been raised. - I think #P is better than #. for the same reasons that Touretzky   proposed #H instead of relying on #. . That is, because most Lisp   data can be understood by engines considerably less complex than   Lisp itself. Lists, numbers, etc. are parseable and manipulable   [are those really words? I say them a lot but they look funny    written down..] by simpler programs which do not contain EVAL.   Using #. makes a large barrier to such programs in manipulating   any data involving pathnames, which a priori should not be an   opaque concept to non-Lisp programs. - The issue of hosts is more severe in a multi-file-system    environment than many CL implementors working in single-file-system   environments may realize. At Symbolics, the decision was made a   long time ago to use what's called the `host colon' convention.   Basically, it says that the first `:' in a filename is -always-   the separator of the host from other host-specific syntax. To   avoid ambiguity, we simply define that you cannot have a    namestring with a device specifier (or whatever other host-specific   thing a `:' may mean) without having a host specifier. So, if my   default host is a Tops-20 named Hydrogen, I can write "<FOO>" or   "H:<FOO>" to mean "<FOO>" on Hydrogen, but if there is a device   "H" on Hydrogen, I must write either "H:H:<FOO>"    (to be context-independent) or ":H:<FOO>" (if I know that H is   the default and I want to get past the `host colon'. Our   NAMESTRING and PARSE-NAMESTRING obey these same conventions.   So Symbolics pathnames print as #P"host:asdf" (to use your example   above) without ambiguity. But I agree that without such a convention,   there are still some rough edges. To make things work for external   interfaces, though, pathnames support a :string-for-host message   which gives you the string the file system wants to see.   I have not proposed the Symbolics solution (which was a major   changeover at the time it was introduced) even though I think it's   the right thing (and has solved a lot of major problems) mostly    because I've seen serious resistance [eg, in issue PATHNAME-COMPONENT-CASE]   to solving issues of multiple file systems. My impression is that   enough people either believe that there is only one file system in   the world or only one that they'll ever have to deal with or   or at least only one that they'll have to deal with in any given   running Lisp that they feel comfortable just sweeping these issues   under the rug. I think that's very sad, and I think they're making   a big mistake, but there's only so much I can do. Either someone   else with multiple-file-system experience needs to stand up and   help with this problem, or someone from the single-file-system   world needs to our community a vote of confidence that we're not   pushing these things on people gratuitously, or else people should   just hang it up and expect to get screwed by cross-host problems   such as the very real one you allude to.*start*01373 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 05 JAN 89 11:15:14 PSTReceived: from REAGAN.AI.MIT.EDU by SAIL.Stanford.EDU with TCP; 5 Jan 89  11:13:45 PSTReceived: from JACKIE-O.AI.MIT.EDU by REAGAN.AI.MIT.EDU via CHAOS with CHAOS-MAIL id 159294; Thu 5-Jan-89 14:02:55 ESTDate: Thu, 5 Jan 89 14:03 ESTFrom: Richard Mlynarik <Mly@AI.AI.MIT.EDU>Subject: Issue PATHNAME-PRINT-READ, v1To: CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <890104184739.3.KMP@BOBOLINK.SCRC.Symbolics.COM>Message-ID: <19890105190305.1.MLY@JACKIE-O.AI.MIT.EDU>I still don't understand why this needs to be standardised upon,particularly since Common Lisp pathnames in general are sosubfunctional.  (Just what can portable programs do with the damn thingsafter they have successfully read them?)Even if others do feel an urgent need to allow such portablability, Idon't understand why #S(PATHNAME ...) syntax isn't acceptable. (Perhapsbecause Pitman hadn't `invented' it yet.)One could go with #S(PATHNAME "host:namestring")or #S(PATHNAME "host" "namestring"), which is perhaps the best choice,or #S(PATHNAME :host "host" :directory '("foo" "bar") :name "baz")or whatever.Usurping #P makes it harder for users to find an unused reader macrocharacter.*start*01816 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 06 JAN 89 10:51:00 PSTReceived: from multimax.encore.com by SAIL.Stanford.EDU with TCP; 6 Jan 89  07:58:59 PSTReceived: from mist.encore.COM by multimax.encore.com (5.59/25-eef)	id AA16559; Fri, 6 Jan 89 10:55:42 ESTReceived: from localhost by mist. (4.0/SMI-4.0)	id AA15499; Fri, 6 Jan 89 10:55:44 ESTMessage-Id: <8901061555.AA15499@mist.>To: "Glenn S. Burke" <gsb@ALDERAAN.SCRC.Symbolics.COM>Cc: CL-Cleanup@SAIL.Stanford.EDUSubject: Re: Issue PATHNAME-PRINT-READ, v1, and then some In-Reply-To: Your message of Thu, 05 Jan 89 23:26:00 -0500.             <19890106042619.9.GSB@GANG-GANG.SCRC.Symbolics.COM> Date: Fri, 06 Jan 89 10:55:41 ESTFrom: Dan L. Pierson <pierson@mist.encore.com>    I would strongly prefer that a more generic approach be taken to    allocating reader syntax.    I agree.  We really need to split the possible read macro charactersnot given a meaning in CLtL into three groups:    1. Potential Common Lisp extensions.  Your idea of #T as the only       hook here makes some sense.    2. Potential implementation extensions.  I favor a small set of       of characters here as well.    3. Reserved for user extensions. This isn't as easy as it may seem.  One problem is what happens when apopular user extension is incorporated in an implementation or evenstandardized?  The read-macro issues in Dick Waters' new prettyprinter are a good example; he uses #" as a read macro in aparticularly elegant way -and- this in conflict with currect practicein KCL, which uses #" for pathnames.At the least we need to officially recognize this problem and set someguidelines for oursevles.*start*01061 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 06 JAN 89 15:29:07 PSTReceived: from RELAY.CS.NET by SAIL.Stanford.EDU with TCP; 6 Jan 89  15:28:21 PSTReceived: from relay2.cs.net by RELAY.CS.NET id af06590; 6 Jan 89 9:05 ESTReceived: from draper.com by RELAY.CS.NET id aa27590; 6 Jan 89 8:38 ESTDate: Fri, 6 Jan 89 07:56 ESTFrom: "Steve Bacher (Batchman)" <SEB1525@draper.com>Subject: Re: Issue PATHNAME-PRINT-READ, v1To: cl-cleanup@SAIL.STANFORD.EDUX-VMS-To: CL-CLEANUP,SEB1525re: Richard Mlynarik's message about #S(PATHNAME ...) Would this be legal?  Does it imply that PATHNAME is implemented as aDEFSTRUCT?  Does the #S(PATHNAME "string" "another-string") syntax conflictwith #S(defstruct-structure :key value ...) syntax, or can it be analogousto BOA-constructor structures?  Whatever the case, I think it's far lessgood idea to compromise #S this way than to "use up" #P, which Lucid isalready using anyhow.*start*03586 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 07 JAN 89 21:54:02 PSTReceived: from lucid.com by SAIL.Stanford.EDU with TCP; 7 Jan 89  21:53:40 PSTReceived: from bhopal ([192.9.200.13]) by heavens-gate id AA08743g; Sat, 7 Jan 89 21:49:30 PSTReceived: by bhopal id AA05537g; Sat, 7 Jan 89 21:51:44 PSTDate: Sat, 7 Jan 89 21:51:44 PSTFrom: Jon L White <jonl@lucid.com>Message-Id: <8901080551.AA05537@bhopal>To: KMP@STONY-BROOK.SCRC.Symbolics.COMCc: IIM@ECLA.USC.EDU, CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: Kent M Pitman's message of Wed, 4 Jan 89 18:47 EST <890104184739.3.KMP@BOBOLINK.SCRC.Symbolics.COM>Subject: Issue PATHNAME-PRINT-READ, v1re:  - I think #P is better than #. for the same reasons that Touretzky     proposed #H instead of relying on #. . That is, because most Lisp     data can be understood by engines considerably less complex than     Lisp itself.  . . .I don't think Touretzky was thinking along those lines when he madethe #H proposal.  Perhaps  you are remember pieces of the followingmessage, which was part of a lengthy discussion that took place on the Common-Lisp mailing list last summer.-- JonL --  Date: Fri, 24 Jun 88 16:56:00 PDT  From: Jon L White <edsel!jonl@labrea.stanford.edu>  To: cperdue@sun.com  Cc: ELIOT@cs.umass.edu, Moon@stony-brook.scrc.symbolics.com,	  common-lisp@sail.stanford.edu  In-Reply-To: Cris Perdue's message of Fri, 17 Jun 88 10:16:38 PDT <8806171716.AA01554@clam.sun.com>  Subject:  #.  re: > 	(I don't count #.(make-hash-table...) because it's so gross.)      . . .      I would like to add my agreement to David Moon's statement.  With the      #. readmacro you don't have to learn extra syntax to understand the      printed representation, and it is nothing if not adequately general.  Let's just say that it is "nothing".  The problem with #. is precisely that   it is not syntax; rather, it is an "out" where the designers of the language   failed to come up with a syntax.  To see this more clearly, consider writing   a trivial C program to read in "simple" Lisp expressions into equivalent data  structures of the C world.  Parsing is no real problem [maybe could even   be yacc'd away], INTERNing of symbols is just a table lookup, numbers is   numbers [hey, even C can do fixnums and floats!], defstructs can be structs,  strings are strings, and so on; cons cells etc. can be cut out of mallocated   space, and pointer-type variables make it easly to link things together.  But there is no reasonable equivalent for the #. requirements -- no matter   how trivial the data-type returned, it implies the existence of a Lisp   EVALuator just to parse-&-build the representation.  That's a LOT to require   for merely constructing up some simple data structures.  Thus while #. could be viewed as an adequate escape mechanism, it certainly  couldn't be part of a general interchange language.  And yet the hard problems are not limited to the "interchange" cases.    Consider file-processors other than LOAD or COMPILE-FILE (such as the   cross-reference program described by Tom Gruber in the first issue of  Lisp Pointers).  Such a processor will want to READ a file of Lisp code,   but not necessarily evaluate anything in it.  How will it react to the   file [named, say "/u/loser/trojan-horse.lisp"]:     (defun gift-horse (x)	#.(progn (punch-paper-tape)		 (delete-all-user-files)		 (logout)		 'x))  -- JonL --*start*02391 00024 USaReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 10 FEB 89 13:25:06 PSTReceived: from ECLC.USC.EDU by SAIL.Stanford.EDU with TCP; 10 Feb 89  13:25:26 PSTDate: Thu, 9 Feb 89 11:25:54 PSTFrom: Kim A. Barrett <IIM%ECLA@ECLC.USC.EDU>Subject: re: PATHNAME-PRINT-READ, v1To: kmp@SCRC-STONY-BROOK.ARPAcc: cl-cleanup@SAIL.STANFORD.EDU, iim%ECLA@ECLC.USC.EDUMessage-ID: <12469353749.28.IIM@ECLA.USC.EDU>I agree with your sentiments regarding multiple file systems.  We spent a lotof time thinking about the problems involved in dealing with such situations,and I don't know that we really got very far in solving them.  To some extentwe've punted, since we are currently in a "single file system" environment.That's changing though, and we're going to have to face up to the situation.While I wasn't persuaded by the arguments for #H for printing hash-tables, Ithink they bear more weight in the case of pathnames.  I could easily bepersuaded to support printing pathnames in some standard format (though notnecessarily #P -- I agree with GSB (1/5/89) and Dan Pierson (1/6/89) that weshould be careful about chewing up # reader macros), if it could be specifiedin such a way that multiple file system problems were at least solvable(preferably solved, but that seems to be asking too much). BTW, I don't think a Symbolics pathname of #P"host:asdf" is equivelent to#.(parse-namestring "asdf" "host"), since the former contains a manifest host,while the latter might not (depending on how "host" parses the string "asdf").On rereading the top of CLtL p.415 though (manifest host must match explicitparsing host), maybe the "right" way to print the latter is really  #.(parse-namestring "asdf" nil #.(parse-namestring <string> "host"))  <string> := namestring which specifies only the host "host", in the syntax              used by the host "host" (got that).Bletch.Fortunately, most of the time this can be collapsed to the former rendering inone way or another.  The case where you can't seems pretty pathological (parsea string according to some host's parsing conventions, but it contains amanifest host which is not only not the host used for parsing, but parsespathnames differently from the host used for parsing).kab-------*start*01906 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 14-Mar-89 12:53:23 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 14 MAR 89 12:52:55 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 14 Mar 89  12:53:02 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 14 MAR 89 12:33:37 PSTDate: 14 Mar 89 12:32 PSTFrom: masinter.paSubject: re: PATHNAME-PRINT-READ, v1In-reply-to: Kim A. Barrett <IIM%ECLA@ECLC.USC.EDU>'s message of Thu, 9 Feb 89 11:25:54 PSTTo: Kim A. Barrett <IIM%ECLA@ECLC.USC.EDU>cc: cl-cleanup@SAIL.STANFORD.EDUMessage-ID: <890314-123337-1569@Xerox>If this is going to be discussed at the X3j13 meeting, we should havea new version with all of the various additions to current practiceand discussions appended.pierson says:KCL uses #"..."EB says:"For Current Practice:Lucid CL also implements the proposed behavior.For Cost to Users:Users who define their own #P read macro may be unhappy.I weakly support this change. ..."Masinter says:"For Current Practice, Envos Medley prints pathnames with the syntax #.(pathname "asdf").I like #P"asdf" better, but #.(pathname string) is currently pretty portable."Barrett says:"For Current Practice, IIM Common Lisp prints pathnames with the syntax#.(parse-namestring "asdf" "host").  The reason for using this convention isthat for some strings you need to know what parsing conventions to use in orderto get back an equivalent pathname.  And yes, I agree it is ugly and verbose."KMP and kab sent a long messages but I can't summarize easily.Mly says "I still don't understand why this needs to be standardised upon..."and "Even if others do feel an urgent need to allow such portablability, Idon't understand why #S(PATHNAME ...) syntax isn't acceptable."*start*01525 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 14-Mar-89 13:18:31 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 14 MAR 89 13:16:58 PSTReceived: from multimax.encore.com ([129.91.1.14]) by SAIL.Stanford.EDU with TCP; 14 Mar 89  13:17:08 PSTReceived: from mist.encore.COM by multimax.encore.com with SMTP (5.61/25-eef)	id AA18290; Tue, 14 Mar 89 16:16:11 -0500Received: from localhost by mist. (4.0/SMI-4.0)	id AA05011; Tue, 14 Mar 89 16:13:03 ESTMessage-Id: <8903142113.AA05011@mist.>To: masinter.paCc: cl-cleanup@SAIL.STANFORD.EDUSubject: Re: PATHNAME-PRINT-READ, v1 In-Reply-To: Your message of 14 Mar 89 12:32:00 -0800.             <890314-123337-1569@Xerox> Date: Tue, 14 Mar 89 16:13:01 ESTFrom: Dan L. Pierson <pierson@mist.encore.com>    Date: 14 Mar 89 12:32 PST    From: masinter.pa@Xerox.COM    If this is going to be discussed at the X3j13 meeting, we should have    a new version with all of the various additions to current practice    and discussions appended.        pierson says:    KCL uses #"..."    Absolutely true.  However I don't approve of it for several reasons:    #P is more prevalent    Issue: PRETTY-PRINT-INTERFACE puts #"..." to a better use.  This    is relevant for those of us who will use Water's pretty printer    whether or not the issue passes.    #"..." is just too good a "name" to be reserved for pathname syntax.*start*04994 00024 US GV-Info: X3J13-mailer@SAIL.Stanford.EDU at 23-Mar-89 21:19:11 from AGReturn-Path: <X3J13-mailer@SAIL.Stanford.EDU>Received: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 23 MAR 89 21:19:08 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 23 Mar 89  20:59:42 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via INTERNET with SMTP id 563865; 23 Mar 89 15:36:42 ESTDate: Thu, 23 Mar 89 15:36 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: **DRAFT** Issue: PATHNAME-PRINT-READ (Version 1)To: X3J13@SAIL.Stanford.EDUMessage-ID: <890323153624.3.KMP@BOBOLINK.SCRC.Symbolics.COM>	>>> PLEASE DO -NOT- REPLY TO THIS ISSUE <<<Ponder it and come prepared to discuss it at the meeting.See summary of Cleanup discussion at end. -kmp-----Issue:        PATHNAME-PRINT-READReferences:   File System Interface (pp409-427)Category:     CHANGE/ADDITIONEdit history: 21-Oct-88, Version 1 by PitmanStatus:	      For Internal DiscussionProblem Description:  Although pathnames are required to print re-readably, there is no  standardized representation for pathnames and so no standardized  way in which they should print.  Further, it is common in programs to want pathnames to print in  their file-system specific format.Proposal (PATHNAME-PRINT-READ:SHARPSIGN-P):  Define the reader syntax #P"..." to be equivalent to   #.(PARSE-NAMESTRING "...").  Define that when *PRINT-ESCAPE* is T, the syntax #P"..." is  how a pathname should be printed by WRITE (and hence by PRIN1,  PRINT, etc.). The "..." is the namestring representation of the  pathname.  Define that when *PRINT-ESCAPE* is NIL, WRITE writes a pathname  object P by writing (NAMESTRING p) instead.Test Case:  (PARSE-NAMESTRING "foo.lisp")  => #P"foo.lisp"  (FORMAT NIL "Written to ~A." #P"foo.bin")  => "Written to foo.bin."  (TYPEP #P"foo.bin" 'PATHNAME)  => TRationale:  This satisfies the stated goals.  [For :ESCAPE T] It will not be possible to make the printed  pathname printed representation totally portable because of  variations in file systems, but for different Common Lisp  implementations on the same file system, or for Common Lisp  systems running on file systems having compatible syntax,  portability would be improved by this specification.  Also, some implementations (eg, Symbolics Genera) use  specialized representations for pathnames on different file  systems. Eg, an MSDOS pathname is of type MSDOS-PATHNAME,  not just type PATHNAME. #S(PATHNAME ...) is not only more  verbose than necessary but might be misleading to some users  because the object created will not have a TYPE-OF PATHNAME.  [For :ESCAPE NIL] Printing the namestring of a pathname is  a common operation and it is convenient to have a shorthand  for doing it. Further, some implementations may be able to  optimize the presentation of a pathname in this mode by  printing it without actually consing the string.Current Practice:  Symbolics Genera implements the proposed behavior.Cost to Implementors:  Fairly minor changes to the readtable and the printer.Cost to Users:  Users who now use the non-portable syntax #S(...) in order  to enter literal pathnames might have to change. [However,  implementations would be free to continue to support this  read syntax for compatibility.]Cost of Non-Adoption:  Portability of code and data involving pathnames within a  given file system (or between suitably similar file systems)  would be hampered needlessly.Benefits:  The cost of non-adoption would be avoided.Aesthetics:  The #P syntax is pretty and hides unimportant details.Discussion:  Pitman supports this change.-----Summary of discussion on CL-Cleanup: EB noted that Lucid CL implements the proposed behavior and that there  is cost to users who define their own #P read macro. He weakly supports  the proposal but wishes someone had pursued a `generic pathnames' proposal. Pierson noted that KCL uses #"...", but that this collides with proposed  syntax for Dick Waters' pretty printer. He also thinks #P is better  because it is already more widely used for that purpose. Masinter noted that Envos Medley prints pathnames with the syntax  #.(pathname "asdf"), which he thinks is not as pretty as #P"asdf"  but currently more portable. KMP and JonL raised the issues that #. has the disadvantage that it must  be parsed by the full Lisp engine, while #P can be parsed by something  simpler.  Permitting #. leaves a gaping hole for trojan horses, and  also requires the presence of the evaluator in a delivery system. MLY, GSB, Peirson, and IIM argued for not using up an extra dispatch character. MLY suggested #S(PATHNAME namestring [optional-host]). IIM noted they use #.(PATHNAME namestring host) because different file  systems have different parsing conventions. *start*01241 00024 US Date:  4 Apr 89 12:37 PDTSender: CL-Cleanup-mailer%SAIL.Stanford:EDU:XeroxFrom: KMP%STONY-BROOK.SCRC.Symbolics:COM:XeroxSubject: Issue: PATHNAME-PRINT-READTo: CL-Cleanup%SAIL.Stanford:EDU:XeroxGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-PRINT-READTo: CL-Cleanup@SAIL.Stanford.EDUReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 04 APR 89 12:29:53 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 4 Apr 89  12:27:19 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 571237; Tue 4-Apr-89 15:27:19 EDTOriginal-Date: Tue, 4 Apr 89 15:26 EDTMessage-ID: <890404152654.2.KMP@BOBOLINK.SCRC.Symbolics.COM>GVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVThis was deferred from Tuesday to Thursday but then didn't comearound for discussion due to lack of time.I guess I think it's possible that this could still come up atthe next meeting since it can at least be argued to be a clarification.Others might disagree though.