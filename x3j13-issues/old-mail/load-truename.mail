*start*02628 00024 USfReturn-Path: <KMP@STONY-BROOK.SCRC.Symbolics.COM>Received: from STONY-BROOK.SCRC.Symbolics.COM ([128.81.41.144]) by Xerox.COM ; 13 DEC 88 17:50:05 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 508168; Tue 13-Dec-88 20:49:45 ESTDate: Tue, 13 Dec 88 20:49 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Possible issue: LOAD-TRUENAMETo: Dave.Touretzky@cs.cmu.educc: KMP@STONY-BROOK.SCRC.Symbolics.COM, Masinter.PAIn-Reply-To: <2131.598064664@DST.BOLTZ.CS.CMU.EDU>Message-ID: <881213204930.2.KMP@BOBOLINK.SCRC.Symbolics.COM>I agree that the issue is one that comes up a lot. I think Genera offers a variable that lets you know what file is beingloaded.  It might hold the name of the source file in a binary file load,I forget.For CL, maybe a variable (or function) to give the truename of the filebeing LOADed or a list of the truenames of all files being loaded (mostrecent first). A variation on this facility for use in COMPILE-FILE wouldbe useful as well.Would that level of functionality suffice?[I'm leary about your suggestion of LOAD binding variables that people already assume LOAD doesn't bind. As to adding weird special-purpose keywords to LOAD, knowing the name of the file being loaded may be useful to other things besides LOAD, so I'd rather provide a more  general facility for getting at this information that would suffice for other uses.]Masinter may tell me it's too late to consider this kind of change,but especially since there's a recognition that REQUIRE and PROVIDE arebankrupt, and since CLtL's pathname stuff doesn't address all the fileproblems which commonly come up in portable programs, maybe I can sneakthis in under the umbrella of a number of other file- (ok, pathname-) related proposals we're about to hit X3J13 with if we come up with somethingsufficiently concrete and non-controversial in a hurry.Some straw men: - Variables *LOAD-TRUENAME* and *COMPILE-FILE-TRUENAME* which hold the   truename of the innermost file being loaded or compiled, respectively,   during the dynamic invocation of LOAD and COMPILE-FILE. - Variables *LOAD-TRUENAMES* and *COMPILE-FILE-TRUENAMES* which hold lists   of the truenames of all files being loaded or compiled, respectively,   during the dynamic invocation of LOAD and COMPILE-FILE. - Variable *LOAD-OR-COMPILE-FILE-TRUENAMES* which holds a list like   ((LOAD truename) (COMPILE-FILE truename) ...)   during the dynamic invocation of LOAD and COMPILE-FILE.Better names solicited, of course.*start*02249 00024 USfSender: Common-Lisp-mailer%SAIL.Stanford:EDU:XeroxDate: 14 Dec 88 08:45From: MURRAY%cs.umass:EDU:XeroxSubject: RE: load defaultsTo: common-lisp%sail.stanford:EDU:XeroxReturn-Path: <Common-Lisp-mailer@SAIL.Stanford.EDU>Redistributed: Xerox-Common-Lisp^.xReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 14 DEC 88 08:45:49 PSTReceived: from crash.cs.umass.edu ([128.119.40.235]) by SAIL.Stanford.EDU with TCP; 14 Dec 88  08:13:15 PSTReceived: from vax2.cs.umass.edu by crash.cs.umass.edu (5.59/Ultrix2.0-B)	id AA02232; Wed, 14 Dec 88 11:14:26 estMessage-Id: <8812141614.AA02232@crash.cs.umass.edu>Original-Date: Wed, 14 Dec 88 11:11 ESTX-Vms-To: IN%"common-lisp@sail.stanford.EDU"> From: Dave.Touretzky@B.GP.CS.CMU.EDU>I have a problem with the way Common Lisp says pathname defaults should be> handled during load...My initial reaction is that you should be using some sort of defsystem,which gives you much more control over sets of files.But maybe you're trying to run bare-bones.  >1. Anybody know a *portable* trick I can use to get embedded calls to LOAD>to use the parent file's pathname as a default?There is no portable way to find out what pathname is currently beingloaded.  The portable way to get your desired behavior is simply to define your ownload function that will bind *DEFAULT-PATHNAME-DEFAULTS* to the file itis loading before it calls the real load.   (defun default-load (input &rest args)     (let ((*default-pathname-defaults* (merge-pathnames input)))       (apply 'load *default-pathname-defaults* args)))>2. How terrible would it be for LOAD to rebind *DEFAULT-PATHNAME-DEFAULTS* ?Probably not too terrible, but it does create another instance ofa problem that some people have complained about.  By having LOAD binda special variable, it make it impossible to have the contents of afile side-effect that variable after the load.  This is a current problemwith *package*.>3. Alternatively, what would people think of adding a :PARENT-PATH keyword>to LOAD.  With a value of T this keyword would mean "if this is an embedded>load, get default pathname information from the pathname of the parent>file" ?Surely you jest!Kelly Murray*start*01512 00024 USfSender: Common-Lisp-mailer%SAIL.Stanford:EDU:XeroxDate: 14 Dec 88 10:21From: cperdue%Sun:COM:XeroxSubject: RE: load defaultsTo: Dave.Touretzky%B.GP.CS.CMU:EDU:Xerox, MURRAY%cs.umass:EDU:Xerox, common-lisp%sail.stanford:EDU:XeroxGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVFrom: cperdue@Sun.COM (Cris Perdue)To: Dave.Touretzky@B.GP.CS.CMU.EDU, MURRAY@cs.umass.EDU, common-lisp@sail.stanford.EDUSubject: RE: load defaultsReturn-Path: <Common-Lisp-mailer@SAIL.Stanford.EDU>Redistributed: Xerox-Common-Lisp^.xReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 14 DEC 88 10:21:42 PSTReceived: from Sun.COM by SAIL.Stanford.EDU with TCP; 14 Dec 88  09:59:23 PSTReceived: from snail.Sun.COM by Sun.COM (4.1/SMI-4.0)	id AA28669; Wed, 14 Dec 88 09:59:57 PSTReceived: from clam.sun.com by snail.Sun.COM (4.1/SMI-4.0)	id AA27264; Wed, 14 Dec 88 09:56:35 PSTReceived: by clam.sun.com (3.2/SMI-3.2)	id AA14360; Wed, 14 Dec 88 09:57:31 PSTOriginal-Date: Wed, 14 Dec 88 09:57:31 PSTMessage-Id: <8812141757.AA14360@clam.sun.com>GVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVSome implementations of Common Lisp include a special variablewith a name like *source-pathname*, which is bound appropriatelyby LOAD.  This supports what is commonly known as "source coderecording" and if added to Common Lisp would meet needs suchas Touretzky's.  We have found need for this at Sun and wouldbe happy to see such a thing in the language at some time.				-Cris*start*01872 00024 USfSender: Common-Lisp-mailer%SAIL.Stanford:EDU:XeroxDate: 14 Dec 88 16:49Reply-to: Dave.Touretzky%cs.cmu:EDU:XeroxSubject: Re: load defaultsIn-Reply-to: Your message of Wed, 14 Dec 88 11:11:00 -0500.	     <8812141614.AA02232@crash.cs.umass.edu>From: Dave.Touretzky%B.GP.CS.CMU:EDU:XeroxTo: common-lisp%sail.stanford:EDU:XeroxReturn-Path: <Common-Lisp-mailer@SAIL.Stanford.EDU>Redistributed: Xerox-Common-Lisp^.xReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 14 DEC 88 16:43:13 PSTReceived: from DST.BOLTZ.CS.CMU.EDU by SAIL.Stanford.EDU with TCP; 14 Dec 88  16:19:18 PSTReceived: from DST.BOLTZ.CS.CMU.EDU by DST.BOLTZ.CS.CMU.EDU; 14 Dec 88 19:17:08 ESTOriginal-Date: Wed, 14 Dec 88 19:16:51 ESTMessage-ID: <3154.598148211@DST.BOLTZ.CS.CMU.EDU>> Date: Wed, 14 Dec 88 11:11 EST > From: MURRAY@cs.umass.EDU>>  There is no portable way to find out what pathname is currently being>  loaded.  The portable way to get your desired behavior is simply to>  define your own load function that will bind *DEFAULT-PATHNAME-DEFAULTS*>  to the file it is loading before it calls the real load.>     (defun default-load (input &rest args)>       (let ((*default-pathname-defaults* (merge-pathnames input)))>         (apply 'load *default-pathname-defaults* args)))This is a nice idea, but it doesn't solve my problem.  The user would haveto type in the whole definition before he could use it to load the headerfile I referred to.  I want to avoid inconveniencing the user; he should beable to just start up a fresh Lisp, LOAD a single header file, and haveeverything else happen automatically.I like KMP's proposals.  I like the second one best: have separatevariables for files being loaded and files being compiled, and use them tomaintain a stack so we can see the nesting of loads within files.-- Dave*start*01702 00024 USfSender: Common-Lisp-mailer%SAIL.Stanford:EDU:XeroxDate: 16 Dec 88 01:41From: jonl%lucid:COM:XeroxIn-Reply-to: Dave.Touretzky@B.GP.CS.CMU.EDU's message of Tue, 13 Dec 88 20:04:24 EST <2131.598064664@DST.BOLTZ.CSSubject: file loading queryTo: Dave.Touretzky%cs.cmu:EDU:Xeroxcc: common-lisp%sail.stanford:EDU:XeroxGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVFrom: Jon L White <jonl@lucid.com>To: Dave.Touretzky@cs.cmu.eduCc: common-lisp@sail.stanford.eduIn-Reply-To: Dave.Touretzky@B.GP.CS.CMU.EDU's message of Tue, 13 Dec 88 20:04:24 EST <2131.598064664@DST.BOLTZ.CS.CMU.EDU>Subject: file loading queryReturn-Path: <Common-Lisp-mailer@SAIL.Stanford.EDU>Redistributed: Xerox-Common-Lisp^.xReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 16 DEC 88 01:41:40 PSTReceived: from lucid.com by SAIL.Stanford.EDU with TCP; 16 Dec 88  01:22:59 PSTReceived: from bhopal ([192.9.200.13]) by heavens-gate.lucid.com id AA00971g; Fri, 16 Dec 88 01:20:08 PSTReceived: by bhopal id AA20998g; Fri, 16 Dec 88 01:22:08 PSTOriginal-Date: Fri, 16 Dec 88 01:22:08 PSTMessage-Id: <8812160922.AA20998@bhopal>GVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVre: 1. Anybody know a *portable* trick I can use to get embedded calls to LOAD    to use the parent file's pathname as a default?I doubt that there's a portable trick.  Lucid Common Lisp supports anextension as follows:    (defvar *load-pathname* nil      "During a load, this is bound to the pathname of the file being loaded.")and ocasionally it is used to find out what directory the currentlyloading file is on, so that a related file can be loaded from the samedirectory.-- JonL --*start*10558 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 09 JAN 89 11:03:59 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 9 Jan 89  10:59:38 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 09 JAN 89 10:54:31 PSTDate: 9 Jan 89 10:43 PSTFrom: masinter.paSubject: Issues: REQUIRE-PATHNAME-DEFAULTS and LOAD-TRUENAMETo: cl-cleanup@sail.stanford.eduMessage-ID: <890109-105431-4260@Xerox>I had this stuff filed under the name LOAD-TRUENAME. But do they reallywant to modify the default pathname for LOAD, or is it really REQUIRE? IfREQUIRE did have a default pathname, should it be the same as LOADs? Somehow I don't think we will get away from the issue of "default loadingbehavior" merely by outlawing REQUIRE.     ----- Begin Forwarded Messages -----Date: Tue, 13 Dec 88 20:49 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Possible issue: LOAD-TRUENAMETo: Dave.Touretzky@cs.cmu.educc: KMP@STONY-BROOK.SCRC.Symbolics.COM, Masinter.PAIn-Reply-To: <2131.598064664@DST.BOLTZ.CS.CMU.EDU>I agree that the issue is one that comes up a lot. I think Genera offers a variable that lets you know what file is beingloaded.  It might hold the name of the source file in a binary file load,I forget.For CL, maybe a variable (or function) to give the truename of the filebeing LOADed or a list of the truenames of all files being loaded (mostrecent first). A variation on this facility for use in COMPILE-FILE wouldbe useful as well.Would that level of functionality suffice?[I'm leary about your suggestion of LOAD binding variables that people already assume LOAD doesn't bind. As to adding weird special-purpose keywords to LOAD, knowing the name of the file being loaded may be useful to other things besides LOAD, so I'd rather provide a more  general facility for getting at this information that would suffice for other uses.]Masinter may tell me it's too late to consider this kind of change,but especially since there's a recognition that REQUIRE and PROVIDE arebankrupt, and since CLtL's pathname stuff doesn't address all the fileproblems which commonly come up in portable programs, maybe I can sneakthis in under the umbrella of a number of other file- (ok, pathname-) related proposals we're about to hit X3J13 with if we come up withsomethingsufficiently concrete and non-controversial in a hurry.Some straw men: - Variables *LOAD-TRUENAME* and *COMPILE-FILE-TRUENAME* which hold the   truename of the innermost file being loaded or compiled, respectively,   during the dynamic invocation of LOAD and COMPILE-FILE. - Variables *LOAD-TRUENAMES* and *COMPILE-FILE-TRUENAMES* which hold lists   of the truenames of all files being loaded or compiled, respectively,   during the dynamic invocation of LOAD and COMPILE-FILE. - Variable *LOAD-OR-COMPILE-FILE-TRUENAMES* which holds a list like   ((LOAD truename) (COMPILE-FILE truename) ...)   during the dynamic invocation of LOAD and COMPILE-FILE.Better names solicited, of course.     ----- Next Message -----Sender: Common-Lisp-mailer%SAIL.Stanford:EDU:XeroxDate: 14 Dec 88 08:45From: MURRAY%cs.umass:EDU:XeroxSubject: RE: load defaultsTo: common-lisp%sail.stanford:EDU:XeroxReturn-Path: <Common-Lisp-mailer@SAIL.Stanford.EDU>Redistributed: Xerox-Common-Lisp^.xReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 14 DEC 8808:45:49 PSTReceived: from crash.cs.umass.edu ([128.119.40.235]) by SAIL.Stanford.EDUwith TCP; 14 Dec 88  08:13:15 PSTReceived: from vax2.cs.umass.edu by crash.cs.umass.edu (5.59/Ultrix2.0-B)id AA02232; Wed, 14 Dec 88 11:14:26 estMessage-Id: <8812141614.AA02232@crash.cs.umass.edu>Original-Date: Wed, 14 Dec 88 11:11 ESTX-Vms-To: IN%"common-lisp@sail.stanford.EDU"> From: Dave.Touretzky@B.GP.CS.CMU.EDU>I have a problem with the way Common Lisp says pathname defaults should be> handled during load...My initial reaction is that you should be using some sort of defsystem,which gives you much more control over sets of files.But maybe you're trying to run bare-bones.  >1. Anybody know a *portable* trick I can use to get embedded calls to LOAD>to use the parent file's pathname as a default?There is no portable way to find out what pathname is currently beingloaded.  The portable way to get your desired behavior is simply to defineyour ownload function that will bind *DEFAULT-PATHNAME-DEFAULTS* to the file itis loading before it calls the real load.   (defun default-load (input &rest args)     (let ((*default-pathname-defaults* (merge-pathnames input)))       (apply 'load *default-pathname-defaults* args)))>2. How terrible would it be for LOAD to rebind *DEFAULT-PATHNAME-DEFAULTS*?Probably not too terrible, but it does create another instance ofa problem that some people have complained about.  By having LOAD binda special variable, it make it impossible to have the contents of afile side-effect that variable after the load.  This is a current problemwith *package*.>3. Alternatively, what would people think of adding a :PARENT-PATH keyword>to LOAD.  With a value of T this keyword would mean "if this is anembedded>load, get default pathname information from the pathname of the parent>file" ?Surely you jest!Kelly Murray     ----- Next Message -----Sender: Common-Lisp-mailer%SAIL.Stanford:EDU:XeroxDate: 14 Dec 88 10:21From: cperdue%Sun:COM:XeroxSubject: RE: load defaultsTo: Dave.Touretzky%B.GP.CS.CMU:EDU:Xerox, MURRAY%cs.umass:EDU:Xerox,common-lisp%sail.stanford:EDU:XeroxGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVFrom: cperdue@Sun.COM (Cris Perdue)To: Dave.Touretzky@B.GP.CS.CMU.EDU, MURRAY@cs.umass.EDU,common-lisp@sail.stanford.EDUSubject: RE: load defaultsReturn-Path: <Common-Lisp-mailer@SAIL.Stanford.EDU>Redistributed: Xerox-Common-Lisp^.xReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 14 DEC 8810:21:42 PSTReceived: from Sun.COM by SAIL.Stanford.EDU with TCP; 14 Dec 88  09:59:23PSTReceived: from snail.Sun.COM by Sun.COM (4.1/SMI-4.0)	id AA28669; Wed, 14Dec 88 09:59:57 PSTReceived: from clam.sun.com by snail.Sun.COM (4.1/SMI-4.0)	id AA27264; Wed,14 Dec 88 09:56:35 PSTReceived: by clam.sun.com (3.2/SMI-3.2)	id AA14360; Wed, 14 Dec 88 09:57:31PSTOriginal-Date: Wed, 14 Dec 88 09:57:31 PSTMessage-Id: <8812141757.AA14360@clam.sun.com>GVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVSome implementations of Common Lisp include a special variablewith a name like *source-pathname*, which is bound appropriatelyby LOAD.  This supports what is commonly known as "source coderecording" and if added to Common Lisp would meet needs suchas Touretzky's.  We have found need for this at Sun and wouldbe happy to see such a thing in the language at some time.				-Cris     ----- Next Message -----Sender: Common-Lisp-mailer%SAIL.Stanford:EDU:XeroxDate: 14 Dec 88 16:49Reply-to: Dave.Touretzky%cs.cmu:EDU:XeroxSubject: Re: load defaultsIn-Reply-to: Your message of Wed, 14 Dec 88 11:11:00 -0500.<8812141614.AA02232@crash.cs.umass.edu>From: Dave.Touretzky%B.GP.CS.CMU:EDU:XeroxTo: common-lisp%sail.stanford:EDU:XeroxReturn-Path: <Common-Lisp-mailer@SAIL.Stanford.EDU>Redistributed: Xerox-Common-Lisp^.xReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 14 DEC 8816:43:13 PSTReceived: from DST.BOLTZ.CS.CMU.EDU by SAIL.Stanford.EDU with TCP; 14 Dec88  16:19:18 PSTReceived: from DST.BOLTZ.CS.CMU.EDU by DST.BOLTZ.CS.CMU.EDU; 14 Dec 8819:17:08 ESTOriginal-Date: Wed, 14 Dec 88 19:16:51 ESTMessage-ID: <3154.598148211@DST.BOLTZ.CS.CMU.EDU>> Date: Wed, 14 Dec 88 11:11 EST > From: MURRAY@cs.umass.EDU>>  There is no portable way to find out what pathname is currently being>  loaded.  The portable way to get your desired behavior is simply to>  define your own load function that will bind *DEFAULT-PATHNAME-DEFAULTS*>  to the file it is loading before it calls the real load.>     (defun default-load (input &rest args)>       (let ((*default-pathname-defaults* (merge-pathnames input)))>         (apply 'load *default-pathname-defaults* args)))This is a nice idea, but it doesn't solve my problem.  The user would haveto type in the whole definition before he could use it to load the headerfile I referred to.  I want to avoid inconveniencing the user; he should beable to just start up a fresh Lisp, LOAD a single header file, and haveeverything else happen automatically.I like KMP's proposals.  I like the second one best: have separatevariables for files being loaded and files being compiled, and use them tomaintain a stack so we can see the nesting of loads within files.-- Dave     ----- Next Message -----Sender: Common-Lisp-mailer%SAIL.Stanford:EDU:XeroxDate: 16 Dec 88 01:41From: jonl%lucid:COM:XeroxIn-Reply-to: Dave.Touretzky@B.GP.CS.CMU.EDU's message of Tue, 13 Dec 8820:04:24 EST <2131.598064664@DST.BOLTZ.CSSubject: file loading queryTo: Dave.Touretzky%cs.cmu:EDU:Xeroxcc: common-lisp%sail.stanford:EDU:XeroxGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVFrom: Jon L White <jonl@lucid.com>To: Dave.Touretzky@cs.cmu.eduCc: common-lisp@sail.stanford.eduIn-Reply-To: Dave.Touretzky@B.GP.CS.CMU.EDU's message of Tue, 13 Dec 8820:04:24 EST <2131.598064664@DST.BOLTZ.CS.CMU.EDU>Subject: file loading queryReturn-Path: <Common-Lisp-mailer@SAIL.Stanford.EDU>Redistributed: Xerox-Common-Lisp^.xReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 16 DEC 8801:41:40 PSTReceived: from lucid.com by SAIL.Stanford.EDU with TCP; 16 Dec 88  01:22:59PSTReceived: from bhopal ([192.9.200.13]) by heavens-gate.lucid.com idAA00971g; Fri, 16 Dec 88 01:20:08 PSTReceived: by bhopal id AA20998g; Fri, 16 Dec 88 01:22:08 PSTOriginal-Date: Fri, 16 Dec 88 01:22:08 PSTMessage-Id: <8812160922.AA20998@bhopal>GVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVre: 1. Anybody know a *portable* trick I can use to get embedded calls toLOAD    to use the parent file's pathname as a default?I doubt that there's a portable trick.  Lucid Common Lisp supports anextension as follows:    (defvar *load-pathname* nil      "During a load, this is bound to the pathname of the file beingloaded.")and ocasionally it is used to find out what directory the currentlyloading file is on, so that a related file can be loaded from the samedirectory.-- JonL --     ----- End Forwarded Messages -----*start*04975 00024 USfReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 13 MAR 89 14:47:59 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 13 Mar 89  14:48:09 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 556116; Mon 13-Mar-89 17:45:37 ESTDate: Mon, 13 Mar 89 17:45 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: LOAD-TRUENAME (Version 1)To: CL-Cleanup@SAIL.Stanford.EDUMessage-ID: <890313174517.3.KMP@BOBOLINK.SCRC.Symbolics.COM>This one was kind of on the table (due to Touretzky), but never gotwritten up formally. I think it's important, so I'll risk getting yelledat by sending it out `new' at the last minute...-----Issue:        LOAD-TRUENAMEForum:	      CleanupReferences:   LOAD (p426), PROVIDE (p188), REQUIRE (p188),	      Issue REQUIRE-PATHNAME-DEFAULTSCategory:     ADDITIONEdit history: 13-Mar-89, Version 1 by PitmanStatus:	      For Internal DiscussionProblem Description: It is difficult to construct sets of software modules which work together as a unit and which port between different implementations. REQUIRE and PROVIDE were intended to provide this level of support but have `failed' to be portable in practice. Typical user configurations involve a `system definition' file which loads the modules of a `system' (collection of software modules). Among the specific problems which arise are:  - File system types may vary. Different file syntax must be used for    each site.  - Even with the same Lisp implementation and host file system type,    the directory in which a software system resides may differ from    delivery site to delivery site.  - Multiple `copies' of the same system may reside in different    directories on the same machine.Proposal (LOAD-TRUENAME:NEW-PATHNAME-VARIABLES): Introduce new variables:   *LOAD-TRUENAME*					[Variable]   This special variable is initially NIL, but is bound by LOAD to   hold the truename of the pathname of the file being loaded.   *COMPILE-FILE-TRUENAME*				[Variable]   This special variable is initially NIL, but is bound by    COMPILE-FILE to hold the truename of the pathname of the file   being compiled.   Example: ------ File SETUP ------ (IN-PACKAGE 'MY-STUFF) (DEFMACRO COMPILE-TRUENAME () `',*COMPILE-FILE-TRUENAME*) (DEFVAR *SOURCE-FILE* (COMPILE-TRUENAME) "Just for debugging.") (DEFVAR *LOADED-FILE* *LOAD-TRUENAME*) (DEFUN LOAD-MY-SYSTEM ()   (DOLIST (MODULE-NAME '("FOO" "BAR" "BAZ"))     (LOAD (MERGE-PATHNAMES MODULE-NAME *LOAD-TRUENAME*)))) ------------------------ (LOAD "SETUP") (LOAD-MY-SYSTEM)Rationale: This satisfies the most common instances of the frequently reported problem in the Problem Description.Current Practice: Wide variation. In some implementations, calling LOAD binds or sets  *DEFAULT-PATHNAME-DEFAULTS* so that pathnames named in a file being LOADed will default to being `nearby.' Some implementations provide special variables that are similar or identical to one or both of those proposed. Some implementations have a way to represent the pathname for the current working directory, and make the default pathname default to that, so that loading without specifying a default again tends to get `nearby' files. None of these techniques is portable, unfortunately, because there is no agreement.Cost to Implementors: Very small.Cost to Users: None. This change is upward compatible.Cost of Non-Adoption: Continued difficulty for anyone trying to put a system of modules in a form where they can be conveniently delivered using portable code.Benefits: The cost of non-adoption is avoided.Aesthetics: Negligible.Discussion: Touretzky raised the issue most recently on Common-Lisp. A number of people immediately jumped on the bandwagon, indicating it was important to them, too. Pitman made three suggestions in response, of which the above is the first. The others included:  2. Variables *LOAD-TRUENAMES* and *COMPILE-FILE-TRUENAMES* which hold     lists of the truenames of all files being loaded or compiled,     respectively, during the dynamic invocation of LOAD and COMPILE-FILE.   3. Variable *LOAD-OR-COMPILE-FILE-TRUENAMES* which holds a list like    ((LOAD truename) (COMPILE-FILE truename) ...)    during the dynamic invocation of LOAD and COMPILE-FILE.  Touretzky responded: ``I like KMP's proposals.  I like the second one best: have separate   variables for files being loaded and files being compiled, and use   them to maintain a stack so we can see the nesting of loads within   files.'' Pitman ultimately chose to present the first rather than the second because it seemed simpler, easier to explain, and more likely to pass at this late date.*start*01149 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 14-Mar-89 13:48:20 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 14 MAR 89 13:43:45 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 14 Mar 89  13:43:51 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 14 MAR 89 13:19:26 PSTDate: Tue, 14 Mar 89 13:19 PSTFrom: Gregor.paSubject: Re: Issue: LOAD-TRUENAME (Version 1)To: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: CL-Cleanup@SAIL.Stanford.EDUFcc: BD:>Gregor>mail>outgoing-mail-5.text.newestIn-Reply-To: <890313174517.3.KMP@BOBOLINK.SCRC.Symbolics.COM>Message-ID: <19890314211919.6.GREGOR@SPIFF.parc.xerox.com>Line-fold: noI favor this.  I would even favor either of the other two ideas even atthis `late date'.  The behavior of each of the proposals is simple, itseasy to see what it will and won't do, and it satisfies a real demand.I should note that I have never wanted the incremented functionallyoffered by the `stack' proposals, but I could still vote for them.-------*start*01369 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 14-Mar-89 13:49:11 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 14 MAR 89 13:44:31 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 14 Mar 89  13:44:43 PSTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via INTERNET with SMTP id 556807; 14 Mar 89 16:42:03 ESTDate: Tue, 14 Mar 89 16:42 ESTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: LOAD-TRUENAME (Version 1)To: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <890313174517.3.KMP@BOBOLINK.SCRC.Symbolics.COM>Message-ID: <19890314214204.5.MOON@EUPHRATES.SCRC.Symbolics.COM>I favor LOAD-TRUENAME:NEW-PATHNAME-VARIABLES.  I think thisproposal would be greatly improved by adding two more variables,*LOAD-PATHNAME* and *COMPILE-FILE-PATHNAME*, whose values arethe pathname opened by LOAD or COMPILE-FILE, rather than thetruename.  The need for these is more obvious if you thinkabout systems where the pathname cannot be easily reconstructedfrom the truename.  This includes file systems with symboliclinks and some pathname systems with logical pathnames.*start*05457 00024 US GV-Info: X3J13-mailer@SAIL.Stanford.EDU at 16-Mar-89 07:33:35 from AGReturn-Path: <X3J13-mailer@SAIL.Stanford.EDU>Received: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 16 MAR 89 07:33:28 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 16 Mar 89  07:20:34 PSTReceived: from Cabernet.ms by ArpaGateway.ms ; 16 MAR 89 07:13:53 PSTDate: 16 Mar 89 07:13 PSTFrom: masinter.paSubject: Issue: LOAD-TRUENAME (Version 1)To: x3J13@SAIL.Stanford.EDUMessage-ID: <890316-071353-3747@Xerox>!Issue:        LOAD-TRUENAMEForum:	      CleanupReferences:   LOAD (p426), PROVIDE (p188), REQUIRE (p188),	      Issue REQUIRE-PATHNAME-DEFAULTSCategory:     ADDITIONEdit history: 13-Mar-89, Version 1 by PitmanProblem Description: It is difficult to construct sets of software modules which work together as a unit and which port between different implementations. REQUIRE and PROVIDE were intended to provide this level of support but have `failed' to be portable in practice. Typical user configurations involve a `system definition' file which loads the modules of a `system' (collection of software modules). Among the specific problems which arise are:  - File system types may vary. Different file syntax must be used for    each site.  - Even with the same Lisp implementation and host file system type,    the directory in which a software system resides may differ from    delivery site to delivery site.  - Multiple `copies' of the same system may reside in different    directories on the same machine.Proposal (LOAD-TRUENAME:NEW-PATHNAME-VARIABLES): Introduce new variables:   *LOAD-TRUENAME*					[Variable]   This special variable is initially NIL, but is bound by LOAD to   hold the truename of the pathname of the file being loaded.   *COMPILE-FILE-TRUENAME*				[Variable]   This special variable is initially NIL, but is bound by    COMPILE-FILE to hold the truename of the pathname of the file   being compiled.   Example: ------ File SETUP ------ (IN-PACKAGE 'MY-STUFF) (DEFMACRO COMPILE-TRUENAME () `',*COMPILE-FILE-TRUENAME*) (DEFVAR *SOURCE-FILE* (COMPILE-TRUENAME) "Just for debugging.") (DEFVAR *LOADED-FILE* *LOAD-TRUENAME*) (DEFUN LOAD-MY-SYSTEM ()   (DOLIST (MODULE-NAME '("FOO" "BAR" "BAZ"))     (LOAD (MERGE-PATHNAMES MODULE-NAME *LOAD-TRUENAME*)))) ------------------------ (LOAD "SETUP") (LOAD-MY-SYSTEM)Rationale: This satisfies the most common instances of the frequently reported problem in the Problem Description.Current Practice: Wide variation. In some implementations, calling LOAD binds or sets  *DEFAULT-PATHNAME-DEFAULTS* so that pathnames named in a file being LOADed will default to being `nearby.' Some implementations provide special variables that are similar or identical to one or both of those proposed. Some implementations have a way to represent the pathname for the current working directory, and make the default pathname default to that, so that loading without specifying a default again tends to get `nearby' files. None of these techniques is portable, unfortunately, because there is no agreement.Cost to Implementors: Very small.Cost to Users: None. This change is upward compatible.Cost of Non-Adoption: Continued difficulty for anyone trying to put a system of modules in a form where they can be conveniently delivered using portable code.Benefits: The cost of non-adoption is avoided.Aesthetics: Negligible.Discussion: Touretzky raised the issue most recently on Common-Lisp. A number of people immediately jumped on the bandwagon, indicating it was important to them, too. Pitman made three suggestions in response, of which the above is the first. The others included:  2. Variables *LOAD-TRUENAMES* and *COMPILE-FILE-TRUENAMES* which hold     lists of the truenames of all files being loaded or compiled,     respectively, during the dynamic invocation of LOAD and COMPILE-FILE.   3. Variable *LOAD-OR-COMPILE-FILE-TRUENAMES* which holds a list like    ((LOAD truename) (COMPILE-FILE truename) ...)    during the dynamic invocation of LOAD and COMPILE-FILE.  Touretzky responded: ``I like KMP's proposals.  I like the second one best: have separate   variables for files being loaded and files being compiled, and use   them to maintain a stack so we can see the nesting of loads within   files.'' Pitman ultimately chose to present the first rather than the second because it seemed simpler, easier to explain, and more likely to pass at this late date.!Additional Comments:"I favor LOAD-TRUENAME:NEW-PATHNAME-VARIABLES.  I think thisproposal would be greatly improved by adding two more variables,*LOAD-PATHNAME* and *COMPILE-FILE-PATHNAME*, whose values arethe pathname opened by LOAD or COMPILE-FILE, rather than thetruename.  The need for these is more obvious if you thinkabout systems where the pathname cannot be easily reconstructedfrom the truename.  This includes file systems with symboliclinks and some pathname systems with logical pathnames.""I favor this.  I would even favor either of the other two ideas even atthis `late date'.  The behavior of each of the proposals is simple, itseasy to see what it will and won't do, and it satisfies a real demand.I should note that I have never wanted the incremented functionallyoffered by the `stack' proposals, but I could still vote for them."*start*02579 00024 US Date:  4 Apr 89 12:26 PDTSender: CL-Cleanup-mailer%SAIL.Stanford:EDU:XeroxFrom: KMP%STONY-BROOK.SCRC.Symbolics:COM:XeroxSubject: Issue: LOAD-TRUENAMETo: CL-Cleanup%SAIL.Stanford:EDU:Xeroxcc: Loeffler%MCC:COM:XeroxGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: LOAD-TRUENAMETo: CL-Cleanup@SAIL.Stanford.EDUcc: Loeffler@MCC.ComReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 04 APR 89 12:19:53 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 4 Apr 89  12:17:37 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 571207; Tue 4-Apr-89 15:17:27 EDTOriginal-Date: Tue, 4 Apr 89 15:17 EDTMessage-ID: <890404151703.2.KMP@BOBOLINK.SCRC.Symbolics.COM>GVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVMy notes say that Moon wanted some other variables. I wrote this up asan amendment, but neither the amendment nor the proposal was ever voted on.Moon mailed out a version 2 but then withdrew it in favor of my amendment.The text of my amendment was: Proposed amendment to LOAD-TRUENAME			KMP 3/30/89  Also introduce new variables:   *LOAD-PATHNAME*   This special variable is initially NIL but is bound by LOAD  to hold a pathname which represents the filename given as the  first argument to LOAD.  That is, (PATHNAME arg1).   *COMPILE-FILE-PATHNAME*   This special variable is initially NIL but is bound by COMPILE-FILE  to hold a pathname which represents the filename given as the  first argument to COMPILE-FILE.  That is, (PATHNAME arg1).   Rationale:   The truename may be useful to tell the real file being loaded,   but sometimes information about the link names or logical devices   traversed is important, too.   Note that these new variables alone are not adequate since   TRUENAME on these pathnames might not yield the value of the   -TRUENAME* variables if the file has been deleted or protected   since the open occurred (in some implementations).The problem is whether the values of the -pathname variables is theoriginal argument or the merged, defaulted value. Moon thinks itshould be the latter. I think there are arguments for eitherone, but also think that this sub-issue is "in the noise" and should not hold up progress. Loeffler volunteered to work on this.By a 14-1 vote, we deferred this to the next meeting.*start*06512 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 10-Apr-89 13:09:46 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 10 APR 89 13:08:35 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 10 Apr 89  13:02:56 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 574569; Mon 10-Apr-89 16:02:52 EDTDate: Mon, 10 Apr 89 16:02 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: LOAD-TRUENAME (Version 3)To: CL-Cleanup@SAIL.Stanford.EDUMessage-ID: <890410160211.8.KMP@BOBOLINK.SCRC.Symbolics.COM>This is not just a report on what happened at the meeting.In this version, I did the following: - Merged my `proposed amendments.' - Ignored Moon's version 2 by his request. It was only very slightly   different than my `proposed amendments,' which he liked better. - Changed the description of the ...-PATHNAME* variables to say they   hold a pathname that has already been merged with the defaults by   LOAD and COMPILE-FILE.The Proposal and Rationale are the only sections which changed since v1. -kmp-----Issue:        LOAD-TRUENAMEForum:	      CleanupReferences:   LOAD (p426), PROVIDE (p188), REQUIRE (p188),	      Issue REQUIRE-PATHNAME-DEFAULTSCategory:     ADDITIONEdit history: 13-Mar-89, Version 1 by Pitman	      29-Mar-89, Version 2 by Moon (add -PATHNAME vars)	      10-Apr-89, Version 3 by Pitman (clarify v2)Problem Description: It is difficult to construct sets of software modules which work together as a unit and which port between different implementations. REQUIRE and PROVIDE were intended to provide this level of support but have `failed' to be portable in practice. Typical user configurations involve a `system definition' file which loads the modules of a `system' (collection of software modules). Among the specific problems which arise are:  - File system types may vary. Different file syntax must be used for    each site.  - Even with the same Lisp implementation and host file system type,    the directory in which a software system resides may differ from    delivery site to delivery site.  - Multiple `copies' of the same system may reside in different    directories on the same machine.Proposal (LOAD-TRUENAME:NEW-PATHNAME-VARIABLES): Introduce new variables:   *LOAD-TRUENAME*					[Variable]   This special variable is initially NIL, but is bound by LOAD to   hold the truename of the pathname of the file being loaded.   *COMPILE-FILE-TRUENAME*				[Variable]   This special variable is initially NIL, but is bound by    COMPILE-FILE to hold the truename of the pathname of the file   being compiled.      *LOAD-PATHNAME*					[Variable]     This special variable is initially NIL but is bound by LOAD   to hold a pathname which represents the filename given as the   first argument to LOAD merged against the defaults.   That is, (PATHNAME (MERGE-PATHNAMES arg1)).     *COMPILE-FILE-PATHNAME*				[Variable]     This special variable is initially NIL but is bound by COMPILE-FILE   to hold a pathname which represents the filename given as the   first argument to COMPILE-FILE merged against the defaults.   That is, (PATHNAME (MERGE-PATHNAMES arg1)).Example: ------ File SETUP ------ (IN-PACKAGE 'MY-STUFF) (DEFMACRO COMPILE-TRUENAME () `',*COMPILE-FILE-TRUENAME*) (DEFVAR *SOURCE-FILE* (COMPILE-TRUENAME) "Just for debugging.") (DEFVAR *LOADED-FILE* *LOAD-TRUENAME*) (DEFUN LOAD-MY-SYSTEM ()   (DOLIST (MODULE-NAME '("FOO" "BAR" "BAZ"))     (LOAD (MERGE-PATHNAMES MODULE-NAME *LOAD-TRUENAME*)))) ------------------------ (LOAD "SETUP") (LOAD-MY-SYSTEM)Rationale: This satisfies the most common instances of the frequently reported problem in the Problem Description. The ...-TRUENAME* variables are useful to tell the real file being loaded. The ...-PATHNAME* variables are useful to find information about the original link names or logical device names mentioned in the pathname to be opened but no longer reflected in the truename. Note that it is not adequate to just have the -PATHNAME* variables since TRUENAME on these pathnames might not yield the value of the -TRUENAME* variables if the file has been deleted or protected since the open occurred (in some implementations).Current Practice: Wide variation. In some implementations, calling LOAD binds or sets  *DEFAULT-PATHNAME-DEFAULTS* so that pathnames named in a file being LOADed will default to being `nearby.' Some implementations provide special variables that are similar or identical to one or both of those proposed. Some implementations have a way to represent the pathname for the current working directory, and make the default pathname default to that, so that loading without specifying a default again tends to get `nearby' files. None of these techniques is portable, unfortunately, because there is no agreement.Cost to Implementors: Very small.Cost to Users: None. This change is upward compatible.Cost of Non-Adoption: Continued difficulty for anyone trying to put a system of modules in a form where they can be conveniently delivered using portable code.Benefits: The cost of non-adoption is avoided.Aesthetics: Negligible.Discussion: Touretzky raised the issue most recently on Common-Lisp. A number of people immediately jumped on the bandwagon, indicating it was important to them, too. Pitman made three suggestions in response, of which the above is the first. The others included:  2. Variables *LOAD-TRUENAMES* and *COMPILE-FILE-TRUENAMES* which hold     lists of the truenames of all files being loaded or compiled,     respectively, during the dynamic invocation of LOAD and COMPILE-FILE.   3. Variable *LOAD-OR-COMPILE-FILE-TRUENAMES* which holds a list like    ((LOAD truename) (COMPILE-FILE truename) ...)    during the dynamic invocation of LOAD and COMPILE-FILE.  Touretzky responded: ``I like KMP's proposals.  I like the second one best: have separate   variables for files being loaded and files being compiled, and use   them to maintain a stack so we can see the nesting of loads within   files.'' Pitman ultimately chose to present the first rather than the second because it seemed simpler, easier to explain, and more likely to pass at this late date.*start*01621 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 10-Apr-89 14:11:01 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 10 APR 89 13:51:47 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 10 Apr 89  13:49:07 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 574621; Mon 10-Apr-89 16:48:51 EDTDate: Mon, 10 Apr 89 16:48 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: LOAD-TRUENAME (Version 3)To: CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <890410160211.8.KMP@BOBOLINK.SCRC.Symbolics.COM>Message-ID: <19890410204842.3.MOON@EUPHRATES.SCRC.Symbolics.COM>I approve this version.  I checked it against the amendmentI had proposed.In the example section,     (LOAD (MERGE-PATHNAMES MODULE-NAME *LOAD-TRUENAME*))))should be     (LOAD (MERGE-PATHNAMES MODULE-NAME *LOAD-PATHNAME*))))That's the whole reason for the amendment to add *LOAD-PATHNAME*!The discussion section ought to include someone's suggestion that allthese variables could be replaced by *LOAD-STREAM* and*COMPILE-FILE-STREAM*, combined with the existing PATHNAME and TRUENAMEfunctions.  It should also include someone else's suggestion that thosetwo variables could be replaced by *STANDARD-INPUT*.  I think there wassome argument against allowing access to the stream that convinced me tosupport this proposal instead, but that other suggestion ought to begiven fair representation.*start*07538 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 11-Apr-89 07:16:39 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 11 APR 89 07:16:35 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 11 Apr 89  07:14:20 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 575061; Tue 11-Apr-89 10:12:53 EDTDate: Tue, 11 Apr 89 10:12 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: LOAD-TRUENAME (Version 4)To: CL-Cleanup@SAIL.Stanford.EDUMessage-ID: <890411101208.3.KMP@BOBOLINK.SCRC.Symbolics.COM>New version to accomodate Moon's comments.I changed the Example a bit.I added a paragraph to the Discussion.Everything else is the same.I'm hoping this is a final version. -kmp-----Issue:        LOAD-TRUENAMEForum:	      CleanupReferences:   LOAD (p426), PROVIDE (p188), REQUIRE (p188),	      Issue REQUIRE-PATHNAME-DEFAULTSCategory:     ADDITIONEdit history: 13-Mar-89, Version 1 by Pitman	      29-Mar-89, Version 2 by Moon (add -PATHNAME vars)	      10-Apr-89, Version 3 by Pitman (clarify v2)	      11-Apr-89, Version 4 by Pitman (merge Moon's v3 comments)Problem Description: It is difficult to construct sets of software modules which work together as a unit and which port between different implementations. REQUIRE and PROVIDE were intended to provide this level of support but have `failed' to be portable in practice. Typical user configurations involve a `system definition' file which loads the modules of a `system' (collection of software modules). Among the specific problems which arise are:  - File system types may vary. Different file syntax must be used for    each site.  - Even with the same Lisp implementation and host file system type,    the directory in which a software system resides may differ from    delivery site to delivery site.  - Multiple `copies' of the same system may reside in different    directories on the same machine.Proposal (LOAD-TRUENAME:NEW-PATHNAME-VARIABLES): Introduce new variables:   *LOAD-TRUENAME*					[Variable]   This special variable is initially NIL, but is bound by LOAD to   hold the truename of the pathname of the file being loaded.   *COMPILE-FILE-TRUENAME*				[Variable]   This special variable is initially NIL, but is bound by    COMPILE-FILE to hold the truename of the pathname of the file   being compiled.      *LOAD-PATHNAME*					[Variable]     This special variable is initially NIL but is bound by LOAD   to hold a pathname which represents the filename given as the   first argument to LOAD merged against the defaults.   That is, (PATHNAME (MERGE-PATHNAMES arg1)).     *COMPILE-FILE-PATHNAME*				[Variable]     This special variable is initially NIL but is bound by COMPILE-FILE   to hold a pathname which represents the filename given as the   first argument to COMPILE-FILE merged against the defaults.   That is, (PATHNAME (MERGE-PATHNAMES arg1)).Example: ------ File SETUP ------ (IN-PACKAGE "MY-STUFF") (DEFMACRO COMPILE-TRUENAME () `',*COMPILE-FILE-TRUENAME*) (DEFVAR *MY-COMPILE-TRUENAME* (COMPILE-TRUENAME) "Just for debugging.") (DEFVAR *MY-LOAD-PATHNAME* *LOAD-PATHNAME*) (DEFUN LOAD-MY-SYSTEM ()   (DOLIST (MODULE-NAME '("FOO" "BAR" "BAZ"))     (LOAD (MERGE-PATHNAMES MODULE-NAME *MY-LOAD-PATHNAME*)))) ------------------------ (LOAD "SETUP") (LOAD-MY-SYSTEM)Rationale: This satisfies the most common instances of the frequently reported problem in the Problem Description. The ...-TRUENAME* variables are useful to tell the real file being loaded. The ...-PATHNAME* variables are useful to find information about the original link names or logical device names mentioned in the pathname to be opened but no longer reflected in the truename. Note that it is not adequate to just have the -PATHNAME* variables since TRUENAME on these pathnames might not yield the value of the -TRUENAME* variables if the file has been deleted or protected since the open occurred (in some implementations).Current Practice: Wide variation. In some implementations, calling LOAD binds or sets  *DEFAULT-PATHNAME-DEFAULTS* so that pathnames named in a file being LOADed will default to being `nearby.' Some implementations provide special variables that are similar or identical to one or both of those proposed. Some implementations have a way to represent the pathname for the current working directory, and make the default pathname default to that, so that loading without specifying a default again tends to get `nearby' files. None of these techniques is portable, unfortunately, because there is no agreement.Cost to Implementors: Very small.Cost to Users: None. This change is upward compatible.Cost of Non-Adoption: Continued difficulty for anyone trying to put a system of modules in a form where they can be conveniently delivered using portable code.Benefits: The cost of non-adoption is avoided.Aesthetics: Negligible.Discussion: Touretzky raised the issue most recently on Common-Lisp. A number of people immediately jumped on the bandwagon, indicating it was important to them, too. Pitman made three suggestions in response, of which the above is the first. The others included:  2. Variables *LOAD-TRUENAMES* and *COMPILE-FILE-TRUENAMES* which hold     lists of the truenames of all files being loaded or compiled,     respectively, during the dynamic invocation of LOAD and COMPILE-FILE.   3. Variable *LOAD-OR-COMPILE-FILE-TRUENAMES* which holds a list like    ((LOAD truename) (COMPILE-FILE truename) ...)    during the dynamic invocation of LOAD and COMPILE-FILE.  Touretzky responded: ``I like KMP's proposals.  I like the second one best: have separate   variables for files being loaded and files being compiled, and use   them to maintain a stack so we can see the nesting of loads within   files.'' Pitman ultimately chose to present the first rather than the second because it seemed simpler, easier to explain, and more likely to pass at this late date. Other suggestions which were considered discarded were:  a. Provide just variables *LOAD-STREAM* and *COMPILE-FILE-STREAM*.     Then PATHNAME and TRUENAME could be used to yield the      information contained in the -PATHNAME* and -TRUENAME* variables     of the proposal above.  b. Like (a), but call both variables *STANDARD-INPUT*. That is,     say that LOAD and COMPILE-FILE bind *STANDARD-INPUT* to the     stream being loaded. There were a number of pitfalls with this approach which all center around the way it invites the user to do other operations besides PATHNAME and TRUENAME.  Not only would some people be confused by the difference between the characteristics of *LOAD-STREAM* for compiled and interpreted files, but also even with interpreted  streams, the actual position of the stream pointer at the time of execution of the forms contained in the file could vary between implementations in a way that became a lurking portability barrier. Since the observed user need which spawned this discussion was for a way to tell what file was being loaded and not for a way to  manipulate the stream, it seemed best to just go with the variables that addressed that specific need--fewer pitfalls and more perspicuous code are likely to result.