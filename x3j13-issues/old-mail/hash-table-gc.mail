*start*02230 00024 US Sender: Common-Lisp-mailer%SAIL.Stanford:EDU:XeroxDate:  4 Aug 88 01:26From: ELIOT%cs.umass:EDU:XeroxSubject: Hash Tables and GCTo: common-lisp%SAIL.STANFORD:EDU:XeroxReturn-Path: <Common-Lisp-mailer@SAIL.Stanford.EDU>Redistributed: Xerox-Common-Lisp^.xReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 04 AUG 88 01:26:01 PDTReceived: from RELAY.CS.NET by SAIL.Stanford.EDU with TCP; 4 Aug 88  00:55:45 PDTReceived: from relay2.cs.net by RELAY.CS.NET id ac15973; 4 Aug 88 3:44 EDTReceived: from cs.umass.edu by RELAY.CS.NET id aa27618; 4 Aug 88 3:26 EDTOriginal-Date: Tue, 2 Aug 88 09:18 EDTX-VMS-To: in%"common-lisp@sail.stanford.EDU"    I just got back from vacation and read the discussion of has tables.    One point seems not to have been discussed - "Weak" links in hash    tables would be almost impossible to implement except for EQ hash    tables.  Not only does the GC have to prove that the reference    count for both key and value is one, but the GC also has to prove    that there are no other objects, x, such that:    	(<Equality-Predicate> x KEY)    For EQ hash tables this condition is true, a priori, but for any    other hash table it is not.  Consider an EQL hash table with    BIGNUM keys.  A program could somehow effectively copy a bignum    that is being used as a hash table key and then lose the original.        For EQUAL hash tables it is even worse.  Suppose (A . B) is a    key.  At any time a program might apply CONS to A and B to    re-create the key.  For example, suppose I am using a hash    table to represent a graph.  If A and B are nodes, then    the graph-links can be implemented using a hash table like this:        (defun BEFORE-P (A B)    	(gethash (cons a b) *link-table*))        Even EQ hash tables have problems, in any implementation with    immediate representations for objects.  For example the key 57236    (a fixnum) may not be interned and therefor there is no way to tell    how many copies of it exist.        Because of these problems I would suggest that this feature be    restricted to EQ and EQL hash tables, and that numbers of all types    should be considered accessible keys.    *start*01904 00024 US Originator: Common-Lisp-mailer%SAIL.Stanford:EDU:XeroxDate: 20 Jul 88 11:24From: "jeff%aiai.edinburgh.ac.uk%NSS.Cs.Ucl.AC.UK":GV:XeroxSubject: hash tablesTo: Greenwald%scrc-stony-brook:ARPA:Xerox, %labrea.stanford.edu!jonl%edsel:UUCP:Xeroxcc: common-lisp%sail.stanford:EDU:Xerox, goldman%vaxa.isi:EDU:Xerox, jrose%sun:COM:XeroxGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVFrom: Jeff Dalton <jeff%aiai.edinburgh.ac.uk@NSS.Cs.Ucl.AC.UK>To: Greenwald@scrc-stony-brook.arpa, jonl <@labrea.stanford.edu:jonl@edsel.uucp>Subject: hash tablesCc: common-lisp@sail.stanford.edu, goldman@vaxa.isi.edu, jrose@sun.comReturn-Path: <Common-Lisp-mailer@SAIL.Stanford.EDU>Redistributed: Xerox-Common-Lisp^.xReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 20 JUL 88 11:22:09 PDTReceived: from NSS.Cs.Ucl.AC.UK by SAIL.Stanford.EDU with TCP; 20 Jul 88  10:48:11 PDTReceived: from aiai.edinburgh.ac.uk by NSS.Cs.Ucl.AC.UK   via Janet with NIFTP           id aa06458; 20 Jul 88 18:41 BSTOriginal-Date: Wed, 20 Jul 88 18:36:30 BSTMessage-Id: <8470.8807201736@subnode.aiai.ed.ac.uk>GVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGV> Date: Tue, 19 Jul 88 00:05:31 PDT> From: Jon L White <jonl%edsel@edu.stanford.labrea>> In fact, I have heard some C programmers praise Common Lisp for it's inclusion> of hash-tables.  They complain and complain about having to reinvent the> wheel (hash-tables) over and over again.Apropos of hash tables, one feature of Pop(Log) that I sometimes wantto have is "temporary properties".  They are essentially hash tablessuch that being in them does not prevent being garbage collected.  Anobject might have a property (in this table) and nonetheless becollectable.  Is there some problem with such tables that makes themnot a good idea?  They certainly seem to be something users can'twrite for themselves.-- Jeff*start*03282 00024 US Originator: Common-Lisp-mailer%SAIL.Stanford:EDU:XeroxDate: 22 Jul 88 12:34From: barmar%Think:COM:XeroxSubject: hash tables and GCIn-Reply-to: <8807221700.AA04638@lukasiewicz.sun.com>To: jrose%sun:COM:Xeroxcc: gz%spt.entity:COM:Xerox, goldman%vaxa.isi:EDU:Xerox, "jeff%aiai.edinburgh.ac.uk%nss.cs.ucl.ac.uk":GV:Xerox, common-lisp%sail.stanford:EDU:XeroxGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVFrom: Barry Margolin <barmar@Think.COM>Subject: hash tables and GCTo: John Rose <jrose@sun.com>Cc: gz@spt.entity.com, goldman@vaxa.isi.edu, jeff%aiai.edinburgh.ac.uk@nss.cs.ucl.ac.uk, common-lisp@sail.stanford.eduIn-Reply-To: <8807221700.AA04638@lukasiewicz.sun.com>Return-Path: <Common-Lisp-mailer@SAIL.Stanford.EDU>Redistributed: Xerox-Common-Lisp^.xReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 22 JUL 88 12:33:57 PDTReceived: from Think.COM by SAIL.Stanford.EDU with TCP; 22 Jul 88  11:50:01 PDTReturn-Path: <barmar@Think.COM>Received: from sauron.think.com by Think.COM; Fri, 22 Jul 88 14:50:49 EDTReceived: from OCCAM.THINK.COM by sauron.think.com; Fri, 22 Jul 88 14:47:11 EDTOriginal-Date: Fri, 22 Jul 88 14:48 EDTMessage-Id: <19880722184820.1.BARMAR@OCCAM.THINK.COM>GVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGV    Date: Fri, 22 Jul 88 10:00:21 PDT    From: jrose@sun.com (John Rose)       Date: 22 Jul 88 10:13:34 EDT (Fri)       From: gz@spt.entity.com (Gail Zacharias)       This isn't much different from do-all-symbols in a lisp which does gctwa.    I believe only the simplest symbols should be GC-ed; if a symbol is    interned and has a nontrivial plist (say), GC-ing it will change    the visible behavior of the program, since if a program re-creates    it (via INTERN or READ), it will be missing its plist.That's the definition of GCTWA (which stands for GC Truly WorthlessAtoms -- an atom is truly worthless if it is unbound, its function cellis unbound, its property list is NIL, and the only reference to it is ina package structure).  Such a GC is transparent as long as you don't useDO-SYMBOLS or its variants and don't look at the second value of INTERNand FIND-SYMBOL.    Similarly, if hash table keys are being used to store information,    as well as merely access it, they shouldn't be GC-ed.    Putting weak links to keys in hash tables would make the EQUAL semantics    I proposed impossible, since an isomorphism test depends strongly    on MAPHASH.  (Or, before EQUAL is applied to test for isomorphism,    normalize the two tables by performing a full GC! :@)    Weak pointers are probably more useful than EQUAL isomorphism tests,    but a reliable MAPHASH also seems indispensible.  Sounds to me    like weakly-linked keys want to be another option to    MAKE-HASH-TABLE.He never said that this would be replacing hash tables; in fact, he saidit probably would NOT use the hash table interfaces.  A CL-compatiblehash table can't drop elements into the bit-bucket during GC.  Thisfeature would have to be an extension that would be invoked explicitlywhen it is wanted.  The definition of EQUAL on GC-able hash tables mighthave to be different from that for ordinary hash tables.                                                barmar*start*02286 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 14 OCT 88 13:05:15 PDTReceived: from NSS.Cs.Ucl.AC.UK by SAIL.Stanford.EDU with TCP; 14 Oct 88  13:03:19 PDTReceived: from aiai.edinburgh.ac.uk by NSS.Cs.Ucl.AC.UK   via Janet with NIFTP           id aa05105; 14 Oct 88 15:43 BSTDate: Fri, 14 Oct 88 15:45:36 BSTMessage-Id: <26808.8810141445@subnode.aiai.ed.ac.uk>From: Jeff Dalton <jeff%aiai.edinburgh.ac.uk@NSS.Cs.Ucl.AC.UK>Subject: Re: Issue: HASH-TABLE-GC (no proposal)To: Kent M Pitman <KMP@scrc-stony-brook.arpa>, CL-Cleanup@sail.stanford.eduIn-Reply-To: Kent M Pitman's message of Thu, 13 Oct 88 17:54 EDT> My notes from Fairfax meeting...> > Cleanup meeting:> >  This issue is about the inordinately long discussion on Common-Lisp@SAIL>  about hash tables.Much of the discussion was about secondary issues, so it wasn't reallyso bad (I think).>  Masinter said he would try to get Dalton to write up this issue as>  a proposal.I still plan to write it up.  I'd wanted to wait until discussion hadpretty much stabilized, and then some other things kept me from gettingto it.> X3J13 meeting:> >  KMP: There are several kinds of such hash tables. Those that are weak>       on key link, weak on value, and both.True.  Weak on key (if it becomes impossible to refer to the key(modulo the test) the entry can be removed) had the greatest precedentand seems the most useful.>  JonL, RWK: Nervous about this because it's "new technology".> >  Gregor: It IS implemented -- just not in Lisp. It is NOT new technology.Pop11 has this feature as "temporary properties".  Pop implementationshave supported it from some time.  For the purposes of this discussion,Pop can be considered Lisp with a different syntax.  PopLog Common Lispcan use the tables in Pop.  Lisp/VM has weak tables.  Interlisp has (Ithink) switched back and forth about what hash tables do.  At one point,they may have been week.  T has weak sets (formerly populations).  T hasweak pointers.There are a lot of other points.  I think I will be able to summarizethem adequately in the proposal.Thanks, Kent, for sending the message.Cheers,Jeff*start*01183 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 13 OCT 88 15:06:52 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 13 Oct 88  14:56:31 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via INTERNET with SMTP id 475978; 13 Oct 88 17:54:56 EDTDate: Thu, 13 Oct 88 17:54 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: HASH-TABLE-GC (no proposal)To: CL-Cleanup@SAIL.Stanford.EDUMessage-ID: <881013175448.2.KMP@BOBOLINK.SCRC.Symbolics.COM>My notes from Fairfax meeting...Cleanup meeting: This issue is about the inordinately long discussion on Common-Lisp@SAIL about hash tables. Masinter said he would try to get Dalton to write up this issue as a proposal.X3J13 meeting: KMP: There are several kinds of such hash tables. Those that are weak      on key link, weak on value, and both. JonL, RWK: Nervous about this because it's "new technology". Gregor: It IS implemented -- just not in Lisp. It is NOT new technology.*start*00900 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 18 OCT 88 09:29:58 PDTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 18 Oct 88  09:28:27 PDTReceived: from Semillon.ms by ArpaGateway.ms ; 18 OCT 88 09:28:06 PDTDate: Tue, 18 Oct 88 09:27 PDTFrom: Gregor.paSubject: Re: Issue: HASH-TABLE-GC (no proposal)To: Jon L White <jonl@lucid.com>cc: KMP@STONY-BROOK.SCRC.Symbolics.COM, CL-Cleanup@SAIL.Stanford.EDUFcc: BD:>Gregor>mail>outgoing-mail-4.text.newestIn-Reply-To: <8810180319.AA05454@bhopal>Message-ID: <19881018162709.1.GREGOR@PORTNOY.parc.xerox.com>Line-fold: no    Date: Mon, 17 Oct 88 20:19:26 PDT    From: Jon L White <jonl@lucid.com>    Anyone else know of other "actual needs"?Network Resource management like in X implementations.-------*start*03720 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 18 OCT 88 10:43:50 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 18 Oct 88  10:42:37 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 478063; Tue 18-Oct-88 13:42:16 EDTDate: Tue, 18 Oct 88 13:42 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: HASH-TABLE-GC (no proposal)To: JonL@lucid.comcc: KMP@STONY-BROOK.SCRC.Symbolics.COM, CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <8810180319.AA05454@bhopal>Message-ID: <881018134206.1.KMP@BOBOLINK.SCRC.Symbolics.COM>    Date: Mon, 17 Oct 88 20:19:26 PDT    From: Jon L White <jonl@lucid.com>    ... Anyone else know of other "actual needs"?I run into cases all the time where these would be useful. Here are a few... - My portable error system needed weak hash tables for unique ids   in printing (in order to simulate MAKNUM in a portable, reliable way). - In my work with Cloe (internally at Symbolics), I've had need to   record various kinds of attribute information about non-symbols.   An example is the keeping of :ADJUSTABLE information in the Cloe   development environment (since Genera doesn't represent that info   explicitly and some users want to be able to have ADJUST-ARRAY   do error checking anyway). - Also internally to Cloe, before I'd worked out a way to have   funcallable things with slots, I had hash tables from function   objects to another structure which had the slots. The function was   also closed over the structure with slots, so it didn't go through   the hash table, but the hash table was important in debugging.All of these items need hash table with weak key links only.All of these items cause the accumulation of massive amounts ofgarbage over time with no (semantically valid) hope of recoveryin the absence of weak hash tables.It is especially important to provide an abstraction for dealing withthis kind of thing in a portable language because often the problemsare caused by portability. That is, most of these problems can be solvedwithin an implementation by ways better than weak hash tables. Eg, -- ifI knew all kinds of useful stuff about the internals of the Lisp inquestion -- I would just implement MAKNUM, add an extra bit in arrays,or make a new data type for generic functions. That being the case,there is far less motivation to -ever- develop weak hash tables in anygiven implementation.Yet problems that demand this sort of solution continue to hit peoplewho have no access to such low-level/bit-twiddly solutions. So I agreewith GZ that it's a little unfair to ask who has a use without firstproviding it. For all we know, lots of hash tables in use today couldbe needless storage hogs because programmers really wanted weak tablesand couldn't find them -- and were willing to pay the storage penaltyof using normal hash tables because the application was so important.There may be some little details to attend to, but abstractly the ideaof a table with weak key links is both simple and powerful. I think weshould look at the idea quite seriously. The question I have for thosewho think it's premature to do this is: what is the worst case scenarioyou can imagine for introducing this feature prematurely? Are youenvisioning a feature that is hard/expensive to implement? unreliablein some way I'm not thinking about?  turns out to not be somethingpeople want? Are the objections technical, economic, cultural ... orsuperstitious?*start*02749 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 18 OCT 88 11:14:47 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 18 Oct 88  11:13:28 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 478088; Tue 18-Oct-88 14:12:36 EDTDate: Tue, 18 Oct 88 14:12 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: HASH-TABLE-GC (no proposal)To: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: JonL@lucid.com, CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <881018134206.1.KMP@BOBOLINK.SCRC.Symbolics.COM>Message-ID: <19881018181211.9.MOON@EUPHRATES.SCRC.Symbolics.COM>    Date: Tue, 18 Oct 88 13:42 EDT    From: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>    There may be some little details to attend to, but abstractly the idea    of a table with weak key links is both simple and powerful. I think we    should look at the idea quite seriously. The question I have for those    who think it's premature to do this is: what is the worst case scenario    you can imagine for introducing this feature prematurely? If it's this particular feature, not too bad.  There seemed to be a gooddeal of confusion or disagreement about exactly what feature we werereally talking about, how to define "weak" in a portable way, whether toinclude finalization also, etc.  It's all that ill-definedness thatbothers me.  The standard might end up being defined in a way that is soimplementation dependent that it's very difficult for anyone but itsauthor to implement.  Alternatively, the standard might be so vague asto be meaningless.							      Are you    envisioning a feature that is hard/expensive to implement? unreliable    in some way I'm not thinking about?  turns out to not be something    people want? Are the objections technical, economic, cultural ... or    superstitious?Perhaps my objections are more to the (envisioned) process than to the product.If there was a concensus in the community as to what feature we weretalking about, and how to define it portably, then assuming it wasn'tunduly expensive to implement (which I think should not be a problem,although I'm not familiar with the internals of many implementations)and that it was not a burden for users (which ought to go without saying,no incompatible change should be involved), then I wouldn't think itwas premature.  So maybe I'm worrying unduly.  But it's very late inthe X3J13 process.  The practical alternative is likely to be a fewLisp vendors setting a de facto standard.*start*05188 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 18 OCT 88 13:41:24 PDTReceived: from lucid.com by SAIL.Stanford.EDU with TCP; 18 Oct 88  11:59:17 PDTReceived: from bhopal ([192.9.200.13]) by LUCID.COM id AA06074g; Tue, 18 Oct 88 11:55:44 PDTReceived: by bhopal id AA01089g; Tue, 18 Oct 88 11:54:10 PDTDate: Tue, 18 Oct 88 11:54:10 PDTFrom: Jon L White <jonl@lucid.com>Message-Id: <8810181854.AA01089@bhopal>To: Moon@STONY-BROOK.SCRC.Symbolics.COM, KMP@STONY-BROOK.SCRC.Symbolics.COMCc: Gregor.pa, gz@spt.entity.com, CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: David A. Moon's message of Tue, 18 Oct 88 00:29 EDT <19881018042934.6.MOON@EUPHRATES.SCRC.Symbolics.COM>Subject: Issue: HASH-TABLE-GC (no proposal)re: Date: Tue, 18 Oct 88 00:29 EDT    From: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>    . . .     In Genera ... The identified, actual need was internal to Statice      (an object-oriented database system).  ...The "actual need" identified at the CLOS symposium was Larry Rowe'sobject-oriented database work Picasso -- the management of "in-corehandles" for external, database stored objects.  I'd hazard a guessthat the Statice need was basically the same, namely a need for"cache tables".  Probably Gregor's suggestion for "Network Resourcemanagement like in X implementations" would fall into the same class,as would Gail's mention of "maintaining some auxillary debugging info".re: Date: Tue, 18 Oct 88 13:42 EDT    From: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>    . . .      - My portable error system needed weak hash tables for unique ids       in printing (in order to simulate MAKNUM in a portable, reliable way).     - In my work with Cloe (internally at Symbolics), I've had need to       record various kinds of attribute information about non-symbols.       An example is the keeping of :ADJUSTABLE information in the Cloe       development environment (since Genera doesn't represent that info       explicitly and some users want to be able to have ADJUST-ARRAY       do error checking anyway).     - [third case similar to second -- JonL]This looks more like a need for attribute properties rather than for"cache tables";  I'm not sure of how you, and others (such as pop11),would use them, but it probably would be unacceptable for "lightening"to strike haphazardly and delete random entries (as "cache tables" wereso graphically characterized).  Likely, Gail's mention of "keeping trackof editor marks" falls into this class.  Perhaps Dalton can shed some more light on the dynamics of such properties?Incidentally, the design of VAX/NIL had to encompass a MAKNUM forMacLisp compatibility; and we more-or-less talked ourselves intobelieving that a single "unique id" table, specially handled by thegarbage collector, was satisfactory for all such usages.  That is, any desired "weak property" could be hung off the unique-id slot;and all such properties would "go away" when the object was GC'd.[See P.S. below about MacLisp semantics.]In response to Gail and Kent's comment that it is unfair to ask for"actual need" situations:  this question is motivated by the prospect of including such a feature in the upcoming standardard, not in regardto any implementor's design.  In fact, my msg explicitly suggested thatstandardization should come only after some implementation's lead in utilization.  I firmly believe in vendors making innovative extensions to the standard.The meta point in this discussion is the "why" we are assembled into X3J13.  I call it the Moon-Gabriel-Weinreb-White viewpoint, that weare standardizing an old, existing language -- not designing a new language without regard to an existing community of users.  Common Lispis the culmination of 30 years of Lisp development for AI research and commercial use; other dialects of Lisp are newer, and do better serve the purposes of Programming Language research.  There is certainly room in X3J13 Common Lisp for incompatible changes and novel additions;but we simply should be MUCH MORE conservative about the speed of acceptance of these than we are about, say, fixing up clear ambiguities in our former understanding and extending the unfinished work that was overdue even in 1981 when the unification movement began [i.e., object-oriented-programming/Flavors, Iteration/LOOP, Windows(sigh) and Compilation Semantics].Hence, I look forward to "weak" tables etc in Common Lisp, but notin January 1989.-- JonL --P.S. Reminder for those not familiar with MAKNUM -- since pdp10 MacLisp     had a "collecting, non-relocating" garbage collector, the address      of any object was it's unique id; but for implementations using some     form of copying garbage collector, either an extra slot in each      object had to be reserved for this purpose, or else some kind of      "weak" property table had to be maintained by the GC.  I think      Multics MacLisp had a special table for MAKNUM, but maybe entries      never got deleted; Moon may remember.*start*01820 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 18 OCT 88 17:23:32 PDTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 18 Oct 88  17:18:14 PDTReceived: from Semillon.ms by ArpaGateway.ms ; 18 OCT 88 17:17:59 PDTDate: 18 Oct 88 17:17 PDTFrom: masinter.paSubject: Re: Issue: HASH-TABLE-GC (no proposal)In-reply-to: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>'s message of Tue, 18 Oct 88 13:42 EDTTo: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: JonL@lucid.com, CL-Cleanup@SAIL.Stanford.EDUMessage-ID: <881018-171759-5382@Xerox>There are two proposals being discussed her:One proposal is to require "finalization" of some sort: some way to call auser-written function when an object is "about" to be GC'd. The other,which is implementable in terms of the first, is just to have hash tableswhere entries are deletable when the keys are otherwise GCd. There are some problems which can be solved by either mechanism, and otherswhich need one or the other.I think the hash-table-key-gc problem is compatible with a wide variety ofimplementations and GC mechanisms. Since CL makes few requirements on"garbage collection", this can be viewed as a "declaration" issue... I wanta way to declare that I will never care about keys disappearing when I callMAPHASH in exchange for the possibility that the pointers can go away.I think that finalization is difficult for some classes and implementationsof GCs, but still a "good idea".I think we should write up both of these as "optional" and then decide whatwe're going to do with "optional" features. I also don't see it asnecessary for the first draft of the ANSI standard, but perhaps I'm wrong.*start*02983 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 21 OCT 88 08:10:53 PDTReceived: from NSS.Cs.Ucl.AC.UK by SAIL.Stanford.EDU with TCP; 21 Oct 88  08:07:01 PDTReceived: from aiai.edinburgh.ac.uk by NSS.Cs.Ucl.AC.UK   via Janet with NIFTP           id aa05291; 21 Oct 88 15:46 BSTDate: Fri, 21 Oct 88 15:49:34 BSTMessage-Id: <1009.8810211449@subnode.aiai.ed.ac.uk>From: Jeff Dalton <jeff%aiai.edinburgh.ac.uk@NSS.Cs.Ucl.AC.UK>Subject: Re: Issue: HASH-TABLE-GC (no proposal)To: Kent M Pitman <KMP@scrc-stony-brook.arpa>, JonL%lucid.com@NSS.Cs.Ucl.AC.UKIn-Reply-To: Kent M Pitman's message of Tue, 18 Oct 88 13:42 EDTCc: CL-Cleanup@sail.stanford.eduI think Kent's message has it just right.I've been allocated for a week and have not had time to do anythingabout a proposal.  But to try to clear up a few points:1. There is some question about whether weak-key hash tables are   the right way to provide something of this sort.  On balance,   I think they are.  There were suggestions on the CL list that   weak pointers and finalization were better or at least more   fundamental, but I think something based on hash tables is   the (or at least a) right user-level facility to provide.   Weak pointers, finalization, and so forth should be considered   spearate issues.2. Precedent.  It's true that there isn't much in the way of   current practice in Common Lisp, but the idea is not untested.   Temporary properties have been in Pop implementations for   many years and, despite the name, they really are just hash   tables.  Lisp/VM also seems to have them (but I can't be sure   because I have only the documentation).3. Need.  Hash tables are often used as a way to add properties   (i.e., extra slots) to objects.  Imagine, say, that SYMBOL-PLIST   was implemented not as part of the symbol but using a hash table.   That seems reasonable until you realized than then any symbol   with a plist could never be collected.  I should think that   this problem greatly limits the usefulness of hash tables in   many applications.In case anyone is wondering "which Kent message?", it's the onethat said this:>     ... Anyone else know of other "actual needs"?>  - In my work with Cloe (internally at Symbolics), I've had need to>    record various kinds of attribute information about non-symbols.> All of these items need hash table with weak key links only.> All of these items cause the accumulation of massive amounts of> garbage over time with no (semantically valid) hope of recovery> in the absence of weak hash tables.> Yet problems that demand this sort of solution continue to hit people> who have no access to such low-level/bit-twiddly solutions.> There may be some little details to attend to, but abstractly the idea> of a table with weak key links is both simple and powerful.-- Jeff*start*03189 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 17 OCT 88 20:22:48 PDTReceived: from lucid.com by SAIL.Stanford.EDU with TCP; 17 Oct 88  20:21:15 PDTReceived: from bhopal ([192.9.200.13]) by LUCID.COM id AA05581g; Mon, 17 Oct 88 20:20:59 PDTReceived: by bhopal id AA05454g; Mon, 17 Oct 88 20:19:26 PDTDate: Mon, 17 Oct 88 20:19:26 PDTFrom: Jon L White <jonl@lucid.com>Message-Id: <8810180319.AA05454@bhopal>To: KMP@STONY-BROOK.SCRC.Symbolics.COMCc: CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: Kent M Pitman's message of Thu, 13 Oct 88 17:54 EDT <881013175448.2.KMP@BOBOLINK.SCRC.Symbolics.COM>Subject: Issue: HASH-TABLE-GC (no proposal)re: My notes from Fairfax meeting...     . . .      JonL, RWK: Nervous about this because it's "new technology".     Gregor: It IS implemented -- just not in Lisp. It is NOT new technology.I still stand by my note of caution -- meaning I would oppose any suchitem being included in the standard as early as January 1989.Although several other languages have something vaguely reminiscent of what has been talked about for so long on the Common-Lisp mailing list, there is no justification at all for claiming that they set precedent for Common Lisp.There are just too many differences as to what a "garbage collector" is, and what a "hash table" is, and what a "weak pointer" is.  [Not sure I used justthe bare word "technology", but was implying that this is new and non-obvious for Common Lisp].In particular, Cedar's "finalization" technology is heavily involved with its reference counting garbage collector [or, "used to be" -- my reference is circa 1984].  Many commercial Common Lisps do not in fact "collect" the garbage, but instead  "abandon" the garbage by copying the living structure.There are ways out, but they are by no means easy choices.Similarly, whether "weakness" should be expressed as a property of   (1) hash-table keys   (2) locative properties   (3) attribute properties [a la Pop11?]is a crucial question.  For example, the consistency of what MAPHASHwill find is in question if (1) is chosen; and serious implementationalquestions arise if "weakness" is to be ascribable to any old random SETF'able place.Note that PDP10 MacLisp had "weak" tables for interned symbols back in the early 1970's;  what it didn't have was a user-extensible notion of "weakness", and that is the point of this (non-) proposal.What this (non-) proposal needs is some implementation to give it a try,based on an indentified, actual need.  [Please, no suggestions as to what someone "might need" -- there's been a surfeit of that on the CL mailinglist already].  At the CLOS symposium, I heard one case of "actual need" that could be satisfied by a very minimal version of (1) above.  I called that situation a "cache table" in that it was a hash-table used as a kind of performance accelerator; at any time, any element in the table may be randomly deleted, and no program operation other than speed is affected.Anyone else know of other "actual needs"?-- JonL --*start*01305 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 17 OCT 88 21:31:35 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 17 Oct 88  21:30:08 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 477822; Tue 18-Oct-88 00:29:57 EDTDate: Tue, 18 Oct 88 00:29 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: HASH-TABLE-GC (no proposal)To: Jon L White <jonl@lucid.com>cc: KMP@STONY-BROOK.SCRC.Symbolics.COM, CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <8810180319.AA05454@bhopal>Message-ID: <19881018042934.6.MOON@EUPHRATES.SCRC.Symbolics.COM>    Date: Mon, 17 Oct 88 20:19:26 PDT    From: Jon L White <jonl@lucid.com>    ....    What this (non-) proposal needs is some implementation to give it a try,    based on an indentified, actual need.In Genera we've experimented with weak-key hash tables.  The identified,actual need was internal to Statice (an object-oriented databasesystem).  I don't think this form of tables has been released yet.I agree that it would be premature to standardize on something like thisthis year.*start*01922 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 17 OCT 88 23:50:46 PDTReceived: from EDDIE.MIT.EDU by SAIL.Stanford.EDU with TCP; 17 Oct 88  23:49:22 PDTReceived: by EDDIE.MIT.EDU with UUCP with smail2.5 with sendmail-5.45/4.7 id <AA09626@EDDIE.MIT.EDU>; Tue, 18 Oct 88 02:48:44 EDTReceived: by spt.entity.com (smail2.5); 18 Oct 88 01:51:18 EDT (Tue)To: jonl@lucid.comCc: KMP@STONY-BROOK.SCRC.Symbolics.COM, CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: Jon L White's message of Mon, 17 Oct 88 20:19:26 PDT <8810180319.AA05454@bhopal>Subject: Issue: HASH-TABLE-GC (no proposal)Message-Id: <8810180151.AA17376@spt.entity.com>Date: 18 Oct 88 01:51:18 EDT (Tue)From: gz@spt.entity.com (Gail Zacharias)   Date: Mon, 17 Oct 88 20:19:26 PDT   From: Jon L White <jonl@lucid.com>   Anyone else know of other "actual needs"?We've implemented "weak" sets (populations?); the motivating "actual need" waskeeping track of buffer marks in the editor.  There are other uses, mostly ofthe same form (i.e.  keep track of sets of objects which need to be updatedand kept in synch with some other data structure, provided they are otherwiseaccessible).  We don't have any actual uses for weak hash tables so far, butare considering using them for maintaining some auxillary debugging info.None of this has been released to users yet, though we will almost certainlyhave some form of user-accessible weak data structures (at least weak sets,possibly weak hash tables) in a future release.  I think this is one of thosecases where a typical user might not even realize that such objects arepossible and just naturally structure his algorithms (possibly non-optimally)in such a way as to not need them.  So in a way asking for "actual need"before they are available is not entirely fair...*start*00788 00024 USaReturn-Path: <jeff%aiai.edinburgh.ac.uk@NSS.Cs.Ucl.AC.UK>Received: from NSS.Cs.Ucl.AC.UK ([128.41.9.3]) by Xerox.COM ; 16 NOV 88 00:17:02 PSTReceived: from aiai.edinburgh.ac.uk by NSS.Cs.Ucl.AC.UK   via Janet with NIFTP           id aa03928; 15 Nov 88 16:48 GMTDate: Tue, 15 Nov 88 17:12:17 GMTMessage-Id: <13150.8811151712@subnode.aiai.ed.ac.uk>From: Jeff Dalton <jeff%aiai.edinburgh.ac.uk@NSS.Cs.Ucl.AC.UK>Subject: Re: Issue: HASH-TABLE-GC (no proposal)To: masinter.paIn-Reply-To: masinter.pa@com.xerox's message of 14 Nov 88 15:01 PST> Is this the issue you were going to write up?That was one.  But I have a suspicion it won't be very well-receivedat such a late date, especially since there isn't much precedent inCommon Lisp.Sigh.-- Jeff