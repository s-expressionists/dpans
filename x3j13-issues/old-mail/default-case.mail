*start*01897 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 16-Mar-89 15:18:11 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 16 MAR 89 15:18:13 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 16 Mar 89  15:18:13 PSTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 559010; Thu 16-Mar-89 18:15:06 ESTDate: Thu, 16 Mar 89 18:15 ESTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: DEFAULT-CASETo: John Foderaro <franz!frisky!jkf@ucbarpa.Berkeley.EDU>cc: CL-Cleanup@sail.stanford.eduIn-Reply-To: <8903162021.AA08568@frisky>Message-ID: <19890316231500.7.MOON@EUPHRATES.SCRC.Symbolics.COM>  Proposal (DEFAULT-CASE:LOWER)    The case of all characters in the names of standard    functions, symbols, and packages is lower.You're proposing a huge incompatible change that is bound toget you into a religious war that can't do anyone any good.I claim that this proposal addresses the internal representationof programs but all you care about is the external representation.I also claim that the choice of case in internal representationis arbitrary and need not prejudice the external representationat all.If you believe what I just said, you would propose that the reader getan option to flip case instead of up-casing when converting fromexternal representation to internal representation, and would proposeanother value for *print-case* that does the inverse transformation.This would be compatible with everybody, would make everybody happyexcept for those who might insist that one internal representationis better than the other, and hopefully would avoid spending a lotof time on discussion.  What do you think?*start*05110 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 16-Mar-89 12:56:02 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 16 MAR 89 12:54:15 PSTReceived: from ucbarpa.Berkeley.EDU by SAIL.Stanford.EDU with TCP; 16 Mar 89  12:52:43 PSTReceived: from franz.UUCP by ucbarpa.Berkeley.EDU (5.61/1.33)	id AA18242; Thu, 16 Mar 89 12:24:16 -0800Received: from frisky by franz (3.2/3.14)	id AA21310; Thu, 16 Mar 89 12:23:04 PSTReceived: by frisky (3.2/3.14)	id AA08568; Thu, 16 Mar 89 12:21:59 PSTFrom: franz!frisky!jkf@ucbarpa.Berkeley.EDU (John Foderaro)Return-Path: <frisky!jkf>Message-Id: <8903162021.AA08568@frisky>To: franz!sail.stanford.edu!CL-Cleanup@ucbarpa.Berkeley.EDUSubject: DEFAULT-CASEDate: Thu, 16 Mar 89 12:21:57 PST    I brought up the issue of case-sensitive programming a few weeksago and there was no negative mail.   My message was part of thediscussion on the  READ-CASE-SENSITIVITY issue but in thinking it overI believe that it makes more sense to look at what is needed to makeCommon Lisp more useful in case-sensitive environments as twoseparate things:  1. allow to the reader to be case-sensitive, and2. make the names be lower-case by default.   Item 1 is already beingworked on, here is item 2:						john foderaro						franz inc.						jkf%franz.uucp@berkeley.edu	 Issue:	DEFAULT-CASEForum:	CleanupReferences: CLtL p 334 ff: What the Read Function Accepts;                especially p 337.	    Issue: READ-CASE-SENSITIVITYCategory:   CHANGEEdit History: 16-Mar-89, Version 1 by jkfProblem Description:    In most programming/operating-system environments where the case    of names of functions, programs, identifiers, and files *does*    matter, the case of most characters used for such purposes    is lower case.   One example of such an environment is the Unix    operating system.    The resolution of the READ-CASE-SENSITIVITY will permit    one to write case-sensitive Lisp code however since the     the case of characters in the print names of all standard    functions and symbols is upper, this will make using    the Lisp in a case-sensitive mode difficult.    Proposal (DEFAULT-CASE:LOWER)    The case of all characters in the names of standard    functions, symbols, and packages is lower.Rationale:    People running in a case-insensitive mode shouldn't care    which case is the default case.    People running in a case-sensitive mode care very much    which case is default, and for most of these people    lower case is preferred.    Furthermore there are a large number of users    of Lisp in case-sensitive environments and it is important    that the desires of these users be met.Current Practice:    Franz Inc's Allegro Common Lisp supports a case-sensitive    reader with either a upper-case default for names    or a lower-case default.   A number of people use the    case-sensitive feature with a lower-case default.  I don't    know anyone that uses the lisp in a case-sensitive mode    with an upper-case default.Cost to Implementors:    In case-insensitive mode, the cost to make characters downcase    rather than upcase should be small.    The cost of locating and fixing all of the places where    the default case of symbol names actually matters will be moderate    (I suspect that the older the Lisp the more numerous    the instances of dependency on the case of the names).Cost to Users:    Again, the cost of locating and fixing all of the places where    the default case of symbol names actually matters will be moderate.    As an example, to find and fix all of the places in the PCL    source (~15000 lines) that depend on the default case took    me 15 minutes.Cost of Non-Adoption:    Using Lisp in case-sensitive environments will continue to be    awkward.        It will continue to be hard for Lisp to interact    with programs written in case-sensitive languages (such as C).        The use of case sensitivity as a tool for writing programs    will continue to be unavailable to Lisp programmers.    Vendors will invent their own methods of adding case-sensitivity,    each in their own different way.        Benefits:    See 'Cost of Non-Adoption'.Aesthetics:    Most Lisp books (including CLtL) put Lisp code in lower case.    I believe that most people prefer to read text written in lower case.    Discussion:    The best solution would be for there to be a way to make the    reader case-sensitive (i.e. a resolution to the READ-CASE-SENSITIVITY    issue) and for DEFAULT-CASE:LOWER to pass.  If for some    reason the READ-CASE-SENSITIVITY should not be resolved in    a manner that results in a case-sensitive reader option, it would    still be good to pass DEFAULT-CASE:LOWER since that would    bring Common Lisp one giant step closer to supporting the    case-sensitive environment.                            -------------------------------          *start*02803 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 16-Mar-89 22:52:05 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 16 MAR 89 22:52:06 PSTReceived: from ucbarpa.Berkeley.EDU by SAIL.Stanford.EDU with TCP; 16 Mar 89  22:53:03 PSTReceived: from franz.UUCP by ucbarpa.Berkeley.EDU (5.61/1.33)	id AA29249; Thu, 16 Mar 89 22:20:22 -0800Received: from frisky by franz (3.2/3.14)	id AA22529; Thu, 16 Mar 89 21:39:21 PSTReceived: by frisky (3.2/3.14)	id AA09727; Thu, 16 Mar 89 21:38:16 PSTFrom: franz!frisky!jkf@ucbarpa.Berkeley.EDU (John Foderaro)Return-Path: <frisky!jkf>Message-Id: <8903170538.AA09727@frisky>To: David A. Moon <franz!ucbarpa!STONY-BROOK.SCRC.Symbolics.COM!Moon@ucbarpa.Berkeley.EDU>Cc: franz!sail.stanford.edu!CL-Cleanup@ucbarpa.Berkeley.EDUSubject: Re: DEFAULT-CASE In-Reply-To: Your message of Thu, 16 Mar 89 18:15:00 EST.             <19890316231500.7.MOON@EUPHRATES.SCRC.Symbolics.COM> Date: Thu, 16 Mar 89 21:38:14 PST I'm not trying to start a religious war.  I'm not saying thatcase-sensitive is better or worse than case-insensitive.   I'm justsaying that there are large numbers of people who favor each positionand that Common Lisp should support both.      Regarding internal vrs external:  The internal representation showsthrough in a number of places.   For example the functions symbol-nameand make-symbol let the user deal with the actual internalrepresentation of the names of symbols.   The idea of having a*print-case* value that inverts the case on output is interesting but that would make things awkward:  To make the symbol FooBar you would have to (make-symbol "fOObAR").   Also examining the charactersof a print-name with aref would give confusing results.  >> I also claim that the choice of case in internal representation>> is arbitrary and need not prejudice the external representation>> at all. For a case-insensitive Lisp I completely agree.  For a case-sensitiveLisp, as I've shown above, this just isn't true.   Thus if the needsof the case-sensitive Lisp are met, then the needs of both are met. -john foderaro[it might be interesting to explore the possiblity of explicitlystating that the internal representation of print-names was undefinedwith respect to case, and further providing two new functions: onewhich took a string and converted it to the internal representationjust as the reader would do and the other which took a symbol-name and converted it to a string just as the printer would do.  I suspect that this would lead to programs that worked on a fewCommon Lisps but failed on others due to accidental reliance on theactual case of the printnames. ]*start*02841 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 17-Mar-89 08:24:09 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 17 MAR 89 08:24:05 PSTReceived: from SEF1.SLISP.CS.CMU.EDU by SAIL.Stanford.EDU with TCP; 17 Mar 89  08:23:49 PSTReceived: from SEF1.SLISP.CS.CMU.EDU by SEF1.SLISP.CS.CMU.EDU; 17 Mar 89 11:19:44 ESTTo: franz!frisky!jkf@ucbarpa.Berkeley.EDU (John Foderaro)cc: cl-cleanup@sail.stanford.eduSubject: Re: DEFAULT-CASE In-reply-to: Your message of Thu, 16 Mar 89 21:38:14 -0800.             <8903170538.AA09727@frisky> Date: Fri, 17 Mar 89 11:19:37 ESTFrom: Scott.Fahlman@B.GP.CS.CMU.EDU     I'm not trying to start a religious war.  I'm not saying that    case-sensitive is better or worse than case-insensitive.   I'm just    saying that there are large numbers of people who favor each position    and that Common Lisp should support both.        I'm trying to stay out of most cleanup discussions these days, but feelcompelled to say something about this one, especially since John indicatedthat he was reading silence as non-disagreement.The argument here is that we should make it easy for those people whoprefer case-sensitivity to write their code that way and for those who likecase-insensitivity (with symbols being bashed into some canonical case) towrite their code that way.  I think that this is a recipe for consfusionand major portability problems.  As soon as there is code around thatassumes case sensitivity, anyone who wants to use that code in conjuctionwith code of his own has to go along with case sensitivity.  Attempts tomix the two styles will break.  It would be like the old days when half theLisp world used octal and the other half used decimal.  So if this measureis adopted, it won't be a matter of "freedom of choice".  We'll either havetwo incompatible software words within Common Lisp, or it will drag us allthrough a major incompatible change we don't want.I think we have to choose one style or the other for code if portability isto be maintained.  For better or for worse, we made that choice in favor ofa case-bashing convention.  I don't think I'd favor the same choice againif compatibility with the past were not an issue, but I don't think we canmake such a sweeping incompatible change now.  And we can't straddle thefence.I've got no problem with a proposal that would allow the Common Lisp readerto go into some non-case-smashing mode.  This would be useful when thereader is reading code for some embedded language with different caserules, building up a dtabase, or doing other tasks.  But we should make itclear that when reading Common Lisp code, the case-bashing convention stillholds.-- Scott*start*03197 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 17-Mar-89 08:54:09 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 17 MAR 89 08:48:25 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 17 Mar 89  08:47:29 PSTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 559518; Fri 17-Mar-89 11:44:50 ESTDate: Fri, 17 Mar 89 11:44 ESTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Re: DEFAULT-CASE To: John Foderaro <franz!frisky!jkf@ucbarpa.Berkeley.EDU>cc: CL-Cleanup@sail.stanford.eduIn-Reply-To: <8903170538.AA09727@frisky>Message-ID: <19890317164453.4.MOON@EUPHRATES.SCRC.Symbolics.COM>    Date: Thu, 16 Mar 89 21:38:14 PST    From: franz!frisky!jkf@ucbarpa.Berkeley.EDU (John Foderaro)     I'm not trying to start a religious war.  I'm not saying that    case-sensitive is better or worse than case-insensitive.   I'm just    saying that there are large numbers of people who favor each position    and that Common Lisp should support both.    Agreed.  I'm trying to help you not start a religious war.      Regarding internal vrs external:  The internal representation shows    through in a number of places.   For example the functions symbol-name    and make-symbol let the user deal with the actual internal    representation of the names of symbols.   The idea of having a    *print-case* value that inverts the case on output is interesting but     that would make things awkward:  To make the symbol FooBar you     would have to (make-symbol "fOObAR").   Also examining the characters    of a print-name with aref would give confusing results.  The internal representation is accessible to programs, but I don't thinkit's particularly important.  You seem to disagree.  It might be that wehave different experience with how often these primitives are used inportable programs.  I don't think they are used enough that having aninternal representation in the opposite case from the external one wouldcause bugs, but I do think they are used often enough that an incompatiblechange would cause bugs in the medium term.    >> I also claim that the choice of case in internal representation    >> is arbitrary and need not prejudice the external representation    >> at all.     For a case-insensitive Lisp I completely agree.  For a case-sensitive    Lisp, as I've shown above, this just isn't true.   Thus if the needs    of the case-sensitive Lisp are met, then the needs of both are met.True, but if the discussion gets side-tracked by flaming controversy overthe relatively unimportant issue of internal representation, I suspectthat the only outcome will be that everyone will give up on reaching aconcensus and we will be stuck with the status quo.  On the other hand,if you compromise and keep the internal representation compatible, Ipredict that you can very easily get what you really want, at the costof having a language 0.01% more inelegant than it would otherwise be.*start*03165 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 17-Mar-89 11:21:29 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 17 MAR 89 10:44:06 PSTReceived: from NSS.Cs.Ucl.AC.UK by SAIL.Stanford.EDU with TCP; 17 Mar 89  10:43:34 PSTReceived: from aiai.edinburgh.ac.uk by NSS.Cs.Ucl.AC.UK   via Janet with NIFTP           id aa08901; 17 Mar 89 18:19 GMTDate: Fri, 17 Mar 89 18:18:11 GMTMessage-Id: <4955.8903171818@subnode.aiai.ed.ac.uk>From: Jeff Dalton <jeff%aiai.edinburgh.ac.uk@NSS.Cs.Ucl.AC.UK>Subject: Re: DEFAULT-CASETo: "David A. Moon" <Moon@scrc-stony-brook.arpa>, John Foderaro <@NSS.Cs.Ucl.AC.UK,@aiai.edinburgh.ac.uk,@ucbarpa.berkeley.edu,@franz:jkf@frisky>In-Reply-To: David A. Moon's message of Thu, 16 Mar 89 18:15 ESTCc: CL-Cleanup@sail.stanford.edu>   Proposal (DEFAULT-CASE:LOWER)> >     The case of all characters in the names of standard>     functions, symbols, and packages is lower.> > You're proposing a huge incompatible change that is bound to> get you into a religious war that can't do anyone any good.> I claim that this proposal addresses the internal representation> of programs but all you care about is the external representation.> I also claim that the choice of case in internal representation> is arbitrary and need not prejudice the external representation> at all.That is almost true, but not compeletly.  What about FIND-SYMBOL andthe like?  So the programmer sometimes still has to know that, internally,the default is upper case.  And if the internal case has so littlesignificance, why should there be a religious war about it?> If you believe what I just said, you would propose that the reader get> an option to flip case instead of up-casing when converting from> external representation to internal representation, and would propose> another value for *print-case* that does the inverse transformation.Something like this was suggested in the "discussion" section ofREAD-CASE-SENSITIVITY (Version 1).  But maybe it shouldn't justflip everything:  An interesting possibility would be to disguise the preferred  internal case by defining a value for *READ-CASE* called :INVERT.  If the value were :INVERT, mixed-case symbols would remain the same  (or perhaps they would be inverted too) but all-upper-case input  would specify a lower-case name internally, and vice versa.One problem with such proposals is that (I suspect) most peoplemost of the time will write code in lower case.  Having the readeralways invert what they type seems a bit perverse.  I'd be surprisedif this convinced anyone to change their mind, though.> This would be compatible with everybody, would make everybody happy> except for those who might insist that one internal representation> is better than the other, and hopefully would avoid spending a lot> of time on discussion.  What do you think?I'd prefer to change the internal case, but this is a reasonablealternative if a change can't happen or would cause hard feelingsor extensive difficulty if it did.*start*03490 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 17-Mar-89 12:57:32 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 17 MAR 89 12:56:38 PSTReceived: from ucbarpa.Berkeley.EDU by SAIL.Stanford.EDU with TCP; 17 Mar 89  12:54:27 PSTReceived: from franz.UUCP by ucbarpa.Berkeley.EDU (5.61/1.33)	id AA10420; Fri, 17 Mar 89 12:23:10 -0800Received: from frisky by franz (3.2/3.14)	id AA24300; Fri, 17 Mar 89 11:37:25 PSTReceived: by frisky (3.2/3.14)	id AA11169; Fri, 17 Mar 89 11:36:17 PSTFrom: franz!frisky!jkf@ucbarpa.Berkeley.EDU (John Foderaro)Return-Path: <frisky!jkf>Message-Id: <8903171936.AA11169@frisky>To: franz!ucbarpa!B.GP.CS.CMU.EDU!Scott.Fahlman@ucbarpa.Berkeley.EDUCc: franz!sail.stanford.edu!cl-cleanup@ucbarpa.Berkeley.EDUSubject: Re: DEFAULT-CASE In-Reply-To: Your message of Fri, 17 Mar 89 11:19:37 EST.             <8903171622.AA04031@ucbarpa.Berkeley.EDU> Date: Fri, 17 Mar 89 11:36:14 PSTScott,        I completely agree that all 'official' Common Lisp symbol names shouldbe use one case, and should there ever be a library of contributed programsonly those program that work in a case-insensitive mode should beaccepted.   When Common Lisp starts up it should be case-insensitivejust like it is now.>>  I think that this is a recipe for confusion>>  and major portability problems.  As soon as there is code around that>>  assumes case sensitivity, anyone who wants to use that code in conjunction>>  with code of his own has to go along with case sensitivity.  This is incorrect.   I've had ten years of experience with usingcode written in both case-sensitive and insensitive-modes in the same Lisp (first it was debugging Macsyma in Franz Lisp, and now it is working with programs like PCL in Common Lisp).   The only difficultiesI had were due to the default case of symbol names (and that is what my proposal is directed to fix).   Keep in mind that if you decide to live solely in the case-insensitive world you still haveaccess to all symbols, you may just have to type extra backslashes orvertical bars sometimes.  >>  We'll either have two incompatible software words within Common Lisp, >>  or it will drag us all through a major incompatible change we don't want.  I honestly don't know what you mean by this.  Perhaps you could describe some of your experiences or just some scenarios that you imagine might happen.   Keep in mind that there is already considerable freedom in how people write programs.   What if we started getting flooded with great programs written in French, or Spanish or Italian which many of us couldn't understand.  Should we mandate that for portability all programs shall be written in English (or perhaps Esperanto)?What if someone developed a loop macro that half the users loved and half despised?  Should we not include that macro in Common Lisp because people might start using it and then write code that half the users can't readwithout feeling ill? Remember, the only thing that will change if this and the READ-CASE-SENSITIVITY proposal pass is that the default case for symbolnames will be lower.   Absolutely nothing else about your world or the way you program need change.    If you want, we can privately correspond on these issues and then send a summary of what we've concluded to this mailing list.- john foderaro*start*00925 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 17-Mar-89 21:27:42 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 17 MAR 89 21:27:41 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 17 Mar 89  21:28:18 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 17 MAR 89 21:25:52 PSTDate: 17 Mar 89 21:25 PSTFrom: masinter.paSubject: Re: DEFAULT-CASEIn-reply-to: franz!frisky!jkf@ucbarpa.Berkeley.EDU (John Foderaro)'s message of Thu, 16 Mar 89 12:21:57 PSTTo: franz!frisky!jkf@ucbarpa.Berkeley.EDU (John Foderaro)cc: CL-Cleanup@sail.stanford.EDUMessage-ID: <890317-212552-3367@Xerox>I'm going to unilaterally declare that this issue is not a "cleanup".If you or someone else wants to raise it at X3J13, you should requesttime on the agenda to bring it up and discuss it.