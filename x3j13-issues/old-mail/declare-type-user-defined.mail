*start*00568 00024 US Date: 21 Oct 88 11:12 PDTFrom: masinter.paSubject: Re: Symbolics comments on the Characters subcommittee reportIn-reply-to: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>'s message of Fri, 7 Oct 88 11:42 EDTTo: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>cc: masinterhow about extending DECLARE so that(declare (type x y z))works for all valid type specifiers type, and making it "an error" to define "optimize", "special" etc. as type specifiers, or to define a word as both a type specifier and also a "declaration"?*start*02810 00024 US Return-Path: <Moon@STONY-BROOK.SCRC.Symbolics.COM>Received: from STONY-BROOK.SCRC.Symbolics.COM ([128.81.41.144]) by Xerox.COM ; 22 OCT 88 15:07:23 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 480357; Fri 21-Oct-88 21:18:48 EDTDate: Fri, 21 Oct 88 21:18 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Re: Symbolics comments on the Characters subcommittee reportTo: masinter.pacc: KMP@STONY-BROOK.SCRC.Symbolics.COMIn-Reply-To: <881021-111231-6103@Xerox>Message-ID: <19881022011826.0.MOON@EUPHRATES.SCRC.Symbolics.COM>Line-fold: No[Added KMP, I thought he might be interested]    Date: 21 Oct 88 11:12 PDT    From: masinter.pa@Xerox.COM    how about extending DECLARE so that    (declare (type x y z))    works for all valid type specifiers type, and making it "an error" to    define "optimize", "special" etc. as type specifiers, or to define a word    as both a type specifier and also a "declaration"?Declare would work for every type-specifier except for FUNCTION?  <:-)Does this apply only to atomic type-specifiers, or would lists be acceptabletoo?  I don't see any real reason to exclude lists.This is a reasonable suggestion, in that Common Lisp's current restrictionthat the language can define abbreviations for the TYPE declaration, butthe users cannot define such abbreviations, runs directly counter to myprinciple that in a properly designed system there is never a barrierbetween what the system can do and what the user can do (other thansecurity barriers against specific users, where appropriate).  So I'dlike to eliminate that restriction one way or the other.In Symbolics Genera, I found one case of a symbol that is used as both adeclaration name and a type name (then I stopped looking).  The reason isvery analogous to the use of LIST as both a function name and a type name.The name is the name of a structure and the declaration is a declarationthat says to create a structure of that type and associate it with thefunction.  Thus this would be an incompatible change for Symbolics andalthough the incompatibility is minor, we would probably oppose it forthat reason.Of course, I would prefer to make type declarations more cumbersomesyntactically, rather than less.  After all, no tasteful programmerwould ever write a type declaration directly in source code; when typedeclarations are needed at all, which is less often than people think,they should be generated by macros or otherwise automatically.  Sincetype declarations should almost never need to be written by hand, thereis no need to invent a special concise syntax for them.  I doubt myability to convince anyone else of the merits of this position, though.