*start*02100 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 20 OCT 88 18:30:04 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 20 Oct 88  18:28:03 PDTReceived: from KENNETH-WILLIAMS.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via INTERNET with SMTP id 479762; 20 Oct 88 21:27:58 EDTDate: Thu, 20 Oct 88 21:25 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: MAKE-STRING-FILL-POINTER (Version 1)To: CL-Cleanup@sail.stanford.eduMessage-ID: <19881021012549.3.MOON@KENNETH-WILLIAMS.SCRC.Symbolics.COM>Issue:         MAKE-STRING-FILL-POINTERReferences:    CLtL p.302Related issues: none that I know ofCategory:      ADDITIONEdit history:  Version 1, 20-Oct-88, by Moon, for discussionProblem description:  Once again I lost because I expected to be able to use MAKE-STRING  to create a string with a fill-pointer, and I couldn't.  I had to use  a more long-winded MAKE-ARRAY call instead.Proposal (MAKE-STRING-FILL-POINTER:ALLOW):  Give MAKE-STRING a :FILL-POINTER argument, with the same syntax and  semantics as the :FILL-POINTER argument to MAKE-ARRAY.Examples:  (make-string 80 :fill-pointer 0)Test Cases:  See examples.Rationale:  I frequently expect it to be allowed and am surprised when it's not.Current practice:  I know of no implementations that support this.Cost to Implementors:  5 cents.Cost to Users:  noneCost of non-adoption:  nonePerformance impact:  noneBenefits:  Increased language consistency.Esthetics:  Increased language consistency.Discussion:Other MAKE-ARRAY options that one might want to allow, but arenot already allowed or proposed, are :INITIAL-CONTENTS, :ADJUSTABLE,:DISPLACED-TO, and :DISPLACED-INDEX-OFFSET.  A strong case could bemade for :ADJUSTABLE (I use an implementation where it doesn't matter,so I don't care about that), I don't think anyone would care about the other three.*start*00841 00024 US Date: 21 Oct 88 11:42 PDTFrom: masinter.paSubject: Re: Issue: MAKE-STRING-FILL-POINTER (Version 1)In-reply-to: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>'s message of Thu, 20 Oct 88 21:25 EDTTo: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>cc: masinterThis interacts with the character proposal, where suddenly the :element-type of a string is relevant. I'd support a proposal that made make-string equivalent to make-array except that:(a) the first argument must be a non-negative integer(b) :element-type defaults to character (or string-char pending the character proposal), and if given must be a sub-type of character.However, I think we must stick to the policy that new issuses should be handled after all of the old ones, so this one must of necessity go to the end of the queue.*start*00969 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 10 NOV 88 16:10:07 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 10 Nov 88  16:07:37 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 10 NOV 88 15:52:19 PSTDate: 10 Nov 88 15:52 PSTFrom: masinter.paSubject: Re: Issue: MAKE-STRING-FILL-POINTER (Version 1)In-reply-to: Jon L White <jonl@lucid.com>'s message of Thu, 10 Nov 88 15:13:01 PSTTo: Jon L White <jonl@lucid.com>cc: Moon@STONY-BROOK.SCRC.Symbolics.COM, CL-Cleanup@sail.stanford.eduMessage-ID: <881110-155219-5804@Xerox>Sigh, if you read carefully the character proposal you will see that itproposes to extend the type STRING to be any vector whose element type is a*subtype* of CHARACTER, which and would require MAKE-STRING to take an:element-type keyword.Your make-string definition is buggy, of course.*start*02198 00024 USaReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 10 NOV 88 15:20:00 PSTReceived: from lucid.com by SAIL.Stanford.EDU with TCP; 10 Nov 88  15:15:40 PSTReceived: from bhopal ([192.9.200.13]) by heavens-gate.lucid.com id AA04133g; Thu, 10 Nov 88 15:14:21 PSTReceived: by bhopal id AA07665g; Thu, 10 Nov 88 15:13:01 PSTDate: Thu, 10 Nov 88 15:13:01 PSTFrom: Jon L White <jonl@lucid.com>Message-Id: <8811102313.AA07665@bhopal>To: Moon@STONY-BROOK.SCRC.Symbolics.COMCc: CL-Cleanup@sail.stanford.eduIn-Reply-To: David A. Moon's message of Thu, 20 Oct 88 21:25 EDT <19881021012549.3.MOON@KENNETH-WILLIAMS.SCRC.Symbolics.COM>Subject: Issue: MAKE-STRING-FILL-POINTER (Version 1)This proposal isn't merely an ADDITION -- it is an incompatible CHANGE,since CLtL explicitly states that the output of MAKE-STRING is a simplestring.If we are to give up that semantics, then a separate function for MAKE-STRING makes sense only in two circumstances:  (1) when STRINGs are fundamentally different from ARRAYS; or  (2) when it is merely a "shorthand" syntax.Since there has been no attempt to retrench strings away from their underlying implementation as arrays, then I suggest we either leave MAKE-STRING alone, or complete the (incompatible) "shorthand" extensionas follows:  (defun make-string (size &key :initial-element :initial-contents                                :adjustable  	 :fill-pointer                                 :displaced-to    :displaced-index-offset)    (check-type size integer)    (make-array size :element-type           'string-char                      :initial-element        initial-element                      :initial-contents       initial-contents                     :adjustable             adjustable                      :fill-pointer           fill-pointer                     :displaced-to           displaced-to                     :displaced-index-offset displaced-index-offset))[When applicable, of course, compiler optimizers could convert MAKE-STRING calls into something more efficient.]-- JonL --*start*01344 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 10 NOV 88 19:16:01 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 10 Nov 88  19:13:29 PSTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 490905; Thu 10-Nov-88 22:13:08 ESTDate: Thu, 10 Nov 88 22:12 ESTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: MAKE-STRING-FILL-POINTER (Version 1)To: Jon L White <jonl@lucid.com>cc: CL-Cleanup@sail.stanford.eduIn-Reply-To: <8811102313.AA07665@bhopal>Message-ID: <19881111031257.6.MOON@EUPHRATES.SCRC.Symbolics.COM>    Date: Thu, 10 Nov 88 15:13:01 PST    From: Jon L White <jonl@lucid.com>    This proposal isn't merely an ADDITION -- it is an incompatible CHANGE,    since CLtL explicitly states that the output of MAKE-STRING is a simple    string.It is not an incompatible change.  No portable program will stop workingon account of this change, because no portable program will use the newlyadded feature.  I have no comment on the rest of your comments and don'tcare much about this issue, since we are way past the point of addinguseful things to Common Lisp.*start*02225 00024 US Return-Path: <jonl@lucid.com>Received: from lucid.com ([192.26.25.1]) by Xerox.COM ; 10 NOV 88 20:51:44 PSTReceived: from bhopal ([192.9.200.13]) by heavens-gate.lucid.com id AA04437g; Thu, 10 Nov 88 20:50:08 PSTReceived: by bhopal id AA12067g; Thu, 10 Nov 88 20:48:49 PSTDate: Thu, 10 Nov 88 20:48:49 PSTFrom: Jon L White <jonl@lucid.com>Message-Id: <8811110448.AA12067@bhopal>To: masinter.paCc: Moon@STONY-BROOK.SCRC.Symbolics.COM, CL-Cleanup@sail.stanford.eduIn-Reply-To: masinter.pa@Xerox.COM's message of 10 Nov 88 15:52 PST <881110-155219-5804@Xerox>Subject: Issue: MAKE-STRING-FILL-POINTER (Version 1)re:  . . .the character proposal ... would require MAKE-STRING to take an    :element-type keyword.I don't see that this is absolutely necessary, since a default type could certainly be satisfactory for MAKE-STRING; you could use MAKE-ARRAY forcreating non-default types and features.  In the current situation, :element-type STRING-CHAR is what defines a string.However, if we are to extend MAKE-STRING, what's the point of doing so unless it becomes capable of accepting all the same keyword arguments as MAKE-ARRAY?  It's only a shorthand for defaulting :element-type.That's the point of the sample code [which was not intended to be run so please forgive the typos and neglect of the "suppliedp" question on initial element/contents.]  One can accommodate varieties of strings by overriding the default for an :element-type argument.    (defun make-string (size &key (element-type   'string-char)                                initial-element initial-contents                                adjustable  	fill-pointer                                 displaced-to    displaced-index-offset)    (check-type size integer)    (make-array size :element-type           element-type                     :initial-element        initial-element                     :initial-contents       initial-contents                     :adjustable             adjustable                      :fill-pointer           fill-pointer                     :displaced-to           displaced-to                     :displaced-index-offset displaced-index-offset))-- JonL --*start*01835 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 10 NOV 88 21:16:43 PSTReceived: from lucid.com by SAIL.Stanford.EDU with TCP; 10 Nov 88  21:15:17 PSTReceived: from bhopal ([192.9.200.13]) by heavens-gate.lucid.com id AA04447g; Thu, 10 Nov 88 21:14:05 PSTReceived: by bhopal id AA12099g; Thu, 10 Nov 88 21:12:46 PSTDate: Thu, 10 Nov 88 21:12:46 PSTFrom: Jon L White <jonl@lucid.com>Message-Id: <8811110512.AA12099@bhopal>To: Moon@STONY-BROOK.SCRC.Symbolics.COMCc: CL-Cleanup@sail.stanford.eduIn-Reply-To: David A. Moon's message of Thu, 10 Nov 88 22:12 EST <19881111031257.6.MOON@EUPHRATES.SCRC.Symbolics.COM>Subject: Issue: MAKE-STRING-FILL-POINTER (Version 1)re:     [JonL] This proposal isn't merely an ADDITION -- it is an incompatible 	CHANGE, since CLtL explicitly states that the output of MAKE-STRING is	a simple string.    [moon] It is not an incompatible change.  ... because no [currently?]    portable program will use the newly added feature.  Sorry, but it is an incompatiblity visible to any code-analysis system that does type-inferencing.  Those programs can "know" from CLtL thatMAKE-STRING returns a SIMPLE-STRING.For example, Lucid's compiler contains detailed information about the specified argument types and function result types, and uses thatinformation to do some type-inferencing.  Furthermore, as Lucid 2.1 and3.0 release documentation makes clear, AREF can only be open-coded on SIMPLE-ARRAYs; so the distinction _can_ be critically important.Now, I don't claim that Lucid's type-inferencing is perfect in all circumstances; but it does matter to us when incompatible changesare made to the type specifications of standard functions.-- JonL --*start*02884 00024 USfGV-Info: Moon@STONY-BROOK.SCRC.Symbolics.COM at 16-Mar-89 13:41:43 from AGReturn-Path: <Moon@STONY-BROOK.SCRC.Symbolics.COM>Received: from STONY-BROOK.SCRC.Symbolics.COM ([128.81.41.144]) by Xerox.COM ; 16 MAR 89 13:41:35 PSTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 557698; Wed 15-Mar-89 14:45:08 ESTDate: Wed, 15 Mar 89 14:45 ESTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: MAKE-STRING-FILL-POINTER (Version 1)To: Masinter.pacc: CL-Cleanup@sail.stanford.eduIn-Reply-To: <19881021012549.3.MOON@KENNETH-WILLIAMS.SCRC.Symbolics.COM>Message-ID: <19890315194500.9.MOON@EUPHRATES.SCRC.Symbolics.COM>Line-fold: NoYour status file says:  * MAKE-STRING-FILL-POINTER  Synopsis: extend MAKE-STRING to take a fill-pointer?  Version 1, 20-Oct-88  Comments: extend to take other keywords? MAKE-STRING should return	  simple string always? Interaction with character proposal  Status: awaiting new versionBut I don't have any record of any discussion that would warranta new version.  Also I don't believe the comments quoted aboveare relevant to this issue.  If you have any discussion I shouldsee, and suggestions for a new version, could you forward them tome?  If you send me that I'll make a new version.  Otherwise Ithink the old version is ready to vote on, up-or-down.Date: Thu, 20 Oct 88 21:25 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Issue:         MAKE-STRING-FILL-POINTERReferences:    CLtL p.302Related issues: none that I know ofCategory:      ADDITIONEdit history:  Version 1, 20-Oct-88, by Moon, for discussionProblem description:  Once again I lost because I expected to be able to use MAKE-STRING  to create a string with a fill-pointer, and I couldn't.  I had to use  a more long-winded MAKE-ARRAY call instead.Proposal (MAKE-STRING-FILL-POINTER:ALLOW):  Give MAKE-STRING a :FILL-POINTER argument, with the same syntax and  semantics as the :FILL-POINTER argument to MAKE-ARRAY.Examples:  (make-string 80 :fill-pointer 0)Test Cases:  See examples.Rationale:  I frequently expect it to be allowed and am surprised when it's not.Current practice:  I know of no implementations that support this.Cost to Implementors:  5 cents.Cost to Users:  noneCost of non-adoption:  nonePerformance impact:  noneBenefits:  Increased language consistency.Esthetics:  Increased language consistency.Discussion:Other MAKE-ARRAY options that one might want to allow, but arenot already allowed or proposed, are :INITIAL-CONTENTS, :ADJUSTABLE,:DISPLACED-TO, and :DISPLACED-INDEX-OFFSET.  A strong case could bemade for :ADJUSTABLE (I use an implementation where it doesn't matter,so I don't care about that), I don't think anyone would care about the other three.*start*03030 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 15-Mar-89 11:47:54 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 15 MAR 89 11:47:53 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 15 Mar 89  11:47:34 PSTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 557698; Wed 15-Mar-89 14:45:08 ESTDate: Wed, 15 Mar 89 14:45 ESTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: MAKE-STRING-FILL-POINTER (Version 1)To: Masinter.pacc: CL-Cleanup@sail.stanford.eduIn-Reply-To: <19881021012549.3.MOON@KENNETH-WILLIAMS.SCRC.Symbolics.COM>Message-ID: <19890315194500.9.MOON@EUPHRATES.SCRC.Symbolics.COM>Line-fold: NoYour status file says:  * MAKE-STRING-FILL-POINTER  Synopsis: extend MAKE-STRING to take a fill-pointer?  Version 1, 20-Oct-88  Comments: extend to take other keywords? MAKE-STRING should return	  simple string always? Interaction with character proposal  Status: awaiting new versionBut I don't have any record of any discussion that would warranta new version.  Also I don't believe the comments quoted aboveare relevant to this issue.  If you have any discussion I shouldsee, and suggestions for a new version, could you forward them tome?  If you send me that I'll make a new version.  Otherwise Ithink the old version is ready to vote on, up-or-down.Date: Thu, 20 Oct 88 21:25 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Issue:         MAKE-STRING-FILL-POINTERReferences:    CLtL p.302Related issues: none that I know ofCategory:      ADDITIONEdit history:  Version 1, 20-Oct-88, by Moon, for discussionProblem description:  Once again I lost because I expected to be able to use MAKE-STRING  to create a string with a fill-pointer, and I couldn't.  I had to use  a more long-winded MAKE-ARRAY call instead.Proposal (MAKE-STRING-FILL-POINTER:ALLOW):  Give MAKE-STRING a :FILL-POINTER argument, with the same syntax and  semantics as the :FILL-POINTER argument to MAKE-ARRAY.Examples:  (make-string 80 :fill-pointer 0)Test Cases:  See examples.Rationale:  I frequently expect it to be allowed and am surprised when it's not.Current practice:  I know of no implementations that support this.Cost to Implementors:  5 cents.Cost to Users:  noneCost of non-adoption:  nonePerformance impact:  noneBenefits:  Increased language consistency.Esthetics:  Increased language consistency.Discussion:Other MAKE-ARRAY options that one might want to allow, but arenot already allowed or proposed, are :INITIAL-CONTENTS, :ADJUSTABLE,:DISPLACED-TO, and :DISPLACED-INDEX-OFFSET.  A strong case could bemade for :ADJUSTABLE (I use an implementation where it doesn't matter,so I don't care about that), I don't think anyone would care about the other three.*start*02137 00024 US GV-Info: X3J13-mailer@SAIL.Stanford.EDU at 16-Mar-89 17:31:40 from AGReturn-Path: <X3J13-mailer@SAIL.Stanford.EDU>Received: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 16 MAR 89 17:31:28 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 16 Mar 89  17:25:54 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 16 MAR 89 16:55:22 PSTDate: 16 Mar 89 16:49 PSTFrom: masinter.paSubject: Issue: MAKE-STRING-FILL-POINTER (Version 1)to: X3J13@sail.stanford.eduline-fold: NOMessage-ID: <890316-165522-6151@Xerox>The  discussion on this issue pointed out that it wouldextend the range of MAKE-STRING so that it was nolonger restricted to return a SIMPLE-STRING, whichmight break some type-inference.!Issue:         MAKE-STRING-FILL-POINTERReferences:    CLtL p.302Related issues: none that I know ofCategory:      ADDITIONEdit history:  Version 1, 20-Oct-88, by Moon, for discussionProblem description:  Once again I lost because I expected to be able to use MAKE-STRING  to create a string with a fill-pointer, and I couldn't.  I had to use  a more long-winded MAKE-ARRAY call instead.Proposal (MAKE-STRING-FILL-POINTER:ALLOW):  Give MAKE-STRING a :FILL-POINTER argument, with the same syntax and  semantics as the :FILL-POINTER argument to MAKE-ARRAY.Examples:  (make-string 80 :fill-pointer 0)Test Cases:  See examples.Rationale:  I frequently expect it to be allowed and am surprised when it's not.Current practice:  I know of no implementations that support this.Cost to Implementors:  5 cents.Cost to Users:  noneCost of non-adoption:  nonePerformance impact:  noneBenefits:  Increased language consistency.Esthetics:  Increased language consistency.Discussion:Other MAKE-ARRAY options that one might want to allow, but arenot already allowed or proposed, are :INITIAL-CONTENTS, :ADJUSTABLE,:DISPLACED-TO, and :DISPLACED-INDEX-OFFSET.  A strong case could bemade for :ADJUSTABLE (I use an implementation where it doesn't matter,so I don't care about that), I don't think anyone would care about the other three.*start*01170 00024 US Date:  4 Apr 89 12:31 PDTSender: CL-Cleanup-mailer%SAIL.Stanford:EDU:XeroxFrom: KMP%STONY-BROOK.SCRC.Symbolics:COM:XeroxSubject: Issue: MAKE-STRING-FILL-POINTERTo: CL-Cleanup%SAIL.Stanford:EDU:XeroxGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: MAKE-STRING-FILL-POINTERTo: CL-Cleanup@SAIL.Stanford.EDUReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 04 APR 89 12:23:15 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 4 Apr 89  12:21:38 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 571212; Tue 4-Apr-89 15:21:32 EDTOriginal-Date: Tue, 4 Apr 89 15:21 EDTMessage-ID: <890404152107.6.KMP@BOBOLINK.SCRC.Symbolics.COM>GVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVSomeone (GZ?) objected that this would change the result type from MAKE-STRINGfrom being a simple-string, and would break type inferencing code.It was agreed that this should be withdrawn.