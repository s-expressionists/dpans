*start*02951 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 23-Mar-89 22:36:08 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 23 MAR 89 22:34:08 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 23 Mar 89  22:32:44 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 564358; Fri 24-Mar-89 01:32:03 ESTDate: Fri, 24 Mar 89 01:31 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: DIRECTORY-DOES-TOO-MUCHTo: jlm@lucid.comcc: CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <8903232306.AA26773@pitney-bowes>Message-ID: <890324013136.9.KMP@BOBOLINK.SCRC.Symbolics.COM>I don't oppose your proposal, but I have some non-preemptive remarksthat you might want to consider factoring into a revision if you havetime to pursue the issue. (I really don't know how much I believe thesesuggestions, but they occurred to me and I thought I would share them.)Criticisms: - I think the name DIRECTORY-GENERATOR is a bit long   and not startlingly perspicuous. - I think that returning a function means that some common   cases will seem unduly complicated because of the need to   FUNCALL the result to turn it into a useable form.These are not fatal flaws, but they drive the following suggestions:You might want an interface like (DIRECTORY-1 pathname) => pathname-or-nil, function-or-nil[Actually, it's clear that first return value has to be NIL. The second return value doesn't have to be NIL -- it could be a function which returns NIL when called, but people might want to optimize that case.]The name is by analogy with MACROEXPAND-1. You'd get a useful primary value and some more-p information in the secondary valuethat you could discard if you didn't want.The really nice feature of the data flow is, of course, that you candirectly use the single return value without further fuss or funcall.You might even want to allow it to taken an optional argument sayingyou didn't want the second return value (i.e., that NIL was ok) toavoid consing. (DIRECTORY-1 pathname NIL) => pathname-or-nil, nilAlternatively, or additionally, you might want to think aboutextending DIRECTORY to take a keyword requesting the indicatedfunctionality. e.g.,  (DIRECTORY pathname :COUNT 1)might want to return just the first pathname, presumably as a listto be compatible with the normal style of DIRECTORY, and to generalizenicely to :COUNT arguments like 0 or 2.If this were an alternative to DIRECTORY-1, it could also return asecond return value which was the stepper function (or NIL if none).If this were just in addition to DIRECTORY-1, then it could arguablynot bother with the second return value and make you call DIRECTORY-1if you needed that much power.*start*01888 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 24-Mar-89 07:46:22 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 24 MAR 89 07:46:16 PSTReceived: from RELAY.CS.NET by SAIL.Stanford.EDU with TCP; 24 Mar 89  07:44:59 PSTReceived: from relay2.cs.net by RELAY.CS.NET id aa08010; 24 Mar 89 10:29 ESTReceived: from draper.com by RELAY.CS.NET id aa00637; 24 Mar 89 10:25 ESTDate: Fri, 24 Mar 89 09:17 ESTFrom: "Steve Bacher (Batchman)" <SEB1525@draper.com>Subject: Re: Issue: DIRECTORY-DOES-TOO-MUCHTo: cl-cleanup@SAIL.STANFORD.EDUX-VMS-To: CL-CLEANUP,SEB1525> Date: Fri, 24 Mar 89 01:31 EST> From: Kent M Pitman <KMP@stony-brook.scrc.symbolics.COM>> Subject: Issue: DIRECTORY-DOES-TOO-MUCH> To: jlm@lucid.COM>> You might want an interface like>>  (DIRECTORY-1 pathname) => pathname-or-nil, function-or-nil>> [Actually, it's clear that first return value has to be NIL.>  The second return value doesn't have to be NIL -- it could be>  a function which returns NIL when called, but people might want>  to optimize that case.]>[...]>> You might even want to allow it to taken an optional argument saying> you didn't want the second return value (i.e., that NIL was ok) to> avoid consing.>>  (DIRECTORY-1 pathname NIL) => pathname-or-nil, nilNow that's a slippery slope.  If we start allowing functions to take anoptional argument telling them how many values {not} to return, where dowe stop?  In any case, it's the job of the compiler and its many optimizers,in most cases, to determine when and if it is possible/feasible/desirable togenerate code that avoids returning unused values.   Plus, which is more painful - a few extra conses, or the directory lookupin the first place?  (Answer: implementation-dependent.)*start*04299 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 23-Mar-89 15:22:32 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 23 MAR 89 15:19:41 PSTReceived: from lucid.com by SAIL.Stanford.EDU with TCP; 23 Mar 89  15:13:59 PSTReceived: from pitney-bowes ([192.9.200.50]) by heavens-gate.lucid.com id AA03822g; Thu, 23 Mar 89 15:08:24 PSTReceived: by pitney-bowes id AA26773g; Thu, 23 Mar 89 15:06:47 PSTDate: Thu, 23 Mar 89 15:06:47 PSTFrom: Jim McDonald <jlm@lucid.com>Message-Id: <8903232306.AA26773@pitney-bowes>To: CL-Cleanup@SAIL.Stanford.eduSubject: Issue: DIRECTORY-DOES-TOO-MUCHWhile thinking about pathnames, I was reminded of this possible smalladdition:Issue:          DIRECTORY-DOES-TOO-MUCHForum:	        CleanupReferences:     DIRECTORY (p427)Related issues: NONECategory:       ADDITIONEdit history:   14-Mar-89, Version 1 by James L. McDonaldStatus:         For Internal DiscussionProblem description:  According to CLtL, DIRECTORY returns a list of truenames, "one for  each file in the file system that matches the given pathname".  The problem is that sometimes one wants the truenames for just one  or a few of the files that match, or one wants to interleave  processing of each file as it is found, to minimize the start-up  time when processing large directories. Proposal (DIRECTORY-DOES-TOO-MUCH:ADD-GENERATOR):  Add the function DIRECTORY-GENERATOR which would accept the same  argument spectrum as DIRECTORY and return a function which, when  successively applied, would yield each of truenames in the list  of truenames that DIRECTORY would have returned, and then NIL to  indicate no more files are available. Examples:  This example illustrates how wasted effort could be avoided:  (DEFUN FIND-DEFINING-FILE (MUMBLE)    (LET ((FN (DIRECTORY-GENERATOR "/moby-dir/*.lisp")))      (DO ((TRUENAME (FUNCALL FN) (FUNCALL FN)))          ((NULL TRUENAME)           NIL)        (WHEN (FILE-DEFINES-P TRUENAME MUMBLE)          (RETURN TRUENAME)))))  This example shows how a system with some distributed processing   ability might interleave file accessing and processing:  (DEFUN COMPILE-WORLD ()    (LET ((FN (DIRECTORY-GENERATOR "/moby-dir/*.lisp")))      (DO ((TRUENAME (FUNCALL FN) (FUNCALL FN)))          ((NULL TRUENAME)           NIL)        (INITIATE-DISTRIBUTED-COMPILATION TRUENAME))))Test Cases:  This should return true for all arguments, assuming that during  the execution of the test files are not added to or removed from  the file-system being accessed.  (DEFUN FOO (X)    (OR (NOT (PATHNAMEP X))        (NULL (SET-EXCLUSIVE-OR ; why doesn't CL have SET-EQUAL ?                 (DIRECTORY X)                 (LET ((FN (DIRECTORY-GENERATOR X))         	       (DIR '()))                   (DO ((TRUENAME (FUNCALL FN) (FUNCALL FN)))                       ((NULL TRUENAME)			(REVERSE DIR))                     (PUSH TRUENAME DIR)))))))Rationale:  This seems simple, useful, and uncontroversial.  For many file   systems, it provides a CL primitive that maps more directly to  underlying OS primitives.  Current practice:  Lucid Common Lisp has always implemented DIRECTORY in much this way.Cost to Implementors:  Minimal.  Any port could come into compliance by defining  DIRECTORY-GENERATOR as:  (DEFUN DIRECTORY-GENERATOR (X)    (LET ((DIR (DIRECTORY X)))      #'(LAMBDA () (POP DIR))))  Implementing it more directly is probably either a fairly small task  or clearly impossible.  Either way, not much work.Cost to Users:  None.Cost of non-adoption:  DIRECTORY continues to be needlessly inefficient in some cases.Performance impact:  Some programs may run faster or reduce the maximum delay visible  to users. Benefits:  See performance impact.Esthetics:  Minor.Discussion:  The test case presumes truenames are generated in the same order  that DIRECTORY now lists them.  This is a minor restriction but  would fail for systems that explicitly sort their results or file  systems that randomly reorder directories (e.g. on every access).  Set equivalence is probably just as good a test if anyone cares.  