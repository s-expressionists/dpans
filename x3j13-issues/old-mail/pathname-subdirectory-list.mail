*start*03270 00024 USfReturn-Path: <@SAIL.STANFORD.EDU:Masinter.pa@Xerox.COM>Received: from SAIL.STANFORD.EDU by Xerox.COM ; 15 JUL 87 13:32:06 PDTReceived: from XEROX.COM by SAIL.STANFORD.EDU with TCP; 15 Jul 87  13:29:01 PDTReceived: from Salvador.ms by ArpaGateway.ms ; 15 JUL 87 13:27:05 PDTDate: 15 Jul 87 13:24 PDTFrom: Masinter.paSubject: Issue: Pathname-subdirectory-listTo: cl-cleanup@sail.stanford.educc: Ghenis.pasaMessage-ID: <870715-132705-3165@Xerox>This arrived in my mailbox before the X3J13 meeting. While I suspectthere may be some alternative proposals, and perhaps some otherimportant related issues, this seems like a good way to introduce thetopic.!ISSUE: (PATHNAME-SUBDIRECTORY-LIST)REFERENCES: CLtL pages 409 - 418CATEGORY: ADDITION  EDIT HISTORY: Version 1 by Ghenis.pasa@Xerox.com, 06/18/87PROBLEM DESCRIPTION:It is impossible to write PORTABLE code that can produce a pathnamebased on directory plus SUBDIRECTORY information. If the directory usedis not a root, then the string provided must contain OS-specificseparators. This defeats the purpose of having an abstraction likepathname. Specifying a subdirectory RELATIVE to the current default ispossible but also inconvenient and non-portable.This problem is even worse for programs running on machines on a networkthat can retrieve files from multiple hosts, each using a different OSand thus a different subdirectory delimiter.PROPOSAL (PATHNAME-SUBDIRECTORY-LIST:ALLOW): Add a :SUBDIRECTORIES field to pathnames, to store a list of strings.The string form of a pathname can be obtained by using the appropriateOS-specific separator and end-delimiters.Require global variables called LISP:*HOST-OS-ALIST* andLISP:*DEFAULT-OS* to provide the information needed to assemblenamestrings correctlyTEST CASE (desired behavior): 	>(defparameter LISP:*HOST-OS-ALIST*		'(("vmsvax" . "vms") ("unixvax" . "unix"))	>(defparameter LISP:*DEFAULT-OS* "msdos")	>(defvar vmspath		(make-pathname :host "vmsvax"		 			:directory "smith"		 			:sudirectories '("lisp") 					:name "test"		 			:type "lsp"))	>(defvar localpath 		(make-pathname :directory "smith" 								:sudirectories '("lisp") 					:name "test" 					:type "lsp"))	>(namestring vmspath)	"{vmsvax}[smith.lisp]test.lsp"	>(namestring localpath)	"c:\smith\lisp\test.lsp"RATIONALE:Pathnames are an abstraction meant to deal with the common notions infile systems. Subdirectories exist in most operating systems. CommonLisp must provide a standard way of dealing with subdirectories forpathnames to be truly useful.CURRENT PRACTICE:CLtL acknowledges this problem and declares it to be a system dependentissue.ADOPTION COST:This should be a simple addition to implement.BENEFITS: Adding a :SUBDIRECTORIES field to pathnames would make the abstractioncompletely system-independent. Relative pathnames could be triviallyspecified by pathnames lacking a :DIRECTORY field.CONVERSION COST: This is an upwards-compatible addition.AESTHETICS:Adding a :SUBDIRECTORIES field to pathnames would make the abstractioncompletely system-independent.DISCUSSION: >>Additional arguments, discussions, endorsements,  testimonials, etc. should go here.<<*start*03800 00024 USfReturn-Path: <Moon@STONY-BROOK.SCRC.Symbolics.COM>Received: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by Xerox.COM ; 16 JUL 87 17:15:01 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 194405; Thu 16-Jul-87 20:14:29 EDTDate: Thu, 16 Jul 87 20:14 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: Pathname-subdirectory-listTo: Masinter.pa, Ghenis.pasacc: cl-cleanup@sail.stanford.eduIn-Reply-To: <870715-132705-3165@Xerox>Message-ID: <870716201416.0.MOON@EUPHRATES.SCRC.Symbolics.COM>Line-fold: No    Date: 15 Jul 87 13:24 PDT    From: Masinter.pa@Xerox.COM    PROBLEM DESCRIPTION:    It is impossible to write PORTABLE code that can produce a pathname    based on directory plus SUBDIRECTORY information. If the directory used    is not a root, then the string provided must contain OS-specific    separators. This defeats the purpose of having an abstraction like    pathname. Specifying a subdirectory RELATIVE to the current default is    possible but also inconvenient and non-portable.    This problem is even worse for programs running on machines on a network    that can retrieve files from multiple hosts, each using a different OS    and thus a different subdirectory delimiter.I agree with the problem description.  We've been dealing with heterogeneousnetwork for quite some time and have run into the same thing.    PROPOSAL (PATHNAME-SUBDIRECTORY-LIST:ALLOW):     Add a :SUBDIRECTORIES field to pathnames, to store a list of strings.Adding a new field as a way of solving this problem doesn't make sense.Subdirectories are a structuring of the existing directory field, they arenot a new -independent- aspect of a pathname.The solution to this problem that Symbolics has used for years worksquite well.  The directory is a structured field whose value is returnedas a list of strings, one string for each subdirectory level.  Inaddition to strings, in our system we allow certain keywords in thelist, enumerated below.  Note that this general approach is the solutionsuggested by CLtL itself, page 412 about 3/4 of the way down the page;thus the only reason to change the language would be if we want to forceall implementations to use the same representation of structureddirectories, which might be difficult if some implementation uses astrange file system with a directory feature we haven't thought of.When constructing a pathname, either a list of strings, or a singlestring containing host-dependent delimiters, is accepted.  To retrieve astring containing host-dependent delimiters, the existingDIRECTORY-NAMESTRING function is used.In case those keywords aren't self-evident, here are some examples. Vixen is a Unix, presumably everyone is familiar with Unix pathnamesyntax.(make-pathname :host "vixen"	       :directory '("foo" "bar")) => #P"VIXEN:/foo/bar/"(make-pathname :host "vixen"	       :directory '(:relative "bar")) => #P"VIXEN:bar/"(make-pathname :host "vixen"	       :directory '(:relative :up "bar")) => #P"VIXEN:../bar/"(make-pathname :host "vixen"	       :directory '(:relative :up :up "bar")) => #P"VIXEN:../../bar/"(make-pathname :host "vixen"	       :directory '("foo" :wild "bar")) => #P"VIXEN:/foo/*/bar/"I can't show you :wild-inferiors on Unix, because Unix is too simpleand elegant to have such useful features, so I'll use VMS:(make-pathname :host "dumbo"	       :directory '("foo" :wild "bar")) => #P"DUMBO:[foo.*.bar]"(make-pathname :host "dumbo"	       :directory '("foo" :wild-inferiors "bar")) => #P"DUMBO:[foo...bar]"The name of the VMS host is not intended to be particularly pejorative, all of ourVaxes are named after flying critters.*start*02296 00024 USaReturn-Path: <@SAIL.Stanford.EDU:EWeaver.pa@Xerox.COM>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU by Xerox.COM ; 26 OCT 87 09:41:59 PSTReceived: from XEROX.COM by SAIL.STANFORD.EDU with TCP; 26 Oct 87  09:39:21 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 26 OCT 87 09:39:22 PSTDate: Mon, 26 Oct 87 09:35 PSTFrom: EWeaver.paSubject: [Moon: Issue: Pathname-subdirectory-list]To: Masinter.pa, Ghenis.pasacc: LispCore^.PA, moon@stony-brook.scrc.symbolics.com, cl-cleanup@sail.stanford.edu, ibuki!dbp@labrea.stanford.eduFcc: BD:>EWeaver>mail.babylIn-Reply-To: The message of 23 Oct 87 15:37 PDT from Masinter.paMessage-ID: <871026093537.5.EWEAVER@DUKE.isl.parc.xerox.com>Line-fold: no    Date: 23 Oct 87 15:37 PDT    From: Masinter.pa	 ----- Begin Forwarded Messages -----    Date: Thu, 16 Jul 87 20:14 EDT    From: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>    Subject: Issue: Pathname-subdirectory-list	Date: 15 Jul 87 13:24 PDT	From: Masinter.pa@Xerox.COM	PROBLEM DESCRIPTION:	It is impossible to write PORTABLE code that can produce a pathname	based on directory plus SUBDIRECTORY information. If the directory used	is not a root, then the string provided must contain OS-specific	separators. This defeats the purpose of having an abstraction like	pathname. Specifying a subdirectory RELATIVE to the current default is	possible but also inconvenient and non-portable.	This problem is even worse for programs running on machines on a network	that can retrieve files from multiple hosts, each using a different OS	and thus a different subdirectory delimiter.    The solution to this problem that Symbolics has used for years works    quite well.  The directory is a structured field whose value is returned    as a list of strings, one string for each subdirectory level.  In    addition to strings, in our system we allow certain keywords in the    list, enumerated below....I might add that Kyoto / Ibuki Common Lisp uses this system too, and itmakes it quite simple to write code which ports to implementations whichrun on other file systems.  One notable case was a test suite which waswritten on Unix and moved to VMS with no trouble.I highly recommend this technique.-------*start*00499 00024 US Date: 26 Oct 87 14:51 PDTFrom: Masinter.paSubject: Re: [Moon: Issue: Pathname-subdirectory-list]In-reply-to: EWeaver.pa's message of Mon, 26 Oct 87 09:35 PSTTo: EWeaver.pacc: Masinter.pa, Ghenis.pasa, LispCore^.PAI had thought this wasn't a "live" issue for CL-CLEANUP although it might be a good AR. On further reflection, it does seem like it might make it into the "specification" as an example. I'll try to write that up and send it to CL-CLEANUP.Thanks,Larry*start*01165 00024 USfReturn-Path: <@SAIL.Stanford.EDU:Masinter.pa@Xerox.COM>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU by Xerox.COM ; 26 OCT 87 14:16:37 PSTReceived: from XEROX.COM by SAIL.STANFORD.EDU with TCP; 26 Oct 87  14:13:22 PSTReceived: from Cabernet.ms by ArpaGateway.ms ; 26 OCT 87 14:08:46 PSTDate: 26 Oct 87 14:55 PDTFrom: Masinter.paSubject: Issue: PATHNAME-SUBDIRECTORY-LISTIn-reply-to: EWeaver.pa's message of Mon, 26 Oct 87 09:35 PSTTo: cl-cleanup@sail.stanford.educc: ibuki!dbp@labrea.stanford.eduMessage-ID: <871026-140846-2061@Xerox>I had marked the issue PATHNAME-SUBDIRECTORY-LIST as withdrawn; Ithought Moon's point ("the only reason to change the language would beif we want to force all implementations to use the same representationof structured directories, which might be difficult if someimplementation uses a strange file system with a directory feature wehaven't thought of.") was compelling.However, I think there is some advantage to encouraging some consistencyof practice for those systems which do have subdirectory structures... I'd recommend we postpone this issue for now...*start*08491 00024 US Date: 10 Jun 88 02:29 PDTFrom: Masinter.paSubject: [Masinter.pa: Issue: Pathname-subdirectory-list]To: cl-cleanup@sail.stanford.educc: Masinter.pa     ----- Begin Forwarded Messages -----Return-Path: <@SAIL.STANFORD.EDU:Masinter.pa@Xerox.COM>Received: from SAIL.STANFORD.EDU by Xerox.COM ; 15 JUL 87 13:32:06 PDTReceived: from XEROX.COM by SAIL.STANFORD.EDU with TCP; 15 Jul 87  13:29:01 PDTReceived: from Salvador.ms by ArpaGateway.ms ; 15 JUL 87 13:27:05 PDTDate: 15 Jul 87 13:24 PDTFrom: Masinter.paSubject: Issue: Pathname-subdirectory-listTo: cl-cleanup@sail.stanford.educc: Ghenis.pasaMessage-ID: <870715-132705-3165@Xerox>This arrived in my mailbox before the X3J13 meeting. While I suspectthere may be some alternative proposals, and perhaps some otherimportant related issues, this seems like a good way to introduce thetopic.!ISSUE: (PATHNAME-SUBDIRECTORY-LIST)REFERENCES: CLtL pages 409 - 418CATEGORY: ADDITION  EDIT HISTORY: Version 1 by Ghenis.pasa@Xerox.com, 06/18/87PROBLEM DESCRIPTION:It is impossible to write PORTABLE code that can produce a pathnamebased on directory plus SUBDIRECTORY information. If the directory usedis not a root, then the string provided must contain OS-specificseparators. This defeats the purpose of having an abstraction likepathname. Specifying a subdirectory RELATIVE to the current default ispossible but also inconvenient and non-portable.This problem is even worse for programs running on machines on a networkthat can retrieve files from multiple hosts, each using a different OSand thus a different subdirectory delimiter.PROPOSAL (PATHNAME-SUBDIRECTORY-LIST:ALLOW): Add a :SUBDIRECTORIES field to pathnames, to store a list of strings.The string form of a pathname can be obtained by using the appropriateOS-specific separator and end-delimiters.Require global variables called LISP:*HOST-OS-ALIST* andLISP:*DEFAULT-OS* to provide the information needed to assemblenamestrings correctlyTEST CASE (desired behavior): 	>(defparameter LISP:*HOST-OS-ALIST*		'(("vmsvax" . "vms") ("unixvax" . "unix"))	>(defparameter LISP:*DEFAULT-OS* "msdos")	>(defvar vmspath		(make-pathname :host "vmsvax"		 			:directory "smith"		 			:sudirectories '("lisp") 					:name "test"		 			:type "lsp"))	>(defvar localpath 		(make-pathname :directory "smith" 								:sudirectories '("lisp") 					:name "test" 					:type "lsp"))	>(namestring vmspath)	"{vmsvax}[smith.lisp]test.lsp"	>(namestring localpath)	"c:\smith\lisp\test.lsp"RATIONALE:Pathnames are an abstraction meant to deal with the common notions infile systems. Subdirectories exist in most operating systems. CommonLisp must provide a standard way of dealing with subdirectories forpathnames to be truly useful.CURRENT PRACTICE:CLtL acknowledges this problem and declares it to be a system dependentissue.ADOPTION COST:This should be a simple addition to implement.BENEFITS: Adding a :SUBDIRECTORIES field to pathnames would make the abstractioncompletely system-independent. Relative pathnames could be triviallyspecified by pathnames lacking a :DIRECTORY field.CONVERSION COST: This is an upwards-compatible addition.AESTHETICS:Adding a :SUBDIRECTORIES field to pathnames would make the abstractioncompletely system-independent.DISCUSSION: >>Additional arguments, discussions, endorsements,  testimonials, etc. should go here.<<     ----- Next Message -----Return-Path: <Moon@STONY-BROOK.SCRC.Symbolics.COM>Received: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by Xerox.COM ; 16 JUL 87 17:15:01 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 194405; Thu 16-Jul-87 20:14:29 EDTDate: Thu, 16 Jul 87 20:14 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: Pathname-subdirectory-listTo: Masinter.pa, Ghenis.pasacc: cl-cleanup@sail.stanford.eduIn-Reply-To: <870715-132705-3165@Xerox>Message-ID: <870716201416.0.MOON@EUPHRATES.SCRC.Symbolics.COM>Line-fold: No    Date: 15 Jul 87 13:24 PDT    From: Masinter.pa@Xerox.COM    PROBLEM DESCRIPTION:    It is impossible to write PORTABLE code that can produce a pathname    based on directory plus SUBDIRECTORY information. If the directory used    is not a root, then the string provided must contain OS-specific    separators. This defeats the purpose of having an abstraction like    pathname. Specifying a subdirectory RELATIVE to the current default is    possible but also inconvenient and non-portable.    This problem is even worse for programs running on machines on a network    that can retrieve files from multiple hosts, each using a different OS    and thus a different subdirectory delimiter.I agree with the problem description.  We've been dealing with heterogeneousnetwork for quite some time and have run into the same thing.    PROPOSAL (PATHNAME-SUBDIRECTORY-LIST:ALLOW):     Add a :SUBDIRECTORIES field to pathnames, to store a list of strings.Adding a new field as a way of solving this problem doesn't make sense.Subdirectories are a structuring of the existing directory field, they arenot a new -independent- aspect of a pathname.The solution to this problem that Symbolics has used for years worksquite well.  The directory is a structured field whose value is returnedas a list of strings, one string for each subdirectory level.  Inaddition to strings, in our system we allow certain keywords in thelist, enumerated below.  Note that this general approach is the solutionsuggested by CLtL itself, page 412 about 3/4 of the way down the page;thus the only reason to change the language would be if we want to forceall implementations to use the same representation of structureddirectories, which might be difficult if some implementation uses astrange file system with a directory feature we haven't thought of.When constructing a pathname, either a list of strings, or a singlestring containing host-dependent delimiters, is accepted.  To retrieve astring containing host-dependent delimiters, the existingDIRECTORY-NAMESTRING function is used.In case those keywords aren't self-evident, here are some examples. Vixen is a Unix, presumably everyone is familiar with Unix pathnamesyntax.(make-pathname :host "vixen"	       :directory '("foo" "bar")) => #P"VIXEN:/foo/bar/"(make-pathname :host "vixen"	       :directory '(:relative "bar")) => #P"VIXEN:bar/"(make-pathname :host "vixen"	       :directory '(:relative :up "bar")) => #P"VIXEN:../bar/"(make-pathname :host "vixen"	       :directory '(:relative :up :up "bar")) => #P"VIXEN:../../bar/"(make-pathname :host "vixen"	       :directory '("foo" :wild "bar")) => #P"VIXEN:/foo/*/bar/"I can't show you :wild-inferiors on Unix, because Unix is too simpleand elegant to have such useful features, so I'll use VMS:(make-pathname :host "dumbo"	       :directory '("foo" :wild "bar")) => #P"DUMBO:[foo.*.bar]"(make-pathname :host "dumbo"	       :directory '("foo" :wild-inferiors "bar")) => #P"DUMBO:[foo...bar]"The name of the VMS host is not intended to be particularly pejorative, all of ourVaxes are named after flying critters.     ----- Next Message -----Return-Path: <@SAIL.Stanford.EDU:Masinter.pa@Xerox.COM>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU by Xerox.COM ; 26 OCT 87 14:16:37 PSTReceived: from XEROX.COM by SAIL.STANFORD.EDU with TCP; 26 Oct 87  14:13:22 PSTReceived: from Cabernet.ms by ArpaGateway.ms ; 26 OCT 87 14:08:46 PSTDate: 26 Oct 87 14:55 PDTFrom: Masinter.paSubject: Issue: PATHNAME-SUBDIRECTORY-LISTIn-reply-to: EWeaver.pa's message of Mon, 26 Oct 87 09:35 PSTTo: cl-cleanup@sail.stanford.educc: ibuki!dbp@labrea.stanford.eduMessage-ID: <871026-140846-2061@Xerox>I had marked the issue PATHNAME-SUBDIRECTORY-LIST as withdrawn; Ithought Moon's point ("the only reason to change the language would beif we want to force all implementations to use the same representationof structured directories, which might be difficult if someimplementation uses a strange file system with a directory feature wehaven't thought of.") was compelling.However, I think there is some advantage to encouraging some consistencyof practice for those systems which do have subdirectory structures... I'd recommend we postpone this issue for now...     ----- End Forwarded Messages -----*start*08839 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU by Xerox.COM ; 10 JUN 88 02:32:05 PDTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 10 Jun 88  02:31:02 PDTReceived: from Cabernet.ms by ArpaGateway.ms ; 10 JUN 88 02:30:12 PDTDate: 10 Jun 88 02:29 PDTFrom: Masinter.paSubject: [Masinter.pa: Issue: Pathname-subdirectory-list]To: cl-cleanup@sail.stanford.educc: Masinter.paMessage-ID: <880610-023012-6268@Xerox>     ----- Begin Forwarded Messages -----Return-Path: <@SAIL.STANFORD.EDU:Masinter.pa@Xerox.COM>Received: from SAIL.STANFORD.EDU by Xerox.COM ; 15 JUL 87 13:32:06 PDTReceived: from XEROX.COM by SAIL.STANFORD.EDU with TCP; 15 Jul 87  13:29:01 PDTReceived: from Salvador.ms by ArpaGateway.ms ; 15 JUL 87 13:27:05 PDTDate: 15 Jul 87 13:24 PDTFrom: Masinter.paSubject: Issue: Pathname-subdirectory-listTo: cl-cleanup@sail.stanford.educc: Ghenis.pasaMessage-ID: <870715-132705-3165@Xerox>This arrived in my mailbox before the X3J13 meeting. While I suspectthere may be some alternative proposals, and perhaps some otherimportant related issues, this seems like a good way to introduce thetopic.!ISSUE: (PATHNAME-SUBDIRECTORY-LIST)REFERENCES: CLtL pages 409 - 418CATEGORY: ADDITION  EDIT HISTORY: Version 1 by Ghenis.pasa@Xerox.com, 06/18/87PROBLEM DESCRIPTION:It is impossible to write PORTABLE code that can produce a pathnamebased on directory plus SUBDIRECTORY information. If the directory usedis not a root, then the string provided must contain OS-specificseparators. This defeats the purpose of having an abstraction likepathname. Specifying a subdirectory RELATIVE to the current default ispossible but also inconvenient and non-portable.This problem is even worse for programs running on machines on a networkthat can retrieve files from multiple hosts, each using a different OSand thus a different subdirectory delimiter.PROPOSAL (PATHNAME-SUBDIRECTORY-LIST:ALLOW): Add a :SUBDIRECTORIES field to pathnames, to store a list of strings.The string form of a pathname can be obtained by using the appropriateOS-specific separator and end-delimiters.Require global variables called LISP:*HOST-OS-ALIST* andLISP:*DEFAULT-OS* to provide the information needed to assemblenamestrings correctlyTEST CASE (desired behavior): 	>(defparameter LISP:*HOST-OS-ALIST*		'(("vmsvax" . "vms") ("unixvax" . "unix"))	>(defparameter LISP:*DEFAULT-OS* "msdos")	>(defvar vmspath		(make-pathname :host "vmsvax"		 			:directory "smith"		 			:sudirectories '("lisp") 					:name "test"		 			:type "lsp"))	>(defvar localpath 		(make-pathname :directory "smith" 								:sudirectories '("lisp") 					:name "test" 					:type "lsp"))	>(namestring vmspath)	"{vmsvax}[smith.lisp]test.lsp"	>(namestring localpath)	"c:\smith\lisp\test.lsp"RATIONALE:Pathnames are an abstraction meant to deal with the common notions infile systems. Subdirectories exist in most operating systems. CommonLisp must provide a standard way of dealing with subdirectories forpathnames to be truly useful.CURRENT PRACTICE:CLtL acknowledges this problem and declares it to be a system dependentissue.ADOPTION COST:This should be a simple addition to implement.BENEFITS: Adding a :SUBDIRECTORIES field to pathnames would make the abstractioncompletely system-independent. Relative pathnames could be triviallyspecified by pathnames lacking a :DIRECTORY field.CONVERSION COST: This is an upwards-compatible addition.AESTHETICS:Adding a :SUBDIRECTORIES field to pathnames would make the abstractioncompletely system-independent.DISCUSSION: >>Additional arguments, discussions, endorsements,  testimonials, etc. should go here.<<     ----- Next Message -----Return-Path: <Moon@STONY-BROOK.SCRC.Symbolics.COM>Received: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) byXerox.COM ; 16 JUL 87 17:15:01 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COMvia CHAOS with CHAOS-MAIL id 194405; Thu 16-Jul-87 20:14:29 EDTDate: Thu, 16 Jul 87 20:14 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: Pathname-subdirectory-listTo: Masinter.pa, Ghenis.pasacc: cl-cleanup@sail.stanford.eduIn-Reply-To: <870715-132705-3165@Xerox>Message-ID: <870716201416.0.MOON@EUPHRATES.SCRC.Symbolics.COM>Line-fold: No    Date: 15 Jul 87 13:24 PDT    From: Masinter.pa@Xerox.COM    PROBLEM DESCRIPTION:    It is impossible to write PORTABLE code that can produce a pathname    based on directory plus SUBDIRECTORY information. If the directory used    is not a root, then the string provided must contain OS-specific    separators. This defeats the purpose of having an abstraction like    pathname. Specifying a subdirectory RELATIVE to the current default is    possible but also inconvenient and non-portable.    This problem is even worse for programs running on machines on a network    that can retrieve files from multiple hosts, each using a different OS    and thus a different subdirectory delimiter.I agree with the problem description.  We've been dealing with heterogeneousnetwork for quite some time and have run into the same thing.    PROPOSAL (PATHNAME-SUBDIRECTORY-LIST:ALLOW):     Add a :SUBDIRECTORIES field to pathnames, to store a list of strings.Adding a new field as a way of solving this problem doesn't make sense.Subdirectories are a structuring of the existing directory field, they arenot a new -independent- aspect of a pathname.The solution to this problem that Symbolics has used for years worksquite well.  The directory is a structured field whose value is returnedas a list of strings, one string for each subdirectory level.  Inaddition to strings, in our system we allow certain keywords in thelist, enumerated below.  Note that this general approach is the solutionsuggested by CLtL itself, page 412 about 3/4 of the way down the page;thus the only reason to change the language would be if we want to forceall implementations to use the same representation of structureddirectories, which might be difficult if some implementation uses astrange file system with a directory feature we haven't thought of.When constructing a pathname, either a list of strings, or a singlestring containing host-dependent delimiters, is accepted.  To retrieve astring containing host-dependent delimiters, the existingDIRECTORY-NAMESTRING function is used.In case those keywords aren't self-evident, here are some examples. Vixen is a Unix, presumably everyone is familiar with Unix pathnamesyntax.(make-pathname :host "vixen"	       :directory '("foo" "bar")) => #P"VIXEN:/foo/bar/"(make-pathname :host "vixen"	       :directory '(:relative "bar")) => #P"VIXEN:bar/"(make-pathname :host "vixen"	       :directory '(:relative :up "bar")) => #P"VIXEN:../bar/"(make-pathname :host "vixen"	       :directory '(:relative :up :up "bar")) => #P"VIXEN:../../bar/"(make-pathname :host "vixen"	       :directory '("foo" :wild "bar")) => #P"VIXEN:/foo/*/bar/"I can't show you :wild-inferiors on Unix, because Unix is too simpleand elegant to have such useful features, so I'll use VMS:(make-pathname :host "dumbo"	       :directory '("foo" :wild "bar")) => #P"DUMBO:[foo.*.bar]"(make-pathname :host "dumbo"	       :directory '("foo" :wild-inferiors "bar")) => #P"DUMBO:[foo...bar]"The name of the VMS host is not intended to be particularly pejorative, all ofourVaxes are named after flying critters.     ----- Next Message -----Return-Path: <@SAIL.Stanford.EDU:Masinter.pa@Xerox.COM>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU by Xerox.COM ; 26 OCT 87 14:16:37 PSTReceived: from XEROX.COM by SAIL.STANFORD.EDU with TCP; 26 Oct 87  14:13:22 PSTReceived: from Cabernet.ms by ArpaGateway.ms ; 26 OCT 87 14:08:46 PSTDate: 26 Oct 87 14:55 PDTFrom: Masinter.paSubject: Issue: PATHNAME-SUBDIRECTORY-LISTIn-reply-to: EWeaver.pa's message of Mon, 26 Oct 87 09:35 PSTTo: cl-cleanup@sail.stanford.educc: ibuki!dbp@labrea.stanford.eduMessage-ID: <871026-140846-2061@Xerox>I had marked the issue PATHNAME-SUBDIRECTORY-LIST as withdrawn; Ithought Moon's point ("the only reason to change the language would beif we want to force all implementations to use the same representationof structured directories, which might be difficult if someimplementation uses a strange file system with a directory feature wehaven't thought of.") was compelling.However, I think there is some advantage to encouraging some consistencyof practice for those systems which do have subdirectory structures... I'd recommend we postpone this issue for now...     ----- End Forwarded Messages -----*start*08383 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 05 JUL 88 11:58:20 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 5 Jul 88  11:56:38 PDTReceived: from PEWEE.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 428605; Tue 5-Jul-88 14:56:20 EDTDate: Tue, 5 Jul 88 14:56 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 2)To: CL-Cleanup@SAIL.STANFORD.EDUcc: pierson%mist@MULTIMAX.ARPA, KMP@STONY-BROOK.SCRC.Symbolics.COMMessage-ID: <880705145610.9.KMP@PEWEE.SCRC.Symbolics.COM>Dan -- I know you were gonna do something on this. I wasn't sure whatyour timeframe was. It's very important to us right now, though, so inan effort to get something on the table, I wrote the following. I hopethis doesn't step on your toes, but rather makes your job a bit easier.-kmp-----Issue:          PATHNAME-SUBDIRECTORY-LISTReferences:     Pathnames (pp410-413), MAKE-PATHNAME (p416),		PATHNAME-DIRECTORY (p417)Category:       CHANGEEdit history:   18-Jun-87, Version 1 by Ghenis.pasa@Xerox.COM	        05-Jul-88, Version 2 by Pitman (major revision)Status:	        For Internal DiscussionRelated-Issues: PATHNAME-COMPONENT-CASEProblem Description:  It is impossible to write portable code that can produce a pathname  in a subdirectory of a hierarchical file system. This defeats much of  the purpose of having an abstraction like pathname.  According to CLtL, only a string is a portable filler of the directory  slot, but in order to denote a subdirectory, the use of separators (such  as dots, slashes, or backslashes) would be necessary. The very fact that  such syntax varies from host to host means that although the  representation might be "portable", the code using that representation   is not portable.  This problem is even worse for programs running on machines on a network  that can retrieve files from multiple hosts, each using a different OS  and thus a different subdirectory delimiter.  Related problems:  - In some implementations "FOO.BAR" might denote the "BAR" subdirectory    of "FOO" while in other implementations because "." is not the    separator. To be safe, portable programs must avoid all potential    separators.  - Even in implementations where "." is the separator, "FOO.BAR" may be    recognized by some to mean the "BAR" subdirectory of "FOO" and by others    to mean `a seven letter directory with "." being a superquoted part of    its name'.  - In fact, CLtL does not even say for toplevel directories whether the    directory delimiters are a part. eg, is "foo" or "/foo" the directory    filler for a unix pathname "/foo/bar.lisp". Similarly, is "[FOO]" or    "FOO" the directory filler for a VMS pathname "[FOO]ME.LSP"?Proposal (PATHNAME-SUBDIRECTORY-LIST:NEW-REPRESENTATION)  Allow a list to be a filler of a pathname. The car of the list may be either  of the symbols :ABSOLUTE or :RELATIVE.  If the car of the list is :RELATIVE, the rest of the list is the  implementation-dependent result of PARSE-NAMESTRING for file systems which  have relative pathnames. Unless some other proposal is submitted to clarify  the behavior of relative pathnames in merging, etc. that behavior is left  undefined.  If the car of the list is :ABSOLUTE, the rest of the list is a list of   strings each naming a single level of directory structure. The strings  should contain only the directory names themselves -- no separator  characters.  The spec (:ABSOLUTE) represents the root directory.  Clarify that if a string is used as a filler of a directory field in a  pathname, it should be the unadorned name of a toplevel directory.  Specifying a string, str, is equivalent to specifying the list  (:ABSOLUTE str).  In place of a string, at any point in the list, the symbol :WILD or   :WILD-INFERIORS may occur. These symbols may not be meaningful for all  operating systems, but may be useful on those operating systems which   do provide such mechanisms. They denote a full wildcard match of one  or several directory levels, respectively.Test Case:  (PATHNAME-DIRECTORY (PARSE-NAMESTRING "[FOO.BAR]BAZ.LSP")) ;on VMS  => (:ABSOLUTE "FOO" "BAR")  (PATHNAME-DIRECTORY (PARSE-NAMESTRING "/foo/bar/baz.lisp")) ;on Unix  => (:ABSOLUTE "foo" "bar")  or (:ABSOLUTE "FOO" "BAR") ;if PATHNAME-COMPONENT-CASE:CANONICALIZE passes  (PATHNAME-DIRECTORY (PARSE-NAMESTRING ">foo>**>bar>baz.lisp")) ;on LispM  => (:ABSOLUTE "FOO" :WILD-INFERIORS "BAR")  (PATHNAME-DIRECTORY (PARSE-NAMESTRING ">foo>*>bar>baz.lisp")) ;on LispM  => (:ABSOLUTE "FOO" :WILD "BAR")Rationale:  This would allow programs to usefully deal with hierarchical file systems,  which are by far the most common file system type.Current Practice:  Symbolics Genera implements something very similar to this. [The main  difference is that in Genera, there is no :ABSOLUTE keyword at the head  of the list. This has been shown to cause some problems in dealing with  root directories. Genera represents the root directory by a keyword  symbol (rather than a list) because the list representation was not  adequately general.]Cost to Implementors:  In principle, nothing about the implementation needs to change except  the treatment of the directory field by MAKE-PATHNAME and  PATHNAME-DIRECTORY. The internal representation can otherwise be left  as-is if necessary.  For implementations that choose to rationalize this representation  throughout their internals and any other implementation-specific  accessors, the cost will be necessarily higher.Cost to Users:  None. This change is upward compatible.Cost of Non-Adoption:  Serious portability problems would continue to occur. Programmers would be  driven to the use of implementation-specific facilities because the need  for this is frequently impossible to ignore.Benefits:  The serious costs of non-adoption would be avoided.Aesthetics:  This representation of hierarchical pathnames is easy to use and quite  general. Users will probably see this as an improvement in the aesthetics.Discussion:  This issue was raised a while back but no one was fond of the particular  proposal that was submitted. This is an attempt to revive the issue.  The original proposal, to add a :SUBDIRECTORIES field to a pathname, was  discarded because it imposed an unnatural distinction between a toplevel  directory and its subdirectories. Pitman's guess is the the idea was to  try to make it a compatible change, but since most programmers will   probably want to change from implementation-specific primitives to portable  ones anyway, that's probably not such a big deal. Also, there might have  been some programs which thought the change was compatible and ended up  ignoring important information (the :SUBDIRECTORIES field). Pitman thought  it would be better if people just accepted the cost of an incompatible  change in order to get something really pretty as a result.  This issue used to address the issue of relative pathnames (pathnames  relative to some default which is separately maintained). Pitman removed  this issue for now in order to simplify things. He feels the issue should  be resubmitted under separate cover so that it can be discussed separately.  Variations on this proposal, one or more of which could be factored in if  there were sufficient interest are:   - Flushing the idea of strings as fillers for this field require     implementations to always use a list.   - Relaxing the representation to allow the keyword :ABSOLUTE to     be optional in most cases (but required to represent the root).   - Never using :ABSOLUTE, but requiring that to represent the root     directory, you must use the symbol :ROOT as the filler for the     directory slot.   - Specifying that the representation is either a list of strings     or a list whose car is a keyword such as :RELATIVE or :ROOT.   - Specifying that any implementation-specific contents must be a     list which begins with a keyword other than ones defined by these     proposals. eg, (:OTHER implementation-specific-stuff).*start*01048 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 05 JUL 88 16:25:44 PDTReceived: from multimax.ARPA by SAIL.Stanford.EDU with TCP; 5 Jul 88  16:24:38 PDTReceived:  by multimax.ARPA (5.51/25-eef)	id AA00752; Tue, 5 Jul 88 19:22:10 EDTReceived: from localhost by mist.UUCP (3.2/4.7)	id AA20327; Tue, 5 Jul 88 19:26:23 EDTMessage-Id: <8807052326.AA20327@mist.UUCP>To: Kent M Pitman <KMP%STONY-BROOK.SCRC.Symbolics.COM@multimax.ARPA>Cc: cl-cleanup%sail.stanford.edu@multimax.ARPASubject: Re: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 2) In-Reply-To: Your message of Tue, 05 Jul 88 14:56:00 -0400.             <880705145610.9.KMP@PEWEE.SCRC.Symbolics.COM> Date: Tue, 05 Jul 88 19:26:21 EDTFrom: Dan L. Pierson <pierson%mist@multimax.ARPA>Actually, I was waiting for Chris Perdue who said in Boston that hehad a draft in review.  Thanks for giving us all a kick.                                            dan*start*02067 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 08 JUL 88 05:46:35 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 8 Jul 88  05:45:30 PDTReceived: from PEWEE.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 430369; Fri 8-Jul-88 08:45:15 EDTReturn-path: <spt!gz@EDDIE.MIT.EDU>Received: from EDDIE.MIT.EDU by STONY-BROOK.SCRC.Symbolics.COM via INTERNET with SMTP id 430096; 7 Jul 88 16:36:50 EDTReceived: by EDDIE.MIT.EDU with UUCP with smail2.5 with sendmail-5.45/4.7 id <AA05217@EDDIE.MIT.EDU>; Thu, 7 Jul 88 16:36:37 EDTReceived: by spt.entity.com (smail2.5); 7 Jul 88 16:09:32 EDT (Thu)Date: 7 Jul 88 16:09:32 EDT (Thu)From: gz@spt.entity.com (Gail Zacharias)To: KMP@STONY-BROOK.SCRC.Symbolics.COMIn-Reply-To: <880705145610.9.KMP@PEWEE.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 2)Message-Id: <8807071609.AA13398@spt.entity.com>Resent-To: CL-Cleanup@SAIL.Stanford.EDUResent-From: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Resent-Date: Fri, 8 Jul 88 08:45 EDTResent-Message-ID: <880708084513.4.KMP@PEWEE.SCRC.Symbolics.COM>   Date: Tue, 5 Jul 88 14:56 EDT   From: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>     (PATHNAME-DIRECTORY (PARSE-NAMESTRING ">foo>*>bar>baz.lisp")) ;on LispM     => (:ABSOLUTE "FOO" :WILD "BAR")I think this is pointless.  Why should there be special syntax for "*" butnot for "x*z"?  It only gives you the ability to detect a small subset ofpossible wildcard specs, and it only gives you the ability to constructa small subset of wildcard specs (and there's nothing equivalent for eventhis small subset within file names or types or devices).  It's a hack, whichmight get in the way of a more general solution.  Why not just leave everythingas strings for now, and leave other data types for any possible less ad hocapproaches to the wildcard issues.*start*01802 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 08 JUL 88 05:47:12 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 8 Jul 88  05:45:41 PDTReceived: from PEWEE.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 430370; Fri 8-Jul-88 08:45:25 EDTReturn-path: <spt!gz@EDDIE.MIT.EDU>Received: from EDDIE.MIT.EDU by STONY-BROOK.SCRC.Symbolics.COM via INTERNET with SMTP id 430095; 7 Jul 88 16:36:39 EDTReceived: by EDDIE.MIT.EDU with UUCP with smail2.5 with sendmail-5.45/4.7 id <AA05212@EDDIE.MIT.EDU>; Thu, 7 Jul 88 16:36:27 EDTReceived: by spt.entity.com (smail2.5); 7 Jul 88 16:27:55 EDT (Thu)Date: 7 Jul 88 16:27:55 EDT (Thu)From: gz@spt.entity.com (Gail Zacharias)To: KMP@STONY-BROOK.SCRC.Symbolics.COMIn-Reply-To: <880705145610.9.KMP@PEWEE.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 2)Message-Id: <8807071627.AA13436@spt.entity.com>Resent-To: CL-Cleanup@SAIL.Stanford.EDUResent-From: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Resent-Date: Fri, 8 Jul 88 08:45 EDTResent-Message-ID: <880708084529.5.KMP@PEWEE.SCRC.Symbolics.COM>The Macintosh has syntax for moving up the directory structure.  This issimilar to Unix's "../", although unlike Unix where there's an explicit ".."pseudo-component, on the Macintosh it's just syntax.  In any case, I'd like tosee your proposal extended to allow representing upward motion.  Otherwise itneeds to be made clear that counting the number of elements in thesubdirectory list doesn't necessarily say anything about the nesting level ofthe directory (it's neither a lower nor an upper bound).*start*02408 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 08 JUL 88 05:46:34 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 8 Jul 88  05:45:56 PDTReceived: from PEWEE.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 430371; Fri 8-Jul-88 08:45:35 EDTReceived: from PEWEE.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 430107; Thu 7-Jul-88 16:43:50 EDTDate: Thu, 7 Jul 88 16:43 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 2)To: gz@spt.entity.comcc: KMP@STONY-BROOK.SCRC.Symbolics.COMIn-Reply-To: <8807071627.AA13436@spt.entity.com>Message-ID: <880707164340.9.KMP@PEWEE.SCRC.Symbolics.COM>Resent-To: CL-Cleanup@SAIL.Stanford.EDUResent-From: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Resent-Date: Fri, 8 Jul 88 08:45 EDTResent-Message-ID: <880708084539.6.KMP@PEWEE.SCRC.Symbolics.COM>    Date: 7 Jul 88 16:27:55 EDT (Thu)    From: gz@spt.entity.com (Gail Zacharias)    The Macintosh has syntax for moving up the directory structure.  This is    similar to Unix's "../", although unlike Unix where there's an explicit ".."    pseudo-component, on the Macintosh it's just syntax.  In any case, I'd like to    see your proposal extended to allow representing upward motion.  Otherwise it    needs to be made clear that counting the number of elements in the    subdirectory list doesn't necessarily say anything about the nesting level of    the directory (it's neither a lower nor an upper bound).If (CAR (PATHNAME-DIRECTORY ...)) yields (:ABSOLUTE . something), then if (NOT (MEMBER :WILD-INFERIORS something)) then (LENGTH something) isthe absolute nesting level. If (MEMBER :WILD-INFERIORS something), thenI think (- (LENGTH something) (COUNT :WILD-INFERIORS something)) is alower bound on the nesting level.The idea would be for all such funny syntaxes to be relegated to :RELATIVE.The lispm represents relative pathnames like lispm's "<<foo>bar.lisp"as (MAKE-PATHNAME :DIRECTORY (:RELATIVE :UP :UP "FOO") :NAME "BAR" :TYPE "LISP").I'll have to study how it does merging before sending out a proposal, butdo you see any obvious problems with this notation?*start*03034 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 08 JUL 88 05:47:24 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 8 Jul 88  05:45:58 PDTReceived: from PEWEE.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 430372; Fri 8-Jul-88 08:45:43 EDTReceived: from PEWEE.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 430112; Thu 7-Jul-88 16:49:55 EDTDate: Thu, 7 Jul 88 16:49 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 2)To: gz@spt.entity.comcc: KMP@STONY-BROOK.SCRC.Symbolics.COMIn-Reply-To: <8807071609.AA13398@spt.entity.com>Message-ID: <880707164958.0.KMP@PEWEE.SCRC.Symbolics.COM>Resent-To: CL-Cleanup@SAIL.Stanford.EDUResent-From: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Resent-Date: Fri, 8 Jul 88 08:45 EDTResent-Message-ID: <880708084547.7.KMP@PEWEE.SCRC.Symbolics.COM>    Date: 7 Jul 88 16:09:32 EDT (Thu)    From: gz@spt.entity.com (Gail Zacharias)       Date: Tue, 5 Jul 88 14:56 EDT       From: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>	 (PATHNAME-DIRECTORY (PARSE-NAMESTRING ">foo>*>bar>baz.lisp")) ;on LispM	 => (:ABSOLUTE "FOO" :WILD "BAR")    I think this is pointless.  Why should there be special syntax for "*" but    not for "x*z"?  It only gives you the ability to detect a small subset of    possible wildcard specs, and it only gives you the ability to construct    a small subset of wildcard specs (and there's nothing equivalent for even    this small subset within file names or types or devices).  It's a hack, which    might get in the way of a more general solution.  Why not just leave everything    as strings for now, and leave other data types for any possible less ad hoc    approaches to the wildcard issues.I'm not sure of this myself, but I've not studied the issue well enough.Anyway, it is already institutionalized in that CL already permits :WILDas a filler of a directory slot even though there might be internal starmatches.I think the main intent is to allow a person to write a portable calllike (DIRECTORY (MAKE-PATHNAME :NAME "FOO" :TYPE :WILD :VERSION :WILD))without worrying that "*" might not be the wildcard char in all systems.It just occurred to me that you are (and I was) supposing that "*" iswhat :WILD translates to, but in fact it might not be. I guess I thinkit's defensible (albeit less elegant) to support this particular specialcase because it does have broader application in portable programs.Btw, even systems which support embedded "*" disagree as to itstreatment. In some (eg, ITS) the * matches exactly one char, while inothers (eg, Unix or Lispm), it matches any number of chars.Interestingly, ITS agrees however that when "*" stands alone that itmatches a variable number of chars...*start*06307 00024 USaReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 08 JUL 88 05:48:03 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 8 Jul 88  05:46:11 PDTReceived: from PEWEE.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 430373; Fri 8-Jul-88 08:45:51 EDTReturn-path: <spt!gz@EDDIE.MIT.EDU>Received: from EDDIE.MIT.EDU by STONY-BROOK.SCRC.Symbolics.COM via INTERNET with SMTP id 430344; 8 Jul 88 06:13:33 EDTReceived: by EDDIE.MIT.EDU with UUCP with smail2.5 with sendmail-5.45/4.7 id <AA20751@EDDIE.MIT.EDU>; Fri, 8 Jul 88 06:13:15 EDTReceived: by spt.entity.com (smail2.5); 8 Jul 88 05:55:05 EDT (Fri)Date: 8 Jul 88 05:55:05 EDT (Fri)From: gz@spt.entity.com (Gail Zacharias)To: KMP@STONY-BROOK.SCRC.Symbolics.COMSubject: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 2)In-Reply-To: <880707164958.0.KMP@PEWEE.SCRC.Symbolics.COM>,	     <880707164340.9.KMP@PEWEE.SCRC.Symbolics.COM>Message-Id: <8807080555.AA15328@spt.entity.com>Resent-To: CL-Cleanup@SAIL.Stanford.EDUResent-From: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Resent-Date: Fri, 8 Jul 88 08:45 EDTResent-Message-ID: <880708084555.8.KMP@PEWEE.SCRC.Symbolics.COM>   Date: Thu, 7 Jul 88 16:49 EDT   From: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>   Anyway, it is already institutionalized in that CL already permits :WILD   as a filler of a directory slot even though there might be internal star   matches.Oops, you're right, I forgot all about this.  "Never mind".   Date: Thu, 7 Jul 88 16:43 EDT   From: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>   If (CAR (PATHNAME-DIRECTORY ...)) yields (:ABSOLUTE . something), then    if (NOT (MEMBER :WILD-INFERIORS something)) then (LENGTH something) is   the absolute nesting level.I don't think (member :wild-inferiors ...) is sufficient.  What aboutimplementations that allow more than one way to specify multi-level inferiors(e.g. something along the lines of "x**y").  Such implementations can pick onepattern to be represented by :WILD-INFERIORS, but they can't replace *every*multi-level pattern with :WILD-INFERIORS without losing information.  Sothere's no implementation-independent way of getting an upper bound (or moregenerally of knowing for certain whether a given component is wild or not).It might be better for the subdirectory list to be just a list of <whatever>'s,and provide predicates for testing components for wildness and/ormulti-levelness.  (:WILD and :WILD-INFERIORS could still be required to berecognized on input).  I think :UP might just be a keyword, since I can'timagine there being more than one way of moving up.  But maybe this shouldbe a predicate as well just in case.Another possibility might be for a component to be either a stringor a list (string . properties), where properties would be things like:WILD, :RESTRICTED-WILD, :MULTI-LEVEL, :UP.  A plain string means it'sa simple (non-wild) component.                             If (MEMBER :WILD-INFERIORS something), then   I think (- (LENGTH something) (COUNT :WILD-INFERIORS something)) is a   lower bound on the nesting level.   The idea would be for all such funny syntaxes to be relegated to :RELATIVE.I think then that you're overloading :ABSOLUTE to mean both rooted andcanonicalized.  A unix name like "/foo/bar/../baz/" is fully rooted eventhough it contains some relative motion within it.  It's functionally (in thefile system) fully equivalent to "/foo/baz/", but it might not be equivalentprogrammatically (i.e. it might intentionally appear in the middle of somepathname-manipulating algorithm).  Just on general principle, if a user says"/foo/bar/../baz/", I would not feel comfortable with the loss of informationinherent in *automatically* reducing that to "/foo/baz/" at the pathnamelevel.  I think of this as a TRUENAME-level action.In fact, a TRUENAME-like function, say STANDARDIZE-PATHNAME, which didn'tactually require the file (or the directory) to exist, but just did as muchcanonicalization as possible, might solve some of these problems.  We (Coral)have an internal function like that, it expands lisp-defined logical names andremoves syntactically redundant subdirectory motion (as well as any unnecessaryquoting).  It's useful.  Handling subdirectory structures is much simpler ifyou can get the system to standardize them for you first.One more observation, about the :ABSOLUTE/:RELATIVE distinction.  The Macintoshhas a hierarchical file system, and relative pathnames, but it doesn't have aroot directory.  Pathnames are rooted at the device, sort of like twenex(except twenex doesn't really deal with relative pathnames.  Maybe VMS is abetter analogy).  Anyhow what this means is that being absolute or relative isnot a property of the directory alone, it's a property of the device/directorypair.  This isn't really a big deal, as I'm sure we can come up with some setof conventions, but it does seem like it would introduce unnecessary conceptualhair for our non-jet-setting users (i.e. Mac folks who don't really know fromother file systems).  I think I would prefer the following option from yourdiscussion section, as being less intrusive for hierarchical file systemswithout a root directory:   - Never using :ABSOLUTE, but requiring that to represent the root     directory, you must use the symbol :ROOT as the filler for the     directory slot.I interpret this to mean that on unix, "foo/bar/" would be ("foo" "bar")while "/foo/bar/" would be (:ROOT "foo" "bar").  With that interpretation,I would also: . state that this is the convention for output from pathname accessors, and   that using it on input to constructors may be non-portable (it would   signal an error in file systems without a root directory) . state that the presence of :ROOT (probably?) means the pathname is absolute,   but the converse is not necessarily true (in particular it's false in file   systems without a root directory). . add a predicate which takes a pathname and tells you if the pathname   as a whole is absolute (i.e. independent of any "current directory").*start*01723 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 08 JUL 88 10:30:36 PDTReceived: from labrea.stanford.edu by SAIL.Stanford.EDU with TCP; 8 Jul 88  10:28:30 PDTReceived: by labrea.stanford.edu; Fri, 8 Jul 88 10:28:04 PDTReceived: from bhopal.lucid.com by edsel id AA06008g; Fri, 8 Jul 88 10:21:41 PDTReceived: by bhopal id AA15658g; Fri, 8 Jul 88 10:21:40 PDTDate: Fri, 8 Jul 88 10:21:40 PDTFrom: Jim McDonald <edsel!jlm@labrea.stanford.edu>Message-Id: <8807081721.AA15658@bhopal.lucid.com>To: gz@spt.entity.comCc: KMP@stony-brook.scrc.symbolics.com, CL-Cleanup@sail.stanford.eduIn-Reply-To: Gail Zacharias's message of 8 Jul 88 05:55:05 EDT (Fri) <8807080555.AA15328@spt.entity.com>Subject: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 2)>                         I think :UP might just be a keyword, since I can't>  imagine there being more than one way of moving up.  Assume you are using some version of un*x, and that /foo/b1/b2 is asymbolic link to directory /foo/a1/a2/a3.  Then using csh, after cd /foo/b1/b2/.., pwd will show /foo/a1/a2, but using bsh, after cd /foo/b1/b2/.., pwd will show /foo/b1.I.e., if you are trying to emulate the behavior of csh, you must waituntil the truename is resolved before knowing where :UP will lead you.In Lucid Common Lisp for the Sun-3, I get the following behavior,assuming /u/jlm/b1/b2 is a symbolic link to ../a1/a2/a3, and all therelevant directories actually exist:> (cd "/u/jlm/")#P"/u/jlm/"> (setq aa (pathname "b1/b2/.."))#P"b1/b2/.."> (cd aa)#P"/u/jlm/a1/a2/"> The moral is that (not (eq :UP :UNDO)).  jlm*start*01567 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 11 JUL 88 11:01:14 PDTReceived: from EDDIE.MIT.EDU by SAIL.Stanford.EDU with TCP; 11 Jul 88  10:59:32 PDTReceived: by EDDIE.MIT.EDU with UUCP with smail2.5 with sendmail-5.45/4.7 id <AA00797@EDDIE.MIT.EDU>; Mon, 11 Jul 88 13:57:24 EDTReceived: by spt.entity.com (smail2.5); 11 Jul 88 10:37:26 EDT (Mon)To: edsel!jlm@labrea.stanford.eduCc: KMP@stony-brook.scrc.symbolics.com, CL-Cleanup@sail.stanford.eduIn-Reply-To: Jim McDonald's message of Fri, 8 Jul 88 10:21:40 PDT <8807081721.AA15658@bhopal.lucid.com>Subject: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 2)Message-Id: <8807111037.AA02007@spt.entity.com>Date: 11 Jul 88 10:37:26 EDT (Mon)From: gz@spt.entity.com (Gail Zacharias)   Date: Fri, 8 Jul 88 10:21:40 PDT   From: Jim McDonald <edsel!jlm@labrea.stanford.edu>   >                         I think :UP might just be a keyword, since I can't   >  imagine there being more than one way of moving up.     ...   Then using csh, after cd /foo/b1/b2/.., pwd will show /foo/a1/a2,    but using bsh, after cd /foo/b1/b2/.., pwd will show /foo/b1.Right you are.  Of course Unix doesn't have any syntax which would allow thepathname itself to specify which variant it wants, but some other systemmight.  So this does show that it would be unwise to assume that everyimplementation would be able to represent all upward motion in pathnames witha single token such as :UP.*start*01013 00024 USaReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 22 JUL 88 10:04:36 PDTReceived: from cs.utah.edu by SAIL.Stanford.EDU with TCP; 22 Jul 88  10:01:27 PDTReceived: by cs.utah.edu (5.54/utah-2.0-cs)	id AA26844; Fri, 22 Jul 88 11:00:59 MDTReceived: by cdr.utah.edu (5.54/utah-2.0-leaf)	id AA02402; Fri, 22 Jul 88 11:00:56 MDTFrom: sandra%cdr@cs.utah.edu (Sandra J Loosemore)Message-Id: <8807221700.AA02402@cdr.utah.edu>Date: Fri, 22 Jul 88 11:00:55 MDTSubject: Re: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 2)To: Kent M Pitman <KMP@stony-brook.scrc.symbolics.com>Cc: cl-cleanup@sail.stanford.eduIn-Reply-To: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>, Tue, 5 Jul 88 14:56 EDTI've never had any need for this functionality and am not convinced itis really that important.  However, I don't have any strenuousobjections to the content of the proposal.-Sandra-------*start*01423 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 19 SEP 88 16:36:53 PDTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 19 Sep 88  16:36:17 PDTReceived: from Salvador.ms by ArpaGateway.ms ; 19 SEP 88 16:23:42 PDTDate: 19 Sep 88 16:23 PDTFrom: masinter.paSubject:  Issue: PATHNAME-SUBDIRECTORY-LIST, PATHNAME-COMPONENT-CASE, PATHNAME-WILD To: cl-cleanup@sail.stanford.eduMessage-ID: <880919-162342-2642@Xerox>I think it might be worthwhile to organize the pathname issues by operatingsystem, e.g., What's the right way for CL to talk to Unix-like file systems? ToMac-like file systems? To VMS-like file systems? At least for PATHNAME-COMPONENT-CASE, PATHNAME-CANONICAL-LIST, PATHNAME-WILD,PATHNAME-TYPE-SPECIFIC. There seem to be more PATHNAME issues than file-naming  conventions. Further, itseems more important to reach convergence within an operating system than acrossthem; for example, there's no good reason why the 7 different CLs available forvarious UNIX systems should treat file names differently, or those within theMac world should treat those names differently. If we can get convergence amongimplementors of CL within OS classes, we might well be able to sort out whichthings are really different because the host OS is different?What do you think?*start*02347 00024 USaReturn-Path: <Moon@STONY-BROOK.SCRC.Symbolics.COM>Received: from STONY-BROOK.SCRC.Symbolics.COM ([128.81.41.144]) by Xerox.COM ; 19 SEP 88 16:57:14 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 462037; Mon 19-Sep-88 19:57:12 EDTDate: Mon, 19 Sep 88 19:56 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-SUBDIRECTORY-LIST, PATHNAME-COMPONENT-CASE,         PATHNAME-WILD To: masinter.pacc: cl-cleanup@sail.stanford.eduIn-Reply-To: <880919-162342-2642@Xerox>Message-ID: <19880919235657.6.MOON@EUPHRATES.SCRC.Symbolics.COM>Line-fold: No    Date: 19 Sep 88 16:23 PDT    From: masinter.pa@Xerox.COM    I think it might be worthwhile to organize the pathname issues by operating    system, e.g., What's the right way for CL to talk to Unix-like file systems?    What do you think?I think that focussing the pathname issues by using specific operatingsystems as examples is a great idea.  I think that prescribing in theCommon Lisp spec how specific operating systems are to be treated ispossibly a good idea, but has some potential problems -- it makes theCommon Lisp spec dependent on specific operating systems that mightchange out from under it; it might overspecify something that shouldhave been left to the discretion of implementors, in overreaction to thepresent situation; it might encourage users to write nonportableprograms by paying attention only to the part of the spec for theoperating system they happened to develop on, ignoring the more generalportability concerns.  These problems are not fatal if handled right.I'm certain that handling each operating system in isolation, with nocoherency among them, is a recipe for disaster.  It could increaseportability among multiple implementations on a single operating system,but further damage portability between differing operating systems.Unless you believe that no operating system but Unix will survive,this would be doing no service to the users of Common Lisp.I think this implies that you can't duck the PATHNAME-COMPONENT-CASEissue so easily: you can't just say that each operating system can makean individual choice.Whether this will go over politically is difficult to judge.  It didn'twork at all in 1983-4.*start*00867 00024 US Date: 19 Sep 88 17:03 PDTFrom: masinter.paSubject: Re: Issue: PATHNAME-SUBDIRECTORY-LIST, PATHNAME-COMPONENT-CASE, PATHNAME-WILD In-reply-to: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>'s message of Mon, 19 Sep 88 19:56 EDTTo: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>cc: masinter.paI agree that having the ANSI or ISO standard for Common Lisp talk about operating systems that are not themselves ANSI or ISO standards is a bad idea. However, an informal agreement among implementors for current operating systems would benefit the community, and would also help us sort out the real issues.  I had suggested it as a process: discuss each operating system in isolation, and then attempt to find the common ground among the operating-system-specific proposals. (For "operating system" read "file naming convention").*start*01745 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 23 NOV 88 15:42:49 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 23 Nov 88  15:39:29 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 23 NOV 88 15:34:13 PSTDate: 23 Nov 88 15:33 PSTFrom: masinter.paSubject: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 2)To: cl-cleanup@sail.stanford.eduMessage-ID: <881123-153413-13500@Xerox>I'd suggest we pare down the proposal PATHNAME-SUBDIRECTORY-LIST and allowpractice to follow: allow a list to be a filler of a pathname. Pathnamesare "relative" in an implementation dependent manner (maybe they'rerelative to ROOT). And some implementations may accept and return specialkeywords or lists of (keyword string) instead of components for theDIRECTORY component of a pathname, we recommend::ABSOLUTE (allowable at the head) meaning to start at the "root" of thefile system:WILD (allowable anywhere):WILD-INFERIORS:UPFor example, in Unix systems, "/a/b/c/" might parse to (:absolute "a" "b""c") while in VMS "[a..b]" might parse to ("A" :wild-inferiors "B").I think we should say that conformal programs that deal with pathnames must'expect' those results back from (PATHNAME-DIRECTORY ...) but not requireimplementations to return simple strings, instead making it "advisory". This allows us to write a standard that talks about Unix even though thereisn't an ANSI standard for Unix, and let users know what to expect, eventhough it isn't absolutely required for conformance because we can'timagine all of the possible keywords that might map onto host file systems.What do you think?*start*00930 00024 US Return-Path: <KMP@STONY-BROOK.SCRC.Symbolics.COM>Received: from STONY-BROOK.SCRC.Symbolics.COM ([128.81.41.144]) by Xerox.COM ; 23 NOV 88 15:55:37 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 497569; Wed 23-Nov-88 18:56:08 ESTDate: Wed, 23 Nov 88 18:56 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 2)To: masinter.pacc: cl-cleanup@sail.stanford.eduIn-Reply-To: <881123-153413-13500@Xerox>Message-ID: <881123185618.4.KMP@BOBOLINK.SCRC.Symbolics.COM>The discussion on :UP shows that we don't understand it well enough tobe including it in any proposal which claims to be stripped down. I needmore time to study this issue and would like to postpone dealing with ituntil after the letter ballot, instead targeting a mailing in time foran in-person vote in January.*start*01078 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 23 NOV 88 15:56:59 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 23 Nov 88  15:56:16 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 497569; Wed 23-Nov-88 18:56:08 ESTDate: Wed, 23 Nov 88 18:56 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 2)To: masinter.pacc: cl-cleanup@sail.stanford.eduIn-Reply-To: <881123-153413-13500@Xerox>Message-ID: <881123185618.4.KMP@BOBOLINK.SCRC.Symbolics.COM>The discussion on :UP shows that we don't understand it well enough tobe including it in any proposal which claims to be stripped down. I needmore time to study this issue and would like to postpone dealing with ituntil after the letter ballot, instead targeting a mailing in time foran in-person vote in January.*start*02421 00024 USaReturn-Path: <boykin@encore.com>Received: from multimax.encore.com ([192.5.63.14]) by Xerox.COM ; 28 NOV 88 11:23:26 PSTReceived:  by multimax.encore.com (5.59/25-eef)	id AA03611; Mon, 28 Nov 88 14:22:10 ESTDate: Mon, 28 Nov 88 14:22:10 ESTFrom: Joe Boykin <boykin@encore.com>Message-Id: <8811281922.AA03611@multimax.encore.com>To: masinter.paSubject: Re: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 2)Dan Pierson sent me the following which he received from you:> I'd suggest we pare down the proposal PATHNAME-SUBDIRECTORY-LIST and allow> practice to follow: allow a list to be a filler of a pathname. Pathnames> are "relative" in an implementation dependent manner (maybe they're> relative to ROOT). And some implementations may accept and return special> keywords or lists of (keyword string) instead of components for the> DIRECTORY component of a pathname, we recommend:> > :ABSOLUTE (allowable at the head) meaning to start at the "root" of the> file system> > :WILD (allowable anywhere)> :WILD-INFERIORS> :UP> > > For example, in Unix systems, "/a/b/c/" might parse to (:absolute "a" "b"> "c") while in VMS "[a..b]" might parse to ("A" :wild-inferiors "B").> > I think we should say that conformal programs that deal with pathnames must> 'expect' those results back from (PATHNAME-DIRECTORY ...) but not require> implementations to return simple strings, instead making it "advisory". > > This allows us to write a standard that talks about Unix even though there> isn't an ANSI standard for Unix, and let users know what to expect, even> though it isn't absolutely required for conformance because we can't> imagine all of the possible keywords that might map onto host file systems.FYI: There is an ANSI standard for UNIX, it was developed by the POSIXP1003.1 group under the sponsorship of the IEEE Computer SocietiesTechnical Committee on Operating Systems.  The standard was a "trialuse" standard for approximately two years and was recently (Aug 22,1988) approved as a full IEEE/ANSI standard.  Draft 12 of P1103.1 hasalso been an interim FIPS (Federal Information Processing Standard) forapproximately a year.Among other things, POSIX includes a definition of a pathname.----Joe BoykinEncore Computer CorpChairman, IEEE Computer Societies    Technical Committee on Operating SystemsUUCP: encore!boykinARPA: boykin@encore.com*start*01704 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 28 NOV 88 15:45:38 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 28 Nov 88  15:41:08 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 28 NOV 88 15:10:55 PSTDate: 28 Nov 88 15:10 PSTFrom: masinter.paSubject: Re: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 2)In-reply-to: your message of Mon, 28 Nov 88 14:22:10 ESTTo: cl-cleanup@sail.stanford.educc: Joe Boykin <boykin@encore.com>Message-ID: <881128-151055-3416@Xerox>In a previous message on this issue, I said that there isn't an ANSIstandard for Unix. I have been corrected, viz:"FYI: There is an ANSI standard for UNIX, it was developed by the POSIXP1003.1 group under the sponsorship of the IEEE Computer SocietiesTechnical Committee on Operating Systems.  The standard was a "trialuse" standard for approximately two years and was recently (Aug 22,1988) approved as a full IEEE/ANSI standard.  Draft 12 of P1103.1 hasalso been an interim FIPS (Federal Information Processing Standard) forapproximately a year.Among other things, POSIX includes a definition of a pathname."This would mean that we could in fact define in the ANSI Standard forCommon Lisp how the pathname functions should work when operating on filesstored within IEEE/ANSI Standard Unix. I think this would be a Good Idea. I don't think it needs to be done intime for the next meeting. I'm not sure that it has to form part of theDraft Standard for Common Lisp, at this point, since often documents thatinterrelate two standards are external to both of them.*start*08193 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 28 DEC 88 16:20:57 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 28 Dec 88  11:33:42 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 512753; Wed 28-Dec-88 14:32:32 ESTDate: Wed, 28 Dec 88 14:32 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 3)To: CL-Cleanup@SAIL.STANFORD.EDUcc: KMP@STONY-BROOK.SCRC.Symbolics.COMMessage-ID: <881228143206.5.KMP@BOBOLINK.SCRC.Symbolics.COM>Ok, I've been through and I think successfully merged all the pendingdiscussion, most of which seemed to center around issues of :UP.-----Issue:          PATHNAME-SUBDIRECTORY-LISTReferences:     Pathnames (pp410-413), MAKE-PATHNAME (p416),		PATHNAME-DIRECTORY (p417)Category:       CHANGEEdit history:   18-Jun-87, Version 1 by Ghenis.pasa@Xerox.COM	        05-Jul-88, Version 2 by Pitman (major revision)		28-Dec-88, Version 3 by Pitman (merge discussion)Status:	        For Internal DiscussionRelated-Issues: PATHNAME-COMPONENT-CASEProblem Description:  It is impossible to write portable code that can produce a pathname  in a subdirectory of a hierarchical file system. This defeats much of  the purpose of having an abstraction like pathname.  According to CLtL, only a string is a portable filler of the directory  slot, but in order to denote a subdirectory, the use of separators (such  as dots, slashes, or backslashes) would be necessary. The very fact that  such syntax varies from host to host means that although the  representation might be "portable", the code using that representation   is not portable.  This problem is even worse for programs running on machines on a network  that can retrieve files from multiple hosts, each using a different OS  and thus a different subdirectory delimiter.  Related problems:  - In some implementations "FOO.BAR" might denote the "BAR" subdirectory    of "FOO" while in other implementations because "." is not the    separator. To be safe, portable programs must avoid all potential    separators.  - Even in implementations where "." is the separator, "FOO.BAR" may be    recognized by some to mean the "BAR" subdirectory of "FOO" and by others    to mean `a seven letter directory with "." being a superquoted part of    its name'.  - In fact, CLtL does not even say for toplevel directories whether the    directory delimiters are a part. eg, is "foo" or "/foo" the directory    filler for a unix pathname "/foo/bar.lisp". Similarly, is "[FOO]" or    "FOO" the directory filler for a VMS pathname "[FOO]ME.LSP"?Proposal (PATHNAME-SUBDIRECTORY-LIST:NEW-REPRESENTATION)  Allow a list to be a filler of a pathname. The car of the list may be either  of the symbols :ABSOLUTE or :RELATIVE.  If the car of the list is :RELATIVE, the rest of the list is the  implementation-dependent result of PARSE-NAMESTRING for file systems which  have relative pathnames. Unless some other proposal is submitted to clarify  the behavior of relative pathnames in merging, etc. that behavior is left  undefined.  If the car of the list is :ABSOLUTE, the rest of the list is a list of   strings each naming a single level of directory structure. The strings  should contain only the directory names themselves -- no separator  characters.  The spec (:ABSOLUTE) represents the root directory.  Clarify that if a string is used as a filler of a directory field in a  pathname, it should be the unadorned name of a toplevel directory.  Specifying a string, str, is equivalent to specifying the list  (:ABSOLUTE str).  In place of a string, at any point in the list, keyword symbols may occur  to deal with special file notations. The following symbols have standard  meanings; they may not be meaningful for all operating systems, and are  intended for use only on those operating systems where they have meaning:   :WILD           - Wildcard match of one level of directory structure.   :WILD-INFERIORS - Wildcard match of any number of directory levels.   :UP             - Go upward in directory structure (semantic).   :BACK 	   - Go upward in directory structure (syntactic).  The difference between up and back is that if there is a directory    (:ABSOLUTE "X" "Y" "Z")  linked to     (:ABSOLUTE "A" "B" "C")  and there also exist directories    (:ABSOLUTE "A" "B" "Q")    (:ABSOLUTE "X" "Y" "Q")  then    (:ABSOLUTE "X" "Y" "Z" :OUT "Q")  designates    (:ABSOLUTE "A" "B" "Q")  while    (:ABSOLUTE "X" "Y" "Z" :UP "Q")  designates    (:ABSOLUTE "X" "Y" "Q")Test Case:  (PATHNAME-DIRECTORY (PARSE-NAMESTRING "[FOO.BAR]BAZ.LSP")) ;on VMS  => (:ABSOLUTE "FOO" "BAR")  (PATHNAME-DIRECTORY (PARSE-NAMESTRING "/foo/bar/baz.lisp")) ;on Unix  => (:ABSOLUTE "foo" "bar")  or (:ABSOLUTE "FOO" "BAR")  If PATHNAME-COMPONENT-CASE:CANONICALIZE passes, only the 2nd return value.  (PATHNAME-DIRECTORY (PARSE-NAMESTRING ">foo>**>bar>baz.lisp")) ;on LispM  => (:ABSOLUTE "FOO" :WILD-INFERIORS "BAR")  (PATHNAME-DIRECTORY (PARSE-NAMESTRING ">foo>*>bar>baz.lisp")) ;on LispM  => (:ABSOLUTE "FOO" :WILD "BAR")Rationale:  This would allow programs to usefully deal with hierarchical file systems,  which are by far the most common file system type.Current Practice:  Symbolics Genera implements something very similar to this. The main  differences are:   - In Genera, there is no :ABSOLUTE keyword at the head of the list.     This has been shown to cause some problems in dealing with root     directories. Genera represents the root directory by a keyword     symbol (rather than a list) because the list representation      was not adequately general.   - Genera represents Unix ".." as :UP, but deals with :UP      syntactically, not semantically.Cost to Implementors:  In principle, nothing about the implementation needs to change except  the treatment of the directory field by MAKE-PATHNAME and  PATHNAME-DIRECTORY. The internal representation can otherwise be left  as-is if necessary.  For implementations that choose to rationalize this representation  throughout their internals and any other implementation-specific  accessors, the cost will be necessarily higher.Cost to Users:  None. This change is upward compatible.Cost of Non-Adoption:  Serious portability problems would continue to occur. Programmers would be  driven to the use of implementation-specific facilities because the need  for this is frequently impossible to ignore.Benefits:  The serious costs of non-adoption would be avoided.Aesthetics:  This representation of hierarchical pathnames is easy to use and quite  general. Users will probably see this as an improvement in the aesthetics.Discussion:  This issue was raised a while back but no one was fond of the particular  proposal that was submitted. This is an attempt to revive the issue.  The original proposal, to add a :SUBDIRECTORIES field to a pathname, was  discarded because it imposed an unnatural distinction between a toplevel  directory and its subdirectories. Pitman's guess is the the idea was to  try to make it a compatible change, but since most programmers will   probably want to change from implementation-specific primitives to portable  ones anyway, that's probably not such a big deal. Also, there might have  been some programs which thought the change was compatible and ended up  ignoring important information (the :SUBDIRECTORIES field). Pitman thought  it would be better if people just accepted the cost of an incompatible  change in order to get something really pretty as a result.  This issue used to address the issue of relative pathnames (pathnames  relative to some default which is separately maintained). Pitman removed  this issue for now in order to simplify things. He feels the issue should  be resubmitted under separate cover so that it can be discussed separately.*start*04708 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 29 DEC 88 10:32:16 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 29 Dec 88  10:30:45 PSTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 513134; Thu 29-Dec-88 13:29:18 ESTDate: Thu, 29 Dec 88 13:29 ESTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 3)To: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: CL-Cleanup@SAIL.STANFORD.EDUIn-Reply-To: <881228143206.5.KMP@BOBOLINK.SCRC.Symbolics.COM>Message-ID: <19881229182903.0.MOON@EUPHRATES.SCRC.Symbolics.COM>I approve PATHNAME-SUBDIRECTORY-LIST:NEW-REPRESENTATION but note thefollowing typos and proposed simplifications.  Also, don't you needfunctions like Symbolics' DIRECTORY-PATHNAME-AS-FILE andPATHNAME-AS-DIRECTORY?  The conversion between the name of a directoryand the directory component of a file inferior to that directory issystem-dependent, for example TOPS-20 appends a type field and Unix doesnot.  Also in some systems the root directory has a name and in othersit doesn't.  Of course these functions signal an error innon-hierarchical file systems.  Should there be a separate proposal forthese?Typos (and some discussion):    Problem Description:      - In some implementations "FOO.BAR" might denote the "BAR" subdirectory        of "FOO" while in other implementations because "." is not the        separator.Some words must be missing after "while".    Proposal (PATHNAME-SUBDIRECTORY-LIST:NEW-REPRESENTATION)       :UP         - Go upward in directory structure (semantic).       :BACK       - Go upward in directory structure (syntactic).      The difference between up and back is that if there is a directory        (:ABSOLUTE "X" "Y" "Z")      linked to         (:ABSOLUTE "A" "B" "C")      and there also exist directories        (:ABSOLUTE "A" "B" "Q")        (:ABSOLUTE "X" "Y" "Q")      then        (:ABSOLUTE "X" "Y" "Z" :OUT "Q")      designates        (:ABSOLUTE "A" "B" "Q")      while        (:ABSOLUTE "X" "Y" "Z" :UP "Q")      designates        (:ABSOLUTE "X" "Y" "Q")Is :OUT a typo for :BACK?  Also I don't understand what your proposedsemantic/syntactic distinction is.  I almost thought I did until I readthe above text carefully and saw that the syntactic one chases linksto the truename and the semantic one does not, which seems backwards.I also don't think :UP and :BACK are meaningful anywhere except immediatelyafter :RELATIVE, although I have to concede that Unix disagrees with meand therefore Symbolics Genera's Unix pathname support also disagreeswith me.  But if they were only allowed immediately after :RELATIVE Idon't think you would need two of them.  I also don't think thatMERGE-PATHNAMES should ever look at what files/directories actuallyexist in the file system, which makes me opposed to the existenceof the one that you have called syntactic.  Is this really somethingwe need, or will TRUENAME do the job?I think we should only have :UP and not :BACK.    Current Practice:       - Genera represents Unix ".." as :UP, but deals with :UP          syntactically, not semantically.After you straighten out the definition of syntactic and semantic, checkwhether this statement is true.  (I'm always irked by proposals wherethe current practice section is wrong, because someone wrote an originalproposal where the current practice section was right, then the groupchanged the proposal all around but didn't update the current practicesection).    Discussion:      This issue used to address the issue of relative pathnames (pathnames      relative to some default which is separately maintained). Pitman removed      this issue for now in order to simplify things. He feels the issue should      be resubmitted under separate cover so that it can be discussed separately.It seems to me that this fully addresses relative pathnames already.  Thediscussion of :UP and :BACK (if freed of typos) seems specific enough thateven though this proposal doesn't explicitly propose what MERGE-PATHNAMESdoes with relative pathnames, I think there is only one thing that it coulddo that would be consistent.  A pathname with a :RELATIVE directory isnot very different from a pathname with a NIL directory; in either caseyou have to merge with a default to find the real directory to use; thusI don't think there are any other new issues with relative pathnames.*start*07794 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 29 DEC 88 11:57:56 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 29 Dec 88  11:56:58 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 513196; Thu 29-Dec-88 14:54:41 ESTDate: Thu, 29 Dec 88 14:54 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 3)To: Moon@STONY-BROOK.SCRC.Symbolics.COMcc: KMP@STONY-BROOK.SCRC.Symbolics.COM, CL-Cleanup@SAIL.STANFORD.EDUIn-Reply-To: <19881229182903.0.MOON@EUPHRATES.SCRC.Symbolics.COM>Message-ID: <881229145413.6.KMP@BOBOLINK.SCRC.Symbolics.COM>    Date: Thu, 29 Dec 88 13:29 EST    From: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>    ... don't you need functions like Symbolics' DIRECTORY-PATHNAME-AS-FILE and    PATHNAME-AS-DIRECTORY?  The conversion between the name of a directory    and the directory component of a file inferior to that directory is    system-dependent, for example TOPS-20 appends a type field and Unix does    not.  Also in some systems the root directory has a name and in others    it doesn't.  Of course these functions signal an error in    non-hierarchical file systems.  Should there be a separate proposal for    these? ...I guess it's enough related to this topic that it could piggy back.Certainly these functions made no sense prior to this proposal andnow they are suddenly important, so I'll see about putting them in onnext pass.    ... Is :OUT a typo for :BACK? ...Yeah. Sloppy editing. Sorry.    Also I don't understand what your proposed semantic/syntactic    distinction ...Semantic means you have to probe the file system. Syntactic meanslooking at the file names themselves is enough. Maybe I screwed upthe presentation. I'll double-check.Genera is syntactic in that it doesn't probe when processing :UP.That means that MERGE-PATHNAMES on (:ABSOLUTE "X" "Y" "Z")and (:RELATIVE :UP "Q")returns (:ABSOLUTE "X" "Y" "Q")rather than (:ABSOLUTE "X" "Y" "Z" :UP "Q")If you were going to contract out the :UP, you'd need to probe thefile system to make sure  (:ABSOLUTE "A" "B" "Q")wasn't more correct than (:ABSOLUTE "X" "Y" "Q")so I think Genera has a bug.I think this because if I do: cd /m/n/o cd ../qon Unix I get one place, but in Genera if I visit a file in theeditor named /m/n/o/x.lispand then I type c-X c-F and when prompted for a filename I type ../q/x.lispI end up with /m/n/o/q/x.lisprather than the x.lisp in the directory that Unix itself would haveplopped me in if I'd used the cd commands above.If you disagree, please reply to me privately so we can avoidfurther confusion, quickly iron it out offline, and then report ajoint answer (and rationale) to everyone else once we've achievedconsensus.    I also don't think :UP and :BACK are meaningful anywhere except immediately    after :RELATIVE, although I have to concede that Unix disagrees with me    and therefore Symbolics Genera's Unix pathname support also disagrees    with me.When I previously raised this topic, there were a pile of messages onexactly this subject. My putting these into the proposal was an attemptto address those topics. Even if I took these out, the current proposaloffers the flexibility that implementations could offer them without beingin violation of the spec. On the other hand, if people -are- going to offerthem, we might as well agree on common names if it's possible to do so.    But if they were only allowed immediately after :RELATIVE I    don't think you would need two of them.I claim my example above refutes this.    I also don't think that    MERGE-PATHNAMES should ever look at what files/directories actually    exist in the file system,If you permit :UP in absolute pathnames, you don't have to look in thefile system. You just get some funny names. Most file systems that have this feature permit such funny names, though. eg, /foo/../bar/xis valid in Unix, I understand. If memory serves me, Multics permits>foo>bar>baz<x>y in Multics, no? Our (Symbolics) pathname system doesn'tpermit embedded "<", but the error message suggests that this is onlybecause there's no obvious interpretation. We could define it to mean:BACK rather than :UP, so that syntactic merges could be done andunique pathnames would always be generated.    which makes me opposed to the existence    of the one that you have called syntactic.In any case, I'm sympathetic to your desire to not look in the filesystem. I just think that if a file system designer has made adecision that forces you to look in the file system to get the rightanswer, I don't know what we the CL designers can do to alter that.The same issue comes up for logical devices and as Sandra has remindedus, we've not done a particularly good job of papering over that realexternally-induced issue either.    Is this really something we need, or will TRUENAME do the job?TRUENAME and OPEN would, presumably, not return pathnames with :UPreferences (except maybe in pathological situations which they tellme you can make in Unix if you try hard enough where the only way toget to a directory is to go down first and then dig upward.)    I think we should only have :UP and not :BACK.Nothing forces a file system to have both. The question is whetherthere are some file systems that have one set of semantics and otherswhich have the other. If so, then two tokens are needed. In the discussionleading up to this, people asserted (and I took them at their word) thatthere were such competing semantics.	Current Practice:	   - Genera represents Unix ".." as :UP, but deals with :UP 	     syntactically, not semantically.    After you straighten out the definition of syntactic and semantic, check    whether this statement is true.  (I'm always irked by proposals where    the current practice section is wrong, because someone wrote an original    proposal where the current practice section was right, then the group    changed the proposal all around but didn't update the current practice    section).I'll double-check when I've made the next version.	Discussion:	  This issue used to address the issue of relative pathnames (pathnames	  relative to some default which is separately maintained). Pitman removed	  this issue for now in order to simplify things. He feels the issue should	  be resubmitted under separate cover so that it can be discussed separately.    It seems to me that this fully addresses relative pathnames already.  The    discussion of :UP and :BACK (if freed of typos) seems specific enough that    even though this proposal doesn't explicitly propose what MERGE-PATHNAMES    does with relative pathnames, I think there is only one thing that it could    do that would be consistent.  A pathname with a :RELATIVE directory is    not very different from a pathname with a NIL directory; in either case    you have to merge with a default to find the real directory to use; thus    I don't think there are any other new issues with relative pathnames.Well, there was the whole treatment of :UP. I hadn't really meant for thisproposal to specify that treatment so much as to identify a common representationso we'd be a little less divergent in the areas we hadn't really specified.Does anyone think I should add a disclaimer in the proposal body similar to theone for :OLDEST, :INSTALLED, etc in pathname versions in CLtL that says thatalthough these are semi-standard names, there is no attached semantics?*start*05250 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 29 DEC 88 13:09:02 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 29 Dec 88  13:07:30 PSTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 513261; Thu 29-Dec-88 16:05:23 ESTDate: Thu, 29 Dec 88 16:05 ESTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 3)To: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: CL-Cleanup@SAIL.STANFORD.EDUIn-Reply-To: <881229145413.6.KMP@BOBOLINK.SCRC.Symbolics.COM>Message-ID: <19881229210501.0.MOON@EUPHRATES.SCRC.Symbolics.COM>    Date: Thu, 29 Dec 88 14:54 EST    From: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>	Date: Thu, 29 Dec 88 13:29 EST	From: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>	Also I don't understand what your proposed semantic/syntactic	distinction ...    Semantic means you have to probe the file system. Syntactic means    looking at the file names themselves is enough. Maybe I screwed up    the presentation. I'll double-check.OK, I understand, and you did screw up the presentation.	But if they were only allowed immediately after :RELATIVE I	don't think you would need two of them.    I claim my example above refutes this.Agreed.	I also don't think that	MERGE-PATHNAMES should ever look at what files/directories actually	exist in the file system,    If you permit :UP in absolute pathnames, you don't have to look in the    file system. You just get some funny names. Most file systems that     have this feature permit such funny names, though. eg, /foo/../bar/x    is valid in Unix, I understand. If memory serves me, Multics permits    >foo>bar>baz<x>y in Multics, no? No.  Although that's from memory: there are few Multices left, I don'thave an account of any of them, and my manuals are in the attic at home.I think you got syntactic and semantic mixed up again.  I think you'resaying that MERGE-PATHNAMES of a relative directory against an absolutedirectory will remove :UP, since that's purely syntactic, but will leave:BACK in the middle of the merged directory, since resolving :BACK"semantically" would require accessing the file system, whichMERGE-PATHNAMES doesn't do.  Okay.These names are extremely confusing, obviously.  Can anyone thinkof better ones than :UP and :BACK?				     Our (Symbolics) pathname system doesn't    permit embedded "<", but the error message suggests that this is only    because there's no obvious interpretation. The error message I get doesn't suggest anything, it's just "Embedded <?".					       We could define it to mean    :BACK rather than :UP, so that syntactic merges could be done and    unique pathnames would always be generated.I don't understand this sentence.  Say it again after we all agree onwhich one is :UP and which one is :BACK.	which makes me opposed to the existence	of the one that you have called syntactic.    In any case, I'm sympathetic to your desire to not look in the file    system. I just think that if a file system designer has made a    decision that forces you to look in the file system to get the right    answer, I don't know what we the CL designers can do to alter that.    The same issue comes up for logical devices and as Sandra has reminded    us, we've not done a particularly good job of papering over that real    externally-induced issue either.	Is this really something we need, or will TRUENAME do the job?    TRUENAME and OPEN would, presumably, not return pathnames with :UP    references (except maybe in pathological situations which they tell    me you can make in Unix if you try hard enough where the only way to    get to a directory is to go down first and then dig upward.)	I think we should only have :UP and not :BACK.    Nothing forces a file system to have both. The question is whether    there are some file systems that have one set of semantics and others    which have the other. If so, then two tokens are needed. In the discussion    leading up to this, people asserted (and I took them at their word) that    there were such competing semantics.I don't know enough about the weird file systems out there to dispute this.    Well, there was the whole treatment of :UP. I hadn't really meant for this    proposal to specify that treatment so much as to identify a common representation    so we'd be a little less divergent in the areas we hadn't really specified.    Does anyone think I should add a disclaimer in the proposal body similar to the    one for :OLDEST, :INSTALLED, etc in pathname versions in CLtL that says that    although these are semi-standard names, there is no attached semantics?Yes, I think :UP and :OLDEST have the same status, but no I don't agreethat that status is that they have no semantics.  I agree with what CLtLpage 412 actually says, which is that either an implementation doesn'tsupport these keywords or if it does support them they have prescribedmeanings.*start*01405 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 29 DEC 88 14:52:47 PSTReceived: from lucid.com by SAIL.Stanford.EDU with TCP; 29 Dec 88  14:51:48 PSTReceived: from bhopal ([192.9.200.13]) by heavens-gate.lucid.com id AA01199g; Thu, 29 Dec 88 14:46:14 PSTReceived: by bhopal id AA11773g; Thu, 29 Dec 88 14:48:23 PSTDate: Thu, 29 Dec 88 14:48:23 PSTFrom: Jim McDonald <jlm@lucid.com>Message-Id: <8812292248.AA11773@bhopal>To: Moon@STONY-BROOK.SCRC.Symbolics.COMCc: KMP@STONY-BROOK.SCRC.Symbolics.COM, CL-Cleanup@SAIL.STANFORD.EDUIn-Reply-To: David A. Moon's message of Thu, 29 Dec 88 13:29 ESTSubject: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 3)>>    Is this really something we need, or will TRUENAME do the job?If you're trying to create a filename to be used for output, it mightnot exist yet (hence TRUENAME would signal an error), but there mightbe various funny links in its directory path you would like totraverse.  Presumably you could use PROBE-FILE on some part of thename (perhaps recursively down through the super-directories), thenmerge in the remaining part, but that seems enough error-prone to beworth hiding. BTW, I think the labelling of semantic/syntactix examples was reversedin the proposal, independantly of :UP vs. :BACK.  jlm*start*07308 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 04 MAR 89 11:22:42 PSTReceived: from moon.src.honeywell.com (ALTURA.HONEYWELL.COM) by SAIL.Stanford.EDU with TCP; 4 Mar 89  11:22:37 PSTReturn-Path: <alarson@src.honeywell.com>Received: from pavo.SRC.Honeywell.COM by moon.src.honeywell.com (5.59/smail2.6.3/06-17-88);	Sat, 4 Mar 89 13:20:19 CST id AA06415 for cl-cleanup@sail.stanford.eduPosted-Date: Sat, 4 Mar 89 13:18:42 CSTReceived: by pavo.src.honeywell.com (3.2/SMI-3.2)	id AA12921; Sat, 4 Mar 89 13:18:42 CSTDate: Sat, 4 Mar 89 13:18:42 CSTFrom: alarson@src.honeywell.com (Aaron Larson)Message-Id: <8903041918.AA12921@pavo.src.honeywell.com>To: cl-cleanup@sail.stanford.eduSubject: MERGE-PATHNAMES-DIRECTORY:EXTENDI understand that there may be a proposal that deals with this topic underdiscussion in Cleanup, if so I'm willing to retract this submission.Issue:         MERGE-PATHNAMES-DIRECTORYReferences:    MERGE-PATHNAMES (p415), MAKE-PATHNAME (p416),	       PATHNAME-DIRECTORY (p417), DIRECTORY-NAMESTRING (p417)Category:      CHANGEEdit history:  03-Mar-89, Version 1 by ALarsonProblem description: Merging of pathname components currently only supports complete replacement.  While this is satisfactory for "simple" components such as type and version, the directory component on most modern operating systems must describe a hierarchical directory structure and as such could benefit from a more sophisticated merging policy. For example; many large software packages exist in a collection of directories that are related in a specific way starting at an arbitrary location in the directory hierarchy (e.g. the FOO package may be structured with ....foo/src, ....foo/bin, ....foo/doc, etc.  where "...." is some arbitrary directory path).  The current specification of MERGE-PATHNAMES does not permit the two parts of the directory component to be specified separately in an implementation independent manner such that MERGE-PATHNAMES could construct the entire directory path.Proposal MERGE-PATHNAMES-DIRECTORY:EXTEND Introduce the concept of an "absolute" pathname and a "relative" pathname. An absolute pathname is one that starts at the beginning (or top) of the host file system, a relative pathname is one which starts at an unspecified location.  A relative pathname must be merged with a absolute pathname before it can be used to reference a file. Specify that when the PATHNAME (first) argument to MERGE-PATHNAMES is a relative pathname, the directory component of the DEFAULTS (second) argument will appear first in the directory component of the resulting pathname, followed by the directory component of the PATHNAME argument. If the PATHNAME argument is an absolute pathname, then the directory component of the resulting pathname will be the same as the directory component of the PATHNAME argument. Extend MAKE-PATHNAME:    The value specified for the :DIRECTORY keyword may be a list of keywords   and strings that denote the directory components in the directory path.   If the list begins with the keyword :ABSOLUTE the resulting pathname is   absolute, if the list begins with the keyword :RELATIVE then the   resulting pathname is relative.  The results are implementation defined   if the list does not begin with one the keywords :RELATIVE or :ABSOLUTE.   In addition to :ABSOLUTE and :RELATIVE, an implementation may permit   additional keywords to appear in the directory list.  The following   keywords, if they are accepted will have the following meaning; :WILD   matches all directories at the given location in the directory path, :UP   specifies that when MERGE-PATHNAMES is applied, one directory will be   eliminated from the resulting directory path, and :WILD-INFERIORS   which matches all directories below the point at which the   :WILD-INFERIORS keyword appears in the directory path.<<< There should be a way to deal with UNIX style pathnames where    :UP is not strictly syntactic (i.e. it may depend on the file system.    A keyword dealing with this sort of thing would have to be maintained    until TRUENAME was gotten.  I don't have a good candidate name for it    however. >>>  Introduce a new function;    PATHNAME-ABSOLUTE-P path  Path should be pathname, PATHNAME-ABSOLUTE-P returns true if path is an  absolute pathname, and false otherwise.  Specify that PATHNAME-DIRECTORY returns a list of the directory  componentsfor the given pathname.  If pathname is an absolute pathname,  then the CAR of the list will be :ABSOLUTE, otherwise it will be  :RELATIVE.  The results are undefined if the return value is modified.Test Cases/Examples:  (setq abs-1 (MAKE-PATHNAME :DIRECTORY '(:ABSOLUTE "a")))  (setq abs-2 (MAKE-PATHNAME :DIRECTORY '(:ABSOLUTE "b")))  (setq rel-1 (MAKE-PATHNAME :DIRECTORY '(:RELATIVE "c")))  (setq rel-2 (MAKE-PATHNAME :DIRECTORY '(:RELATIVE "d"")))  (PATHNAME-DIRECTORY (MERGE-PATHNAMES abs-1 abs-2)) => (:ABSOLUTE "a")   (PATHNAME-DIRECTORY (MERGE-PATHNAMES abs-1 rel-1)) => (:ABSOLUTE "a")  (PATHNAME-DIRECTORY (MERGE-PATHNAMES rel-1 abs-1)) => (:ABSOLUTE "a" "c")  (PATHNAME-DIRECTORY (MERGE-PATHNAMES rel-1 rel-2)) => (:RELATIVE "d" "c")  (NOT (PATHNAME-ABSOLUTE-P abs-1)) => NIL  (PATHNAME-ABSOLUTE-P rel-1) => NILRationale:Current practice:Allegro ExCL uses the same representations as descrived in this proposal,and lucid and Symbolics Genera (presumably TI lispm as well) are veryclose.  Allegro CL and Symbolics Genera 7.2 already perform merging asdescribed in this proposal (which is clearly not legal CLtL).  KCL, VAXLISP2.1 and LUCID v?? do pathname directory merging as described in CLtL.Symbolics Genera, LUCID, KCL, and Allegro already return lists fromPATHNAME-DIRECTORY, VAXLISP returns a string.  Symbolics Genera currentlydoes pathname canonicalization for components specified in calls tomake-pathname, and reverses the canonicalization in the pathname-*functions, but the intermediate pathname has the case of the componentsinverted (at least for BSD 4.2 style pathnames).			   PATHNAME-DIRECTORY results			Absolute		Relative  KCL (unix)		(:ROOT . strings)	(strings)  Franz Allegro (unix)	(:ABSOLUTE . strings)	(:RELATIVE . strings)  Symbolics (lispm)	(strings)		(:RELATIVE . strings)  Lucid (unix)		(strings)		(:RELATIVE . strings)  Cost to Implementors:Unknown, but not likely to be excessive.Cost to Users:Minimal.  This is an imcompatible change in that pathname merging will nolonger always en mass replace the directory component, however portableprograms can currently only be using absolute pathnames whose behaviourremans unchanged.  The return value of PATHNAME-DIRECTORY is undefined now,this proposal would make it defined.  Although this could break existingprograms, they are already not portable.Cost of non-adoption:Manipulation of structured directory components will continue to be difficult/implementation specific.Benefits:Manipulating structured directory components will be easier, and thepathname functions will more accurately model existing file systemstructure. Esthetics:None.Discussion:*start*00898 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 07 MAR 89 15:03:15 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 7 Mar 89  15:03:58 PSTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 552503; Tue 7-Mar-89 18:01:39 ESTDate: Tue, 7 Mar 89 18:01 ESTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: MERGE-PATHNAMES-DIRECTORY:EXTENDTo: Aaron Larson <alarson@src.honeywell.com>cc: cl-cleanup@sail.stanford.eduIn-Reply-To: <8903041918.AA12921@pavo.src.honeywell.com>Message-ID: <19890307230113.6.MOON@EUPHRATES.SCRC.Symbolics.COM>How does this relate to the existing issue PATHNAME-SUBDIRECTORY-LIST,on which we have not yet voted?*start*01899 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 07 MAR 89 23:45:36 PSTReceived: from moon.src.honeywell.com (ALTURA.HONEYWELL.COM) by SAIL.Stanford.EDU with TCP; 7 Mar 89  23:45:57 PSTReturn-Path: <alarson@src.honeywell.com>Received: from quasar.SRC.Honeywell.COM by moon.src.honeywell.com (5.59/smail2.6.3/06-17-88);	Tue, 7 Mar 89 21:17:29 CST id AA25303 for cl-cleanup@sail.stanford.eduPosted-Date: Tue, 7 Mar 89 21:16:34 CSTReceived: by quasar.src.honeywell.com (3.2/SMI-3.2)	id AA05965; Tue, 7 Mar 89 21:16:34 CSTDate: Tue, 7 Mar 89 21:16:34 CSTFrom: alarson@src.honeywell.com (Aaron Larson)Message-Id: <8903080316.AA05965@quasar.src.honeywell.com>To: Moon@STONY-BROOK.SCRC.Symbolics.COMCc: cl-cleanup@sail.stanford.eduIn-Reply-To: David A. Moon's message of Tue, 7 Mar 89 18:01 EST <19890307230113.6.MOON@EUPHRATES.SCRC.Symbolics.COM>Subject: MERGE-PATHNAMES-DIRECTORY:EXTEND   Posted-Date: Tue, 7 Mar 89 18:01 EST   Date: Tue, 7 Mar 89 18:01 EST   From: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>   How does this relate to the existing issue PATHNAME-SUBDIRECTORY-LIST,   on which we have not yet voted?I'm not sure, I've never seen the PATHNAME-SUBDIRECTORY-LIST proposal.  Ihad been talking to cperdue and pitman about pathname cleanup issues (I'mnot currently on the cleanup list).  They both alluded to the fact thatthere was a pathname cleanup similar to the one I was writing, but I nevergot a copy of it, and the last time I checked there wasn't a copy in thecl-cleanup/pending directory on arisia.If it would reduce confusion, I'm willing to be put on the cleanup list, orif I could get a copy of the PATHNAME-SUBDIRECTORY-LIST proposal, I couldeither summarize the diffs, or retract mine.Sorry for any confusion.*start*01030 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 08 MAR 89 09:29:22 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 8 Mar 89  09:30:05 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 552901; Wed 8-Mar-89 12:27:21 ESTDate: Wed, 8 Mar 89 12:27 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: MERGE-PATHNAMES-DIRECTORYTo: Aaron Larson <alarson@src.honeywell.com>cc: Moon@STONY-BROOK.SCRC.Symbolics.COM, CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <8903080316.AA05965@quasar.src.honeywell.com>Message-ID: <890308122712.3.KMP@BOBOLINK.SCRC.Symbolics.COM>I just now forwarded you a copy of PATHNAME-SUBDIRECTORY-LIST.If possible, please suggest ammendments to it.Otherwise, please say why it is sufficiently different that youwant an alternate proposal.*start*25684 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 15-Mar-89 07:22:44 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 15 MAR 89 07:22:35 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 15 Mar 89  07:20:26 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 15 MAR 89 07:15:06 PSTDate: 15 Mar 89 07:14 PSTFrom: masinter.paTo: alarson@src.honeywell.com (Aaron Larson)cc: cl-cleanup@sail.stanford.eduMessage-ID: <890315-071506-3662@Xerox>Unfortunately, there is a "nest" of cleanup items on pathnamesthat have been postponed. Here's PATHNAME-SUBDIRECTORY-LIST.     ----- Begin Forwarded Messages -----Date: Wed, 28 Dec 88 14:32 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 3)To: CL-Cleanup@SAIL.STANFORD.EDUcc: KMP@STONY-BROOK.SCRC.Symbolics.COMOk, I've been through and I think successfully merged all the pendingdiscussion, most of which seemed to center around issues of :UP.-----Issue:          PATHNAME-SUBDIRECTORY-LISTReferences:     Pathnames (pp410-413), MAKE-PATHNAME (p416),		PATHNAME-DIRECTORY (p417)Category:       CHANGEEdit history:   18-Jun-87, Version 1 by Ghenis.pasa@Xerox.COM	        05-Jul-88, Version 2 by Pitman (major revision)		28-Dec-88, Version 3 by Pitman (merge discussion)Status:	        For Internal DiscussionRelated-Issues: PATHNAME-COMPONENT-CASEProblem Description:  It is impossible to write portable code that can produce a pathname  in a subdirectory of a hierarchical file system. This defeats much of  the purpose of having an abstraction like pathname.  According to CLtL, only a string is a portable filler of the directory  slot, but in order to denote a subdirectory, the use of separators (such  as dots, slashes, or backslashes) would be necessary. The very fact that  such syntax varies from host to host means that although the  representation might be "portable", the code using that representation   is not portable.  This problem is even worse for programs running on machines on a network  that can retrieve files from multiple hosts, each using a different OS  and thus a different subdirectory delimiter.  Related problems:  - In some implementations "FOO.BAR" might denote the "BAR" subdirectory    of "FOO" while in other implementations because "." is not the    separator. To be safe, portable programs must avoid all potential    separators.  - Even in implementations where "." is the separator, "FOO.BAR" may be    recognized by some to mean the "BAR" subdirectory of "FOO" and by others    to mean `a seven letter directory with "." being a superquoted part of    its name'.  - In fact, CLtL does not even say for toplevel directories whether the    directory delimiters are a part. eg, is "foo" or "/foo" the directory    filler for a unix pathname "/foo/bar.lisp". Similarly, is "[FOO]" or    "FOO" the directory filler for a VMS pathname "[FOO]ME.LSP"?Proposal (PATHNAME-SUBDIRECTORY-LIST:NEW-REPRESENTATION)  Allow a list to be a filler of a pathname. The car of the list may be either  of the symbols :ABSOLUTE or :RELATIVE.  If the car of the list is :RELATIVE, the rest of the list is the  implementation-dependent result of PARSE-NAMESTRING for file systems which  have relative pathnames. Unless some other proposal is submitted to clarify  the behavior of relative pathnames in merging, etc. that behavior is left  undefined.  If the car of the list is :ABSOLUTE, the rest of the list is a list of   strings each naming a single level of directory structure. The strings  should contain only the directory names themselves -- no separator  characters.  The spec (:ABSOLUTE) represents the root directory.  Clarify that if a string is used as a filler of a directory field in a  pathname, it should be the unadorned name of a toplevel directory.  Specifying a string, str, is equivalent to specifying the list  (:ABSOLUTE str).  In place of a string, at any point in the list, keyword symbols may occur  to deal with special file notations. The following symbols have standard  meanings; they may not be meaningful for all operating systems, and are  intended for use only on those operating systems where they have meaning:   :WILD           - Wildcard match of one level of directory structure.   :WILD-INFERIORS - Wildcard match of any number of directory levels.   :UP             - Go upward in directory structure (semantic).   :BACK 	   - Go upward in directory structure (syntactic).  The difference between up and back is that if there is a directory    (:ABSOLUTE "X" "Y" "Z")  linked to     (:ABSOLUTE "A" "B" "C")  and there also exist directories    (:ABSOLUTE "A" "B" "Q")    (:ABSOLUTE "X" "Y" "Q")  then    (:ABSOLUTE "X" "Y" "Z" :OUT "Q")  designates    (:ABSOLUTE "A" "B" "Q")  while    (:ABSOLUTE "X" "Y" "Z" :UP "Q")  designates    (:ABSOLUTE "X" "Y" "Q")Test Case:  (PATHNAME-DIRECTORY (PARSE-NAMESTRING "[FOO.BAR]BAZ.LSP")) ;on VMS  => (:ABSOLUTE "FOO" "BAR")  (PATHNAME-DIRECTORY (PARSE-NAMESTRING "/foo/bar/baz.lisp")) ;on Unix  => (:ABSOLUTE "foo" "bar")  or (:ABSOLUTE "FOO" "BAR")  If PATHNAME-COMPONENT-CASE:CANONICALIZE passes, only the 2nd return value.  (PATHNAME-DIRECTORY (PARSE-NAMESTRING ">foo>**>bar>baz.lisp")) ;on LispM  => (:ABSOLUTE "FOO" :WILD-INFERIORS "BAR")  (PATHNAME-DIRECTORY (PARSE-NAMESTRING ">foo>*>bar>baz.lisp")) ;on LispM  => (:ABSOLUTE "FOO" :WILD "BAR")Rationale:  This would allow programs to usefully deal with hierarchical file systems,  which are by far the most common file system type.Current Practice:  Symbolics Genera implements something very similar to this. The main  differences are:   - In Genera, there is no :ABSOLUTE keyword at the head of the list.     This has been shown to cause some problems in dealing with root     directories. Genera represents the root directory by a keyword     symbol (rather than a list) because the list representation      was not adequately general.   - Genera represents Unix ".." as :UP, but deals with :UP      syntactically, not semantically.Cost to Implementors:  In principle, nothing about the implementation needs to change except  the treatment of the directory field by MAKE-PATHNAME and  PATHNAME-DIRECTORY. The internal representation can otherwise be left  as-is if necessary.  For implementations that choose to rationalize this representation  throughout their internals and any other implementation-specific  accessors, the cost will be necessarily higher.Cost to Users:  None. This change is upward compatible.Cost of Non-Adoption:  Serious portability problems would continue to occur. Programmers would be  driven to the use of implementation-specific facilities because the need  for this is frequently impossible to ignore.Benefits:  The serious costs of non-adoption would be avoided.Aesthetics:  This representation of hierarchical pathnames is easy to use and quite  general. Users will probably see this as an improvement in the aesthetics.Discussion:  This issue was raised a while back but no one was fond of the particular  proposal that was submitted. This is an attempt to revive the issue.  The original proposal, to add a :SUBDIRECTORIES field to a pathname, was  discarded because it imposed an unnatural distinction between a toplevel  directory and its subdirectories. Pitman's guess is the the idea was to  try to make it a compatible change, but since most programmers will   probably want to change from implementation-specific primitives to portable  ones anyway, that's probably not such a big deal. Also, there might have  been some programs which thought the change was compatible and ended up  ignoring important information (the :SUBDIRECTORIES field). Pitman thought  it would be better if people just accepted the cost of an incompatible  change in order to get something really pretty as a result.  This issue used to address the issue of relative pathnames (pathnames  relative to some default which is separately maintained). Pitman removed  this issue for now in order to simplify things. He feels the issue should  be resubmitted under separate cover so that it can be discussed separately.     ----- Next Message -----Date: Thu, 29 Dec 88 13:29 ESTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 3)To: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: CL-Cleanup@SAIL.STANFORD.EDUIn-Reply-To: <881228143206.5.KMP@BOBOLINK.SCRC.Symbolics.COM>I approve PATHNAME-SUBDIRECTORY-LIST:NEW-REPRESENTATION but note thefollowing typos and proposed simplifications.  Also, don't you needfunctions like Symbolics' DIRECTORY-PATHNAME-AS-FILE andPATHNAME-AS-DIRECTORY?  The conversion between the name of a directoryand the directory component of a file inferior to that directory issystem-dependent, for example TOPS-20 appends a type field and Unix doesnot.  Also in some systems the root directory has a name and in othersit doesn't.  Of course these functions signal an error innon-hierarchical file systems.  Should there be a separate proposal forthese?Typos (and some discussion):    Problem Description:      - In some implementations "FOO.BAR" might denote the "BAR" subdirectory        of "FOO" while in other implementations because "." is not the        separator.Some words must be missing after "while".    Proposal (PATHNAME-SUBDIRECTORY-LIST:NEW-REPRESENTATION)       :UP         - Go upward in directory structure (semantic).       :BACK       - Go upward in directory structure (syntactic).      The difference between up and back is that if there is a directory        (:ABSOLUTE "X" "Y" "Z")      linked to         (:ABSOLUTE "A" "B" "C")      and there also exist directories        (:ABSOLUTE "A" "B" "Q")        (:ABSOLUTE "X" "Y" "Q")      then        (:ABSOLUTE "X" "Y" "Z" :OUT "Q")      designates        (:ABSOLUTE "A" "B" "Q")      while        (:ABSOLUTE "X" "Y" "Z" :UP "Q")      designates        (:ABSOLUTE "X" "Y" "Q")Is :OUT a typo for :BACK?  Also I don't understand what your proposedsemantic/syntactic distinction is.  I almost thought I did until I readthe above text carefully and saw that the syntactic one chases linksto the truename and the semantic one does not, which seems backwards.I also don't think :UP and :BACK are meaningful anywhere except immediatelyafter :RELATIVE, although I have to concede that Unix disagrees with meand therefore Symbolics Genera's Unix pathname support also disagreeswith me.  But if they were only allowed immediately after :RELATIVE Idon't think you would need two of them.  I also don't think thatMERGE-PATHNAMES should ever look at what files/directories actuallyexist in the file system, which makes me opposed to the existenceof the one that you have called syntactic.  Is this really somethingwe need, or will TRUENAME do the job?I think we should only have :UP and not :BACK.    Current Practice:       - Genera represents Unix ".." as :UP, but deals with :UP          syntactically, not semantically.After you straighten out the definition of syntactic and semantic, checkwhether this statement is true.  (I'm always irked by proposals wherethe current practice section is wrong, because someone wrote an originalproposal where the current practice section was right, then the groupchanged the proposal all around but didn't update the current practicesection).    Discussion:      This issue used to address the issue of relative pathnames (pathnames      relative to some default which is separately maintained). Pitman removed      this issue for now in order to simplify things. He feels the issue should      be resubmitted under separate cover so that it can be discussed separately.It seems to me that this fully addresses relative pathnames already.  Thediscussion of :UP and :BACK (if freed of typos) seems specific enough thateven though this proposal doesn't explicitly propose what MERGE-PATHNAMESdoes with relative pathnames, I think there is only one thing that it coulddo that would be consistent.  A pathname with a :RELATIVE directory isnot very different from a pathname with a NIL directory; in either caseyou have to merge with a default to find the real directory to use; thusI don't think there are any other new issues with relative pathnames.     ----- Next Message -----Date: Thu, 29 Dec 88 14:54 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 3)To: Moon@STONY-BROOK.SCRC.Symbolics.COMcc: KMP@STONY-BROOK.SCRC.Symbolics.COM, CL-Cleanup@SAIL.STANFORD.EDUIn-Reply-To: <19881229182903.0.MOON@EUPHRATES.SCRC.Symbolics.COM>    Date: Thu, 29 Dec 88 13:29 EST    From: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>    ... don't you need functions like Symbolics' DIRECTORY-PATHNAME-AS-FILE and    PATHNAME-AS-DIRECTORY?  The conversion between the name of a directory    and the directory component of a file inferior to that directory is    system-dependent, for example TOPS-20 appends a type field and Unix does    not.  Also in some systems the root directory has a name and in others    it doesn't.  Of course these functions signal an error in    non-hierarchical file systems.  Should there be a separate proposal for    these? ...I guess it's enough related to this topic that it could piggy back.Certainly these functions made no sense prior to this proposal andnow they are suddenly important, so I'll see about putting them in onnext pass.    ... Is :OUT a typo for :BACK? ...Yeah. Sloppy editing. Sorry.    Also I don't understand what your proposed semantic/syntactic    distinction ...Semantic means you have to probe the file system. Syntactic meanslooking at the file names themselves is enough. Maybe I screwed upthe presentation. I'll double-check.Genera is syntactic in that it doesn't probe when processing :UP.That means that MERGE-PATHNAMES on (:ABSOLUTE "X" "Y" "Z")and (:RELATIVE :UP "Q")returns (:ABSOLUTE "X" "Y" "Q")rather than (:ABSOLUTE "X" "Y" "Z" :UP "Q")If you were going to contract out the :UP, you'd need to probe thefile system to make sure  (:ABSOLUTE "A" "B" "Q")wasn't more correct than (:ABSOLUTE "X" "Y" "Q")so I think Genera has a bug.I think this because if I do: cd /m/n/o cd ../qon Unix I get one place, but in Genera if I visit a file in theeditor named /m/n/o/x.lispand then I type c-X c-F and when prompted for a filename I type ../q/x.lispI end up with /m/n/o/q/x.lisprather than the x.lisp in the directory that Unix itself would haveplopped me in if I'd used the cd commands above.If you disagree, please reply to me privately so we can avoidfurther confusion, quickly iron it out offline, and then report ajoint answer (and rationale) to everyone else once we've achievedconsensus.    I also don't think :UP and :BACK are meaningful anywhere except immediately    after :RELATIVE, although I have to concede that Unix disagrees with me    and therefore Symbolics Genera's Unix pathname support also disagrees    with me.When I previously raised this topic, there were a pile of messages onexactly this subject. My putting these into the proposal was an attemptto address those topics. Even if I took these out, the current proposaloffers the flexibility that implementations could offer them without beingin violation of the spec. On the other hand, if people -are- going to offerthem, we might as well agree on common names if it's possible to do so.    But if they were only allowed immediately after :RELATIVE I    don't think you would need two of them.I claim my example above refutes this.    I also don't think that    MERGE-PATHNAMES should ever look at what files/directories actually    exist in the file system,If you permit :UP in absolute pathnames, you don't have to look in thefile system. You just get some funny names. Most file systems that have this feature permit such funny names, though. eg, /foo/../bar/xis valid in Unix, I understand. If memory serves me, Multics permits>foo>bar>baz<x>y in Multics, no? Our (Symbolics) pathname system doesn'tpermit embedded "<", but the error message suggests that this is onlybecause there's no obvious interpretation. We could define it to mean:BACK rather than :UP, so that syntactic merges could be done andunique pathnames would always be generated.    which makes me opposed to the existence    of the one that you have called syntactic.In any case, I'm sympathetic to your desire to not look in the filesystem. I just think that if a file system designer has made adecision that forces you to look in the file system to get the rightanswer, I don't know what we the CL designers can do to alter that.The same issue comes up for logical devices and as Sandra has remindedus, we've not done a particularly good job of papering over that realexternally-induced issue either.    Is this really something we need, or will TRUENAME do the job?TRUENAME and OPEN would, presumably, not return pathnames with :UPreferences (except maybe in pathological situations which they tellme you can make in Unix if you try hard enough where the only way toget to a directory is to go down first and then dig upward.)    I think we should only have :UP and not :BACK.Nothing forces a file system to have both. The question is whetherthere are some file systems that have one set of semantics and otherswhich have the other. If so, then two tokens are needed. In the discussionleading up to this, people asserted (and I took them at their word) thatthere were such competing semantics.	Current Practice:	   - Genera represents Unix ".." as :UP, but deals with :UP 	     syntactically, not semantically.    After you straighten out the definition of syntactic and semantic, check    whether this statement is true.  (I'm always irked by proposals where    the current practice section is wrong, because someone wrote an original    proposal where the current practice section was right, then the group    changed the proposal all around but didn't update the current practice    section).I'll double-check when I've made the next version.	Discussion:	  This issue used to address the issue of relative pathnames (pathnames	  relative to some default which is separately maintained). Pitman removed	  this issue for now in order to simplify things. He feels the issue should	  be resubmitted under separate cover so that it can be discussed separately.    It seems to me that this fully addresses relative pathnames already.  The    discussion of :UP and :BACK (if freed of typos) seems specific enough that    even though this proposal doesn't explicitly propose what MERGE-PATHNAMES    does with relative pathnames, I think there is only one thing that it could    do that would be consistent.  A pathname with a :RELATIVE directory is    not very different from a pathname with a NIL directory; in either case    you have to merge with a default to find the real directory to use; thus    I don't think there are any other new issues with relative pathnames.Well, there was the whole treatment of :UP. I hadn't really meant for thisproposal to specify that treatment so much as to identify a common representationso we'd be a little less divergent in the areas we hadn't really specified.Does anyone think I should add a disclaimer in the proposal body similar to theone for :OLDEST, :INSTALLED, etc in pathname versions in CLtL that says thatalthough these are semi-standard names, there is no attached semantics?     ----- Next Message -----Date: Thu, 29 Dec 88 16:05 ESTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 3)To: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: CL-Cleanup@SAIL.STANFORD.EDUIn-Reply-To: <881229145413.6.KMP@BOBOLINK.SCRC.Symbolics.COM>    Date: Thu, 29 Dec 88 14:54 EST    From: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>	Date: Thu, 29 Dec 88 13:29 EST	From: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>	Also I don't understand what your proposed semantic/syntactic	distinction ...    Semantic means you have to probe the file system. Syntactic means    looking at the file names themselves is enough. Maybe I screwed up    the presentation. I'll double-check.OK, I understand, and you did screw up the presentation.	But if they were only allowed immediately after :RELATIVE I	don't think you would need two of them.    I claim my example above refutes this.Agreed.	I also don't think that	MERGE-PATHNAMES should ever look at what files/directories actually	exist in the file system,    If you permit :UP in absolute pathnames, you don't have to look in the    file system. You just get some funny names. Most file systems that     have this feature permit such funny names, though. eg, /foo/../bar/x    is valid in Unix, I understand. If memory serves me, Multics permits    >foo>bar>baz<x>y in Multics, no? No.  Although that's from memory: there are few Multices left, I don'thave an account of any of them, and my manuals are in the attic at home.I think you got syntactic and semantic mixed up again.  I think you'resaying that MERGE-PATHNAMES of a relative directory against an absolutedirectory will remove :UP, since that's purely syntactic, but will leave:BACK in the middle of the merged directory, since resolving :BACK"semantically" would require accessing the file system, whichMERGE-PATHNAMES doesn't do.  Okay.These names are extremely confusing, obviously.  Can anyone thinkof better ones than :UP and :BACK?				     Our (Symbolics) pathname system doesn't    permit embedded "<", but the error message suggests that this is only    because there's no obvious interpretation. The error message I get doesn't suggest anything, it's just "Embedded <?".					       We could define it to mean    :BACK rather than :UP, so that syntactic merges could be done and    unique pathnames would always be generated.I don't understand this sentence.  Say it again after we all agree onwhich one is :UP and which one is :BACK.	which makes me opposed to the existence	of the one that you have called syntactic.    In any case, I'm sympathetic to your desire to not look in the file    system. I just think that if a file system designer has made a    decision that forces you to look in the file system to get the right    answer, I don't know what we the CL designers can do to alter that.    The same issue comes up for logical devices and as Sandra has reminded    us, we've not done a particularly good job of papering over that real    externally-induced issue either.	Is this really something we need, or will TRUENAME do the job?    TRUENAME and OPEN would, presumably, not return pathnames with :UP    references (except maybe in pathological situations which they tell    me you can make in Unix if you try hard enough where the only way to    get to a directory is to go down first and then dig upward.)	I think we should only have :UP and not :BACK.    Nothing forces a file system to have both. The question is whether    there are some file systems that have one set of semantics and others    which have the other. If so, then two tokens are needed. In the discussion    leading up to this, people asserted (and I took them at their word) that    there were such competing semantics.I don't know enough about the weird file systems out there to dispute this.    Well, there was the whole treatment of :UP. I hadn't really meant for this    proposal to specify that treatment so much as to identify a common representation    so we'd be a little less divergent in the areas we hadn't really specified.    Does anyone think I should add a disclaimer in the proposal body similar to the    one for :OLDEST, :INSTALLED, etc in pathname versions in CLtL that says that    although these are semi-standard names, there is no attached semantics?Yes, I think :UP and :OLDEST have the same status, but no I don't agreethat that status is that they have no semantics.  I agree with what CLtLpage 412 actually says, which is that either an implementation doesn'tsupport these keywords or if it does support them they have prescribedmeanings.     ----- Next Message -----Date: Thu, 29 Dec 88 14:48:23 PSTFrom: Jim McDonald <jlm@lucid.com>To: Moon@STONY-BROOK.SCRC.Symbolics.COMCc: KMP@STONY-BROOK.SCRC.Symbolics.COM, CL-Cleanup@SAIL.STANFORD.EDUIn-Reply-To: David A. Moon's message of Thu, 29 Dec 88 13:29 ESTSubject: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 3)>>    Is this really something we need, or will TRUENAME do the job?If you're trying to create a filename to be used for output, it mightnot exist yet (hence TRUENAME would signal an error), but there mightbe various funny links in its directory path you would like totraverse.  Presumably you could use PROBE-FILE on some part of thename (perhaps recursively down through the super-directories), thenmerge in the remaining part, but that seems enough error-prone to beworth hiding. BTW, I think the labelling of semantic/syntactix examples was reversedin the proposal, independantly of :UP vs. :BACK.  jlm     ----- End Forwarded Messages -----*start*11892 00024 US GV-Info: X3J13-mailer@SAIL.Stanford.EDU at 22-Mar-89 19:20:43 from AGReturn-Path: <X3J13-mailer@SAIL.Stanford.EDU>Received: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 22 MAR 89 19:20:40 PSTReceived: from Riverside.SCRC.Symbolics.COM (SCRC-RIVERSIDE.ARPA) by SAIL.Stanford.EDU with TCP; 22 Mar 89  19:00:00 PSTReceived: from EUPHRATES.SCRC.Symbolics.COM by Riverside.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 325245; Wed 22-Mar-89 21:59:33 ESTDate: Wed, 22 Mar 89 21:59 ESTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 4)To: X3J13@SAIL.STANFORD.EDUMessage-ID: <19890323025928.1.MOON@EUPHRATES.SCRC.Symbolics.COM>This is a last minute update of this issue to fix the problems foundduring discussion of the previous version.  I have fixed typos,including some critical ones that made the proposal impossible tounderstand, standardized terminology, and added specifications formerging of relative directories and for the subset used innon-hierarchical file systems.Issue:          PATHNAME-SUBDIRECTORY-LISTReferences:     Pathnames (pp410-413), MAKE-PATHNAME (p416),                PATHNAME-DIRECTORY (p417)Category:       CHANGEEdit history:   18-Jun-87, Version 1 by Ghenis.pasa@Xerox.COM                05-Jul-88, Version 2 by Pitman (major revision)                28-Dec-88, Version 3 by Pitman (merge discussion)                22-Mar-89, Version 4 by Moon (fix based on discussion)Status:         Trying to be ReleasedRelated-Issues: PATHNAME-COMPONENT-CASEProblem Description:  It is impossible to write portable code that can produce a pathname  in a subdirectory of a hierarchical file system. This defeats much of  the purpose of having an abstraction like pathname.  According to CLtL, only a string is a portable value for the directory  component of a pathname, thus in order to denote a subdirectory, the  use of separators (such as dots, slashes, or backslashes) would be  necessary. The very fact that such syntax varies from host to host  means that although the representation might be "portable", the code  using that representation is not portable.  This problem is even worse for programs running on machines on a network  that can retrieve files from multiple hosts, each using a different OS  and thus a different subdirectory delimiter.  Related problems:  - In some implementations "FOO.BAR" might denote the "BAR" subdirectory    of "FOO", while in other implementations it would denote a top-level    directory, because "." is not the separator. To be safe, portable    programs must avoid all potential separators.  - Even in implementations where "." is the separator, "FOO.BAR" may be    recognized by some to mean the "BAR" subdirectory of "FOO" and by others    to mean `a seven letter directory with "." being a superquoted part of    its name'.  - In fact, CLtL does not even say for toplevel directories whether    the directory delimiter characters are part of the string. eg, is    "foo" or "/foo" the directory component for a unix pathname    "/foo/bar.lisp". Similarly, is "[FOO]" or "FOO" the directory    component for a VMS pathname "[FOO]ME.LSP"?Proposal (PATHNAME-SUBDIRECTORY-LIST:NEW-REPRESENTATION)  Remove the "structured" directory feature mentioned on CLtL p.412.    Allow the value of a pathname's directory component to be a list.  The  car of the list may be either of the symbols :ABSOLUTE or :RELATIVE.  Each remaining element of the list is a string or one of the keyword  symbols listed below.  Each string names a single level of directory  structure.  The strings should contain only the directory names  themselves -- no separator characters.  A list whose car is the symbol :ABSOLUTE represents a directory path  starting from the root directory.  The list (:ABSOLUTE) represents  the root directory.  The list (:ABSOLUTE "foo" "bar" "baz") represents  the directory called "/foo/bar/baz" in Unix [except possibly for  alphabetic case -- that is the subject of a separate issue].  A list whose car is the symbol :RELATIVE represents a directory path  starting from a default directory.  The list (:RELATIVE) has the same  meaning as NIL.  The list (:RELATIVE "foo" "bar") represents the  directory named "bar" in the directory named "foo" in the default  directory [except possibly for alphabetic case -- that is the subject  of a separate issue].  In place of a string, at any point in the list, keyword symbols may occur  to indicate special file notations. The following symbols have standard  meanings; they may not be meaningful for all operating systems, and are  intended for use only on those operating systems where they have meaning.  Implementations are permitted to add additional keyword symbols if  necessary to represent features of their file systems.   :WILD           - Wildcard match of one level of directory structure.   :WILD-INFERIORS - Wildcard match of any number of directory levels.   :UP             - Go upward in directory structure (semantic).   :BACK           - Go upward in directory structure (syntactic).  "Syntactic" means that the action of :BACK depends only on the pathname  and not on the contents of the file system.  "Semantic" means that the  action of :UP depends on the contents of the file system; to resolve  a pathname containing :UP to a pathname whose directory component  contains only :ABSOLUTE and strings requires probing the file system.  :UP differs from :BACK only in file systems that support multiple  names for directories, perhaps via symbolic links.  For example,  suppose that there is a directory    (:ABSOLUTE "X" "Y" "Z")  linked to     (:ABSOLUTE "A" "B" "C")  and there also exist directories    (:ABSOLUTE "A" "B" "Q")    (:ABSOLUTE "X" "Y" "Q")  then    (:ABSOLUTE "X" "Y" "Z" :UP "Q")  designates    (:ABSOLUTE "A" "B" "Q")  while    (:ABSOLUTE "X" "Y" "Z" :BACK "Q")  designates    (:ABSOLUTE "X" "Y" "Q")  If a string is used as the value of the :DIRECTORY argument to  MAKE-PATHNAME, it should be the name of a toplevel directory and  should not contain any directory delimiter characters.  Specifying a  string, str, is equivalent to specifying the list (:ABSOLUTE str).  Specifying the symbol :WILD is equivalent to specifying the list  (:ABSOLUTE :WILD-INFERIORS), or (:ABSOLUTE :WILD) in a  non-hierarchical file system.  The PATHNAME-DIRECTORY function never returns a string nor :WILD; it  always returns NIL, :UNSPECIFIC, or a list.  In non-hierarchical file systems, the only valid list values for the  directory component of a pathname are (:ABSOLUTE string) and  (:ABSOLUTE :WILD).  :RELATIVE directories and the keywords  :WILD-INFERIORS, :UP, and :BACK are not used in non-hierarchical file  systems.  Pathname merging treats a relative directory specially.  Let  <pathname> and <defaults> be the first two arguments to  MERGE-PATHNAMES.  If (PATHNAME-DIRECTORY <pathname>) is a list whose  car is :RELATIVE, and (PATHNAME-DIRECTORY <defaults>) is a list, then  the merged directory is the value of    (APPEND (PATHNAME-DIRECTORY <defaults>)            (CDR (PATHNAME-DIRECTORY <pathname>)))  except that if the resulting list contains an element other than :BACK  or :WILD-INFERIORS, immediately followed by :BACK, both of them are  removed.  This removal of redundant :BACKs is repeated as many times  as possible.  If (PATHNAME-DIRECTORY <defaults>) is not a list, the  merged directory is    (OR (PATHNAME-DIRECTORY <pathname>) (PATHNAME-DIRECTORY <defaults>))  A relative directory in the pathname argument to a function such as  OPEN is merged with *DEFAULT-PATHNAME-DEFAULTS* before accessing the  file system.Test Cases/Examples:  (PATHNAME-DIRECTORY (PARSE-NAMESTRING "[FOO.BAR]BAZ.LSP")) ;on VMS  => (:ABSOLUTE "FOO" "BAR")  (PATHNAME-DIRECTORY (PARSE-NAMESTRING "/foo/bar/baz.lisp")) ;on Unix  => (:ABSOLUTE "foo" "bar")  or (:ABSOLUTE "FOO" "BAR")  If PATHNAME-COMPONENT-CASE:CANONICALIZE passes, only the 2nd return value.  (PATHNAME-DIRECTORY (PARSE-NAMESTRING "../baz.lisp")) ;on Unix  => (:RELATIVE :UP)  (PATHNAME-DIRECTORY (PARSE-NAMESTRING "/foo/bar/../mum/baz")) ;on Unix  => (:ABSOLUTE "foo" "bar" :UP "mum")  (PATHNAME-DIRECTORY (PARSE-NAMESTRING ">foo>**>bar>baz.lisp")) ;on LispM  => (:ABSOLUTE "FOO" :WILD-INFERIORS "BAR")  (PATHNAME-DIRECTORY (PARSE-NAMESTRING ">foo>*>bar>baz.lisp")) ;on LispM  => (:ABSOLUTE "FOO" :WILD "BAR")Rationale:  This would allow programs to usefully deal with hierarchical file  systems, which are by far the most common file system type.Current Practice:  Symbolics Genera implements something very similar to this. The main  differences are:   - In Genera, there is no :ABSOLUTE keyword at the head of the list.     This has been shown to cause some problems in dealing with root     directories. Genera represents the root directory by a keyword     symbol (rather than a list) because the list representation      was not adequately general.   - Genera represents Unix ".." as :UP, but deals with :UP      syntactically, not semantically.Cost to Implementors:  In principle, nothing about the implementation needs to change except  the treatment of the directory component by MAKE-PATHNAME and  PATHNAME-DIRECTORY. The internal representation can otherwise be left  as-is if necessary.  Implementations such as Genera that already have hierarchical directory  handling will have to make an incompatible change to switch to what  is proposed here.  For implementations that choose to rationalize this representation  throughout their internals and any other implementation-specific  accessors, the cost will be necessarily higher.Cost to Users:  None. This change is upward compatible.Cost of Non-Adoption:  Serious portability problems would continue to occur. Programmers would be  driven to the use of implementation-specific facilities because the need  for this is frequently impossible to ignore.Benefits:  The serious costs of non-adoption would be avoided.Aesthetics:  This representation of hierarchical pathnames is easy to use and quite  general. Users will probably see this as an improvement in the aesthetics.Discussion:  This issue was raised a while back but no one was fond of the particular  proposal that was submitted. This is an attempt to revive the issue.  The original proposal, to add a :SUBDIRECTORIES component to a  pathname, was discarded because it imposed an unnatural distinction  between a toplevel directory and its subdirectories. Pitman's guess is  the the idea was to try to make it a compatible change, but since most  programmers will probably want to change from implementation-specific  primitives to portable ones anyway, that's probably not such a big  deal. Also, there might have been some programs which thought the  change was compatible and ended up ignoring important information (the  :SUBDIRECTORIES component). Pitman thought it would be better if  people just accepted the cost of an incompatible change in order to  get something really pretty as a result.  Moon doesn't like having both :UP and :BACK, but admits that some  file systems do it one way and some do it the other.  To keep it simple, we chose not to add to this issue the functions  DIRECTORY-PATHNAME-AS-FILE and PATHNAME-AS-DIRECTORY, which convert  the name of a directory from or to the directory component of a file  inferior to that directory.  This conversion is system-dependent, for  example TOPS-20 appends a type field and Unix does not.  Also in some  systems the root directory has a name and in others it doesn't.  Of  course these functions signal an error in non-hierarchical file  systems.*start*02109 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 22-Mar-89 22:41:15 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 22 MAR 89 22:41:13 PSTReceived: from moon.src.honeywell.com (ALTURA.HONEYWELL.COM) by SAIL.Stanford.EDU with TCP; 22 Mar 89  22:39:31 PSTReturn-Path: <alarson@src.honeywell.com>Received: from pavo.SRC.Honeywell.COM by moon.src.honeywell.com (5.59/smail2.6.3/06-17-88);	Thu, 23 Mar 89 00:40:28 CST id AA25401 for cl-cleanup@SAIL.STANFORD.EDUPosted-Date: Thu, 23 Mar 89 00:38:34 CSTReceived: by pavo.src.honeywell.com (3.2/SMI-3.2)	id AA25833; Thu, 23 Mar 89 00:38:34 CSTDate: Thu, 23 Mar 89 00:38:34 CSTFrom: alarson@src.honeywell.com (Aaron Larson)Message-Id: <8903230638.AA25833@pavo.src.honeywell.com>To: Moon@STONY-BROOK.SCRC.Symbolics.COMCc: cl-cleanup@SAIL.STANFORD.EDUIn-Reply-To: David A. Moon's message of Wed, 22 Mar 89 21:59 EST <19890323025928.1.MOON@EUPHRATES.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 4)    Allow the value of a pathname's directory component to be a list.  The    car of the list may be either of the symbols :ABSOLUTE or :RELATIVE.    Each remaining element of the list is a string or one of the keyword    symbols listed below...I picked on Kent for not specifying that the elements of the list should beeither strings or keywords, then after reading PATHNAME-WILD, I think thatwe should not preclude implmentations from defining "regular expression",or "user home directory"components.  E.g.   (pathname-directory x) => (:absolute "foo" #<regexp "Fo" :wild "bar">)  (pathname-directory x) => (#<user-homedir "alarson"> "bar" "baz")I'm not advocating adding such a feature, just not precluding us fromdefining one in the future.  Perhaps we should add a line something like:  "Implementations may permit objects of types other than keywords and  strings as elements of the pathname-directory list." Even without a statement of this kind, I support the proposal.*start*01622 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 23-Mar-89 08:09:02 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 23 MAR 89 08:06:49 PSTReceived: from multimax.encore.com by SAIL.Stanford.EDU with TCP; 23 Mar 89  08:05:17 PSTReceived: from mist.encore.COM by multimax.encore.com with SMTP (5.61/25-eef)	id AA10302; Thu, 23 Mar 89 11:05:08 -0500Received: from localhost by mist. (4.0/SMI-4.0)	id AA04217; Thu, 23 Mar 89 11:07:03 ESTMessage-Id: <8903231607.AA04217@mist.>To: cl-cleanup@sail.stanford.eduSubject: Re: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 4) Date: Thu, 23 Mar 89 11:07:02 ESTFrom: Dan L. Pierson <pierson@mist.encore.com>Date: Thu, 23 Mar 89 10:53:28 ESTFrom: Dan L. Pierson <pierson>    I'm not advocating adding such a feature, just not precluding us from    defining one in the future.  Perhaps we should add a line something like:          "Implementations may permit objects of types other than keywords and      strings as elements of the pathname-directory list."         Even without a statement of this kind, I support the proposal.    Since we seem to be adopting an overall conformance extensionsposition of "everything not explicity permitted is forbidden", Istrongly support this change.  While I will probably vote for theproposal without the change, note that raising this issue thenrejecting the change amounts to an explicit statement by X3J13 thatsuch extensions are prohibited.  I think this would be veryunfortunate. *start*01829 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 23-Mar-89 11:17:55 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 23 MAR 89 11:13:58 PSTReceived: from lucid.com by SAIL.Stanford.EDU with TCP; 23 Mar 89  11:12:20 PSTReceived: from pitney-bowes ([192.9.200.50]) by heavens-gate.lucid.com id AA03428g; Thu, 23 Mar 89 11:06:43 PSTReceived: by pitney-bowes id AA26285g; Thu, 23 Mar 89 11:04:50 PSTDate: Thu, 23 Mar 89 11:04:50 PSTFrom: Jim McDonald <jlm@lucid.com>Message-Id: <8903231904.AA26285@pitney-bowes>To: pierson@mist.encore.comCc: cl-cleanup@sail.stanford.eduIn-Reply-To: Dan L. Pierson's message of Thu, 23 Mar 89 11:07:02 EST <8903231607.AA04217@mist.>Subject: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 4) I'm also disturbed by the proposed restrictions on the elements of apathname-directory list.  Why, for example, is it necessary topreclude a feature that allows variables to appear?  E.g., thefollowing seems like a plausibly useful pair of pathnames:  (:ABSOLUTE *top-of-source-tree*      "a" "b" "c")   (:ABSOLUTE *top-of-destination-tree* "a" "b" "c") or even:  (:ABSOLUTE *top-of-source-tree*      . *relative-dir-path*)  (:ABSOLUTE *top-of-destination-tree* . *relative-dir-path*)[There's probably better syntax than a dotted pair, but you know what I mean.]I'm not saying I need or even want this particular feature, but I'mpretty sure I don't want to have it prohibited just because it hadn'toccurred to anyone yet.[Btw, I think Alarson's example for home dir could be accomomdated as  (... :HOME "alarson" ...) in the spirit of the proposal.  Most plausible structures could probably be handled similarly, but perhaps clumsily.]   jlm*start*01503 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 23-Mar-89 11:35:04 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 23 MAR 89 11:33:54 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 23 Mar 89  11:32:32 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 563772; Thu 23-Mar-89 14:31:25 ESTDate: Thu, 23 Mar 89 14:31 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 4)To: jlm@Lucid.COMcc: pierson@Mist.Encore.COM, CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <8903231904.AA26285@pitney-bowes>Message-ID: <890323143103.8.KMP@BOBOLINK.SCRC.Symbolics.COM>Please see the issue writeup for PATHNAME-EXTENSIONS which I'm mailing out toX3J13 in a little while.  I think it is the correct way to deal with`[not] precluding extensions.'  It basically allows us to establish a modelfor how CL pathnames work, and then to selectively violate that model in away that is detectable by portable programs. My hope is that it will allowyou to vote in favor of the PATHNAME-SUBDIRECTORY-LIST proposal in some form(and perhaps other pathname proposals as well) without worrying that it's goingoverly constrain you for some idiosyncratic feature that you wanted but couldn'tget group approval for.*start*10449 00024 US GV-Info: X3J13-mailer@SAIL.Stanford.EDU at 23-Mar-89 16:07:00 from AGReturn-Path: <X3J13-mailer@SAIL.Stanford.EDU>Received: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 23 MAR 89 16:04:14 PSTReceived: from YUKON.SCRC.Symbolics.COM (SCRC-YUKON.ARPA) by SAIL.Stanford.EDU with TCP; 23 Mar 89  15:36:24 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by YUKON.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 441574; Thu 23-Mar-89 16:01:03 ESTDate: Thu, 23 Mar 89 15:57 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: **DRAFT** Issue: PATHNAME-SUBDIRECTORY-LIST (Version 4)To: X3J13@SAIL.Stanford.EDUMessage-ID: <890323155755.4.KMP@BOBOLINK.SCRC.Symbolics.COM>       >> PLEASE DO -NOT- REPLY TO THIS ISSUE <<<Bring your comments to the meeting.For those on CL-Cleanup, I modified this version only very slightlyto accomodate out-and-out typos. I have not made any new conceptualstrides on this pass.All should see of CL-Cleanup discussion at end. -kmp-----Issue:          PATHNAME-SUBDIRECTORY-LISTReferences:     Pathnames (pp410-413), MAKE-PATHNAME (p416),		PATHNAME-DIRECTORY (p417)Category:       CHANGEEdit history:   18-Jun-87, Version 1 by Ghenis.pasa@Xerox.COM	        05-Jul-88, Version 2 by Pitman (major revision)		28-Dec-88, Version 3 by Pitman (merge discussion)		23-Mar-89, Version 4 by Pitman ([hopefully] just fix typos)Status:	        For Internal DiscussionRelated-Issues: PATHNAME-COMPONENT-CASEProblem Description:  It is impossible to write portable code that can produce a pathname  in a subdirectory of a hierarchical file system. This defeats much of  the purpose of having an abstraction like pathname.  According to CLtL, only a string is a portable filler of the directory  slot, but in order to denote a subdirectory, the use of separators (such  as dots, slashes, or backslashes) would be necessary. The very fact that  such syntax varies from host to host means that although the  representation might be "portable", the code using that representation   is not portable.  This problem is even worse for programs running on machines on a network  that can retrieve files from multiple hosts, each using a different OS  and thus a different subdirectory delimiter.  Related problems:  - In some implementations "FOO.BAR" might denote the "BAR" subdirectory    of "FOO" while in other implementations it might be a top-level     directory (because "." is not a subdirectory separator). To be safe,    portable programs must avoid all potential separators.  - Even in implementations where "." is the separator, "FOO.BAR" may be    recognized by some to mean the "BAR" subdirectory of "FOO" and by others    to mean `a seven letter directory with "." being a superquoted part of    its name'.  - In fact, CLtL does not even say for toplevel directories whether the    directory delimiters are a part. eg, is "foo" or "/foo" the directory    filler for a unix pathname "/foo/bar.lisp". Similarly, is "[FOO]" or    "FOO" the directory filler for a VMS pathname "[FOO]ME.LSP"?Proposal (PATHNAME-SUBDIRECTORY-LIST:NEW-REPRESENTATION)  Allow a list to be a filler of a pathname. The car of the list may be either  of the symbols :ABSOLUTE or :RELATIVE.  If the car of the list is :RELATIVE, the rest of the list is the  implementation-dependent result of PARSE-NAMESTRING for file systems which  have relative pathnames. Unless some other proposal is submitted to clarify  the behavior of relative pathnames in merging, etc. that behavior is left  undefined.  If the car of the list is :ABSOLUTE, the rest of the list is a list of   strings each naming a single level of directory structure. The strings  should contain only the directory names themselves -- no separator  characters.  The spec (:ABSOLUTE) represents the root directory.  Clarify that if a string is used as a filler of a directory field in a  pathname, it should be the unadorned name of a toplevel directory.  Specifying a string, str, is equivalent to specifying the list  (:ABSOLUTE str).  In place of a string, at any point in the list, keyword symbols may occur  to deal with special file notations. The following symbols have standard  meanings; they may not be meaningful for all operating systems, and are  intended for use only on those operating systems where they have meaning:   :WILD           - Wildcard match of one level of directory structure.   :WILD-INFERIORS - Wildcard match of any number of directory levels.   :UP             - Go upward in directory structure (syntactic).   :BACK 	   - Go upward in directory structure (semantic).  The difference between up and back is that if there is a directory    (:ABSOLUTE "X" "Y" "Z")  linked to     (:ABSOLUTE "A" "B" "C")  and there also exist directories    (:ABSOLUTE "A" "B" "Q")    (:ABSOLUTE "X" "Y" "Q")  then    (:ABSOLUTE "X" "Y" "Z" :BACK "Q")  designates    (:ABSOLUTE "A" "B" "Q")  while    (:ABSOLUTE "X" "Y" "Z" :UP "Q")  designates    (:ABSOLUTE "X" "Y" "Q")Test Case:  (PATHNAME-DIRECTORY (PARSE-NAMESTRING "[FOO.BAR]BAZ.LSP")) ;on VMS  => (:ABSOLUTE "FOO" "BAR")  (PATHNAME-DIRECTORY (PARSE-NAMESTRING "/foo/bar/baz.lisp")) ;on Unix  => (:ABSOLUTE "foo" "bar")  or (:ABSOLUTE "FOO" "BAR")  If PATHNAME-COMPONENT-CASE:CANONICALIZE passes, only the 2nd return value.  (PATHNAME-DIRECTORY (PARSE-NAMESTRING ">foo>**>bar>baz.lisp")) ;on LispM  => (:ABSOLUTE "FOO" :WILD-INFERIORS "BAR")  (PATHNAME-DIRECTORY (PARSE-NAMESTRING ">foo>*>bar>baz.lisp")) ;on LispM  => (:ABSOLUTE "FOO" :WILD "BAR")Rationale:  This would allow programs to usefully deal with hierarchical file systems,  which are by far the most common file system type.Current Practice:  Symbolics Genera implements something very similar to this. The main  differences are:   - In Genera, there is no :ABSOLUTE keyword at the head of the list.     This has been shown to cause some problems in dealing with root     directories. Genera represents the root directory by a keyword     symbol (rather than a list) because the list representation      was not adequately general.   - Genera represents Unix ".." as :UP. Its treatment of :UP is compatible     with this proposal, but Unix ".." is more properly represented by :BACK.Cost to Implementors:  In principle, nothing about the implementation needs to change except  the treatment of the directory field by MAKE-PATHNAME and  PATHNAME-DIRECTORY. The internal representation can otherwise be left  as-is if necessary.  For implementations that choose to rationalize this representation  throughout their internals and any other implementation-specific  accessors, the cost will be necessarily higher.Cost to Users:  None. This change is upward compatible.Cost of Non-Adoption:  Serious portability problems would continue to occur. Programmers would be  driven to the use of implementation-specific facilities because the need  for this is frequently impossible to ignore.Benefits:  The serious costs of non-adoption would be avoided.Aesthetics:  This representation of hierarchical pathnames is easy to use and quite  general. Users will probably see this as an improvement in the aesthetics.Discussion:  This issue was raised a while back but no one was fond of the particular  proposal that was submitted. This is an attempt to revive the issue.  The original proposal, to add a :SUBDIRECTORIES field to a pathname, was  discarded because it imposed an unnatural distinction between a toplevel  directory and its subdirectories. Pitman's guess is the the idea was to  try to make it a compatible change, but since most programmers will   probably want to change from implementation-specific primitives to portable  ones anyway, that's probably not such a big deal. Also, there might have  been some programs which thought the change was compatible and ended up  ignoring important information (the :SUBDIRECTORIES field). Pitman thought  it would be better if people just accepted the cost of an incompatible  change in order to get something really pretty as a result.  This issue used to address the issue of relative pathnames (pathnames  relative to some default which is separately maintained). Pitman removed  this issue for now in order to simplify things. He feels the issue should  be resubmitted under separate cover so that it can be discussed separately.------Summary of discussion on CL-Cleanup: Moon wondered if functions like Symbolics' DIRECTORY-PATHNAME-AS-FILE  and PATHNAME-AS-DIRECTORY should be included either here or in  another issue. (The conversion between the name of a directory  and the directory component of a file inferior to that directory is  system-dependent, for example TOPS-20 appends a type field and Unix  does not.  Also in some systems the root directory has a name and  in others it doesn't.  Of course these functions signal an error in  non-hierarchical file systems. Moon doesn't think :UP and :BACK are meaningful anywhere except   immediately after :RELATIVE, although he concedes Unix disagrees  with him. He suggests that if they were only allowed immediately  after :RELATIVE, you wouldn't need two of them.  He also doesn't  think that MERGE-PATHNAMES should ever look at what files/directories  actually exist in the file system, which makes me opposed to the  existence of the one that you have called syntactic.  He asks ``is  this really something we need, or will TRUENAME do the job?'' JLM replies (to Moon's query) that if you're trying to create a  filename to be used for output, it might not exist yet  (hence TRUENAME would signal an error), but there might  be various funny links in its directory path you would like to  traverse.  Presumably you could use PROBE-FILE on some part of the  name (perhaps recursively down through the super-directories), then  merge in the remaining part, but that seems enough error-prone to be  worth hiding.  Aaron Larson has a competing or related proposal he wants to present  on this issue. I didn't attempt to summarize it here because it was  enough different from this discussion to raise presentational   confusion. My attempt here was mainly to get these thoughts on the  table -- not to preempt what he has to say.  Hopefully he'll still  present his views separately.*start*01435 00024 US Date: 24 Mar 89 15:08 PSTSender: X3J13-mailer%SAIL.Stanford:EDU:XeroxFrom: Moon%STONY-BROOK.SCRC.Symbolics:COM:XeroxSubject: **DRAFT** Issue: PATHNAME-SUBDIRECTORY-LIST (Version 4)In-Reply-to: <890323155755.4.KMP@BOBOLINK.SCRC.Symbolics.COM>To: X3J13%SAIL.STANFORD:EDU:XeroxGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: **DRAFT** Issue: PATHNAME-SUBDIRECTORY-LIST (Version 4)To: X3J13@SAIL.STANFORD.EDUIn-Reply-To: <890323155755.4.KMP@BOBOLINK.SCRC.Symbolics.COM>Return-Path: <X3J13-mailer@SAIL.Stanford.EDU>Received: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 24 MAR 89 15:08:15 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 24 Mar 89  14:57:39 PSTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 564943; Fri 24-Mar-89 17:57:27 ESTOriginal-Date: Fri, 24 Mar 89 17:57 ESTMessage-ID: <19890324225719.7.MOON@EUPHRATES.SCRC.Symbolics.COM>GVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVDue to a lack of coordination on our part, both Kent and I sentmailings labelled Issue: PATHNAME-SUBDIRECTORY-LIST (Version 4).The two mailings were quite different.  Kent agrees that the onehe sent should be ignored and the one I sent on Wednesday is theone you're supposed to read.  Sorry about that.*start*01051 00024 US Date:  4 Apr 89 12:39 PDTSender: CL-Cleanup-mailer%SAIL.Stanford:EDU:XeroxFrom: KMP%STONY-BROOK.SCRC.Symbolics:COM:XeroxSubject: Issue: PATHNAME-SUBDIRECTORY-LISTTo: CL-Cleanup%SAIL.Stanford:EDU:XeroxGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-SUBDIRECTORY-LISTTo: CL-Cleanup@SAIL.Stanford.EDUReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 04 APR 89 12:32:50 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 4 Apr 89  12:28:56 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 571239; Tue 4-Apr-89 15:28:55 EDTOriginal-Date: Tue, 4 Apr 89 15:28 EDTMessage-ID: <890404152831.3.KMP@BOBOLINK.SCRC.Symbolics.COM>GVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVThis was identified as `important' and deferred to thenext meeting.*start*13627 00024 USfGV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 23-May-89 10:20:10 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 23 MAY 89 10:19:02 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 23 May 89  10:16:36 PDTReceived: from KENNETH-WILLIAMS.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via INTERNET with SMTP id 599395; 23 May 89 13:18:24 EDTDate: Tue, 23 May 89 13:22 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-SUBDIRECTORY-LIST (version 6)To: CL-Cleanup@sail.stanford.eduMessage-ID: <19890523172251.6.MOON@KENNETH-WILLIAMS.SCRC.Symbolics.COM>This issue is on the agenda for the June X3J13 meeting.  KMP and Ihave prepared a revised writeup which we think is ready for release.I'd like to distribute this to X3J13 as soon as discussion, if any,in the cleanup subcommittee is completed.Issue:          PATHNAME-SUBDIRECTORY-LISTReferences:     Pathnames (pp410-413), MAKE-PATHNAME (p416),                PATHNAME-DIRECTORY (p417)Related-issues: PATHNAME-COMPONENT-CASE, PATHNAME-COMPONENT-VALUECategory:       CHANGEEdit history:   18-Jun-87, Version 1 by Ghenis.pasa@Xerox.COM                05-Jul-88, Version 2 by Pitman (major revision)                28-Dec-88, Version 3 by Pitman (merge discussion)                22-Mar-89, Version 4 by Moon (fix based on discussion)                19-May-89, Version 5 by Moon (improve based on mail)                21-May-89, Version 6 by Moon (final cleanups)Problem Description:  It is impossible to write portable code that can produce a pathname  in a subdirectory of a hierarchical file system. This defeats much of  the purpose of the pathname abstraction.  According to CLtL, only a string is a portable value for the directory  component of a pathname.  Thus in order to denote a subdirectory, the use  of punctuation characters (such as dots, slashes, or backslashes) would  be necessary. The very fact that such syntax varies from host to host  means that although the representation might be "portable", the code  using that representation is not portable.  This problem is even worse for programs running on machines on a network  that can retrieve files from multiple hosts, each using a different OS  and thus different subdirectory punctuation.  Related problems:  - In some implementations "FOO.BAR" might denote the "BAR" subdirectory    of "FOO", while in other implementations it would denote a top-level    directory, because "." is not treated as punctuation. To be safe,    portable programs must avoid all potential punctuation characters.  - Even in implementations where "." is used for subdirectories,    "FOO.BAR" may be recognized by some to mean the "BAR" subdirectory of    "FOO" and by others to mean `a seven character directory name with "."    as the fourth character.'  - In fact, CLtL does not even say whether punctuation characters are    part of the string. eg, is "foo" or "/foo" the directory component for    a unix pathname "/foo/bar.lisp". Similarly, is "[FOO]" or "FOO" the    directory component for a VMS pathname "[FOO]ME.LSP"?    PATHNAME-COMPONENT-VALUE:SPECIFY says punctuation characters are not    part of the string.Proposal (PATHNAME-SUBDIRECTORY-LIST:NEW-REPRESENTATION)  Remove the "structured" directory feature mentioned on CLtL p.412.    Allow the value of a pathname's directory component to be a list.  The  car of the list is one of the symbols :ABSOLUTE or :RELATIVE.  Each remaining element of the list is a string or a symbol (see below).  Each string names a single level of directory structure.  The strings  should contain only the directory names themselves -- no punctuation  characters.  A list whose car is the symbol :ABSOLUTE represents a directory path  starting from the root directory.  The list (:ABSOLUTE) represents  the root directory.  The list (:ABSOLUTE "foo" "bar" "baz") represents  the directory called "/foo/bar/baz" in Unix [except possibly for  alphabetic case -- that is the subject of a separate issue].  A list whose car is the symbol :RELATIVE represents a directory path  starting from a default directory.  The list (:RELATIVE) has the same  meaning as NIL and hence is not used.  The list (:RELATIVE "foo" "bar")  represents the directory named "bar" in the directory named "foo" in the  default directory.  In place of a string, at any point in the list, symbols may occur to  indicate special file notations. The following symbols have standard  meanings.  Implementations are permitted to add additional objects of any  non-string type if necessary to represent features of their file systems  that cannot be represented with the standard strings and symbols.  Supplying any non-string, including any of the symbols listed below, to a  file system for which it does not make sense signals an error of type  FILE-ERROR.  For example, Unix does not support :WILD-INFERIORS.   :WILD           - Wildcard match of one level of directory structure.   :WILD-INFERIORS - Wildcard match of any number of directory levels.   :UP             - Go upward in directory structure (semantic).   :BACK           - Go upward in directory structure (syntactic).  "Syntactic" means that the action of :BACK depends only on the pathname  and not on the contents of the file system.  "Semantic" means that the  action of :UP depends on the contents of the file system; to resolve  a pathname containing :UP to a pathname whose directory component  contains only :ABSOLUTE and strings requires probing the file system.  :UP differs from :BACK only in file systems that support multiple  names for directories, perhaps via symbolic links.  For example,  suppose that there is a directory    (:ABSOLUTE "X" "Y" "Z")  linked to     (:ABSOLUTE "A" "B" "C")  and there also exist directories    (:ABSOLUTE "A" "B" "Q")    (:ABSOLUTE "X" "Y" "Q")  then    (:ABSOLUTE "X" "Y" "Z" :UP "Q")  designates    (:ABSOLUTE "A" "B" "Q")  while    (:ABSOLUTE "X" "Y" "Z" :BACK "Q")  designates    (:ABSOLUTE "X" "Y" "Q")  If a string is used as the value of the :DIRECTORY argument to  MAKE-PATHNAME, it should be the name of a toplevel directory and should  not contain any punctuation characters.  Specifying a string, str, is  equivalent to specifying the list (:ABSOLUTE str).  Specifying the symbol  :WILD is equivalent to specifying the list (:ABSOLUTE :WILD-INFERIORS),  or (:ABSOLUTE :WILD) in a file system that does not support :WILD-INFERIORS.  The PATHNAME-DIRECTORY function always returns NIL, :UNSPECIFIC, or a  list, never a string, never :WILD.  In non-hierarchical file systems, the only valid list values for the  directory component of a pathname are (:ABSOLUTE string) and  (:ABSOLUTE :WILD).  :RELATIVE directories and the keywords  :WILD-INFERIORS, :UP, and :BACK are not used in non-hierarchical file  systems.  Pathname merging treats a relative directory specially.  Let  <pathname> and <defaults> be the first two arguments to  MERGE-PATHNAMES.  If (PATHNAME-DIRECTORY <pathname>) is a list whose  car is :RELATIVE, and (PATHNAME-DIRECTORY <defaults>) is a list, then  the merged directory is the value of    (APPEND (PATHNAME-DIRECTORY <defaults>)            (CDR  ;remove :RELATIVE from the front              (PATHNAME-DIRECTORY <pathname>)))  except that if the resulting list contains a string or :WILD immediately  followed by :BACK, both of them are removed.  This removal of redundant  :BACKs is repeated as many times as possible.  If (PATHNAME-DIRECTORY <defaults>) is not a list or  (PATHNAME-DIRECTORY <pathname>) is not a list whose car is :RELATIVE, the  merged directory is    (OR (PATHNAME-DIRECTORY <pathname>) (PATHNAME-DIRECTORY <defaults>))  A relative directory in the pathname argument to a function such as  OPEN is merged with *DEFAULT-PATHNAME-DEFAULTS* before accessing the  file system.Test Cases/Examples:  (PATHNAME-DIRECTORY (PARSE-NAMESTRING "[FOO.BAR]BAZ.LSP")) ;on VMS  => (:ABSOLUTE "FOO" "BAR")  (PATHNAME-DIRECTORY (PARSE-NAMESTRING "/foo/bar/baz.lisp")) ;on Unix  => (:ABSOLUTE "foo" "bar")  or (:ABSOLUTE "FOO" "BAR")  If PATHNAME-COMPONENT-CASE:KEYWORD-ARGUMENT passes with a default of  :COMMON, the value is the second one shown.  (PATHNAME-DIRECTORY (PARSE-NAMESTRING "../baz.lisp")) ;on Unix  => (:RELATIVE :UP)  (PATHNAME-DIRECTORY (PARSE-NAMESTRING "/foo/bar/../mum/baz")) ;on Unix  => (:ABSOLUTE "foo" "bar" :UP "mum")  (PATHNAME-DIRECTORY (PARSE-NAMESTRING ">foo>**>bar>baz.lisp")) ;on LispM  => (:ABSOLUTE "FOO" :WILD-INFERIORS "BAR")  (PATHNAME-DIRECTORY (PARSE-NAMESTRING ">foo>*>bar>baz.lisp")) ;on LispM  => (:ABSOLUTE "FOO" :WILD "BAR")Rationale:  This would allow programs to usefully deal with hierarchical file  systems, which are by far the most common file system type.  This would allow a system construction utility that organizes programs  by subdirectories to be portable to all implementations that have  hierarchical file systems.  Discussion indicated that "Implementations are permitted to add  additional objects of any non-string type if necessary to represent  features of their file systems that cannot be represented with the  standard strings and symbols" is a necessary escape hatch for things like  home directories and fancy pattern matching.  Implementations should  limit their use of this loophole and use the standard keyword symbols  whenever that is possible.Current Practice:  Symbolics Genera implements something very similar to this. The main  differences are:   - In Genera, there is no :ABSOLUTE keyword at the head of the list.     This has been shown to cause some problems in dealing with root     directories. Genera represents the root directory by a keyword     symbol (rather than a list) because the list representation      was not adequately general.   - Genera has no separate concepts of :UP and :BACK.  Genera     represents Unix ".." as :UP, but deals with :UP syntactically, not     semantically.Cost to Implementors:  In principle, nothing about the implementation needs to change except  the treatment of the directory component by MAKE-PATHNAME and  PATHNAME-DIRECTORY. The internal representation can otherwise be left  as-is if necessary.  Implementations such as Genera that already have hierarchical directory  handling will have to make an incompatible change to switch to what  is proposed here.  For implementations that choose to rationalize this representation  throughout their internals and any other implementation-specific  accessors, the cost will be necessarily higher.Cost to Users:  None for portable programs. This change is upward compatible with CLtL.  Nonportable programs will have to be changed if they use implementation  dependent hierarchical directory handling and the implementation  removes support for that when it adds support for this proposal.Cost of Non-Adoption:  Serious portability problems would continue to occur. Programmers would be  driven to the use of implementation-specific facilities because the need  for this is frequently impossible to ignore.Benefits:  The serious costs of non-adoption would be avoided.Aesthetics:  This representation of hierarchical pathnames is easy to use and quite  general. Users will probably see this as an improvement in the aesthetics.Discussion:  This issue was raised a while back but no one was fond of the particular  proposal that was submitted. This is an attempt to revive the issue.  The original proposal, to add a :SUBDIRECTORIES component to a  pathname, was discarded because it imposed an unnatural distinction  between a toplevel directory and its subdirectories. Pitman's guess is  the the idea was to try to make it a compatible change, but since most  programmers will probably want to change from implementation-specific  primitives to portable ones anyway, that's probably not such a big  deal. Also, there could have been some programs which thought the  change was compatible and ended up ignoring important information (the  :SUBDIRECTORIES component). Pitman thought it would be better if  people just accepted the cost of an incompatible change in order to  get something really pretty as a result.  Moon doesn't like having both :UP and :BACK, but admits that some  file systems do it one way and some do it the other.  He still thinks  it would be simpler not to have both.  To keep it simple, we chose not to add to this issue the functions  DIRECTORY-PATHNAME-AS-FILE and PATHNAME-AS-DIRECTORY, which convert  the name of a directory from or to the directory component of a file  inferior to that directory.  This conversion is system-dependent, for  example TOPS-20 appends a type field and Unix does not.  Also in some  systems the root directory has a name and in others it doesn't.  Of  course these functions signal an error in non-hierarchical file  systems.  Examples (for Unix, assuming #P print syntax for pathnames):   (directory-pathname-as-file #P"/usr/bin/sh") => #P"/usr/bin"   (pathname-as-directory #P"/usr/bin") => #P"/usr/bin"/  These functions have not been proposed because they are mainly useful  in conjunction with additional functions for manipulating directories  (creating, expunging, setting access control) that have not been made  available in Common Lisp.*start*01290 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 25-May-89 12:53:04 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 25 MAY 89 12:53:10 PDTReceived: from cs.utah.edu by SAIL.Stanford.EDU with TCP; 25 May 89  12:51:43 PDTReceived: from defun.utah.edu by cs.utah.edu (5.61/utah-2.1-cs)	id AA22772; Thu, 25 May 89 13:52:04 -0600Received: by defun.utah.edu (5.61/utah-2.0-leaf)	id AA09203; Thu, 25 May 89 13:52:00 -0600From: sandra%defun@cs.utah.edu (Sandra J Loosemore)Message-Id: <8905251952.AA09203@defun.utah.edu>Date: Thu, 25 May 89 13:51:59 MDTSubject: Re: Issue: PATHNAME-SUBDIRECTORY-LIST (version 6)To: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Cc: CL-Cleanup@sail.stanford.edu, sandra%defun@cs.utah.edu, gray@dsg.csc.ti.comIn-Reply-To: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>, Tue, 23 May 89 13:22 EDTThe comments I made on issue PATHNAME-COMPONENT-VALUE also apply here.In particular, I'm not personally motivated to add such a featurebecause I've never had any need to manipulate hierarchical directoriesfrom within a Common Lisp program.  Any program that does so isnecessarily nonportable.-Sandra-------*start*01917 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 25-May-89 13:10:57 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 25 MAY 89 13:07:08 PDTReceived: from Think.COM (Gateway.Think.COM) by SAIL.Stanford.EDU with TCP; 25 May 89  13:05:52 PDTReceived: from fafnir.think.com by Think.COM; Thu, 25 May 89 16:04:45 EDTReturn-Path: <gls@Think.COM>Received: from verdi.think.com by fafnir.think.com; Thu, 25 May 89 16:04:14 EDTReceived: from joplin.think.com by verdi.think.com; Thu, 25 May 89 16:04:00 EDTFrom: Guy Steele <gls@Think.COM>Received: by joplin.think.com; Thu, 25 May 89 16:03:57 EDTDate: Thu, 25 May 89 16:03:57 EDTMessage-Id: <8905252003.AA10059@joplin.think.com>To: sandra%defun@cs.utah.eduCc: Moon@stony-brook.scrc.symbolics.com, CL-Cleanup@sail.stanford.edu, sandra%defun@cs.utah.edu, gray@dsg.csc.ti.comIn-Reply-To: Sandra J Loosemore's message of Thu, 25 May 89 13:51:59 MDT <8905251952.AA09203@defun.utah.edu>Subject: Issue: PATHNAME-SUBDIRECTORY-LIST (version 6)   From: sandra%defun@cs.utah.edu (Sandra J Loosemore)   Date: Thu, 25 May 89 13:51:59 MDT   The comments I made on issue PATHNAME-COMPONENT-VALUE also apply here.   In particular, I'm not personally motivated to add such a feature   because I've never had any need to manipulate hierarchical directories   from within a Common Lisp program.  Any program that does so is   necessarily nonportable.I'm sorry, but I disagree with your last sentence.  A program that*insists* on using hierarchical directories may be nonportable,but a program that is *prepared* to deal with them if the localfile system happens to contain them is not necessarily nonportable,and indeed may me more portable than a program thast insists ondealing with directories in a nonhierarchical manner.--Guy*start*01639 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 13-Jun-89 15:25:15 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 13 JUN 89 15:25:16 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 13 Jun 89  15:23:12 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 610822; 13 Jun 89 18:24:56 EDTDate: Tue, 13 Jun 89 18:24 EDTFrom: Kim Barrett <IIM@ECLA.USC.EDU>Sender: KMP@STONY-BROOK.SCRC.Symbolics.COMSubject: Issue: PATHNAME-SUBDIRECTORY-LIST (Version 6)To: CL-Cleanup@SAIL.Stanford.EDUComments: Received from Kim Barrett by KMP on MSDOS floppy disk via US MailMessage-ID: <19890613222446.9.KMP@BOBOLINK.SCRC.Symbolics.COM>Yes.  For current practice, IIM does something similar.  The keywords aredifferent, and only :BACK supported.  I believe the keyword mapping is  :ABSOLUTE	:ABSOLUTE-DIRECTORY  :RELATIVE	(no leading keyword)  :BACK		:SUPER-DIRECTORYThe addition of the :RELATIVE keyword is probably cleaner, since it means thatthere is always a keyword at the head of the list, and a test for a relativedirectory is (eq (car directory) :relative) rather than something like(and directory (not (symbolp (car directory)))).The interaction between :BACK and :WILD-INFERIORS doesn't seem clear.  Ibelieve this is a case where :BACK and the thing preceding it cannot bespliced out (you can end up with (... :WILD-INFERIORS :BACK ...).  Also,(:ABSOLUTE :BACK ...) should probably signal an error.*start*14834 00024 US GV-Info: X3J13-mailer@SAIL.Stanford.EDU at 16-Jun-89 22:48:50 from AGReturn-Path: <X3J13-mailer@SAIL.Stanford.EDU>Received: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 16 JUN 89 22:48:50 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 16 Jun 89  22:25:02 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 612487; 17 Jun 89 01:26:52 EDTDate: Sat, 17 Jun 89 01:27 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Reply-To: CL-Cleanup@sail.stanford.eduSubject: Issue: PATHNAME-SUBDIRECTORY-LIST (version 7)To: X3J13@sail.stanford.eduMessage-ID: <19890617052724.9.MOON@EUPHRATES.SCRC.Symbolics.COM>Issue:          PATHNAME-SUBDIRECTORY-LISTReferences:     Pathnames (pp410-413), MAKE-PATHNAME (p416),                PATHNAME-DIRECTORY (p417)Related-issues: PATHNAME-COMPONENT-CASE, PATHNAME-COMPONENT-VALUECategory:       CHANGEEdit history:   18-Jun-87, Version 1 by Ghenis.pasa@Xerox.COM                05-Jul-88, Version 2 by Pitman (major revision)                28-Dec-88, Version 3 by Pitman (merge discussion)                22-Mar-89, Version 4 by Moon (fix based on discussion)                19-May-89, Version 5 by Moon (improve based on mail)                21-May-89, Version 6 by Moon (final cleanups)                17-Jun-89, Version 7 by Moon (add current practice                        and discussion; minor fixes based on discussion)Problem Description:  It is impossible to write portable code that can produce a pathname  in a subdirectory of a hierarchical file system. This defeats much of  the purpose of the pathname abstraction.  According to CLtL, only a string is a portable value for the directory  component of a pathname.  Thus in order to denote a subdirectory, the use  of punctuation characters (such as dots, slashes, or backslashes) would  be necessary. The very fact that such syntax varies from host to host  means that although the representation might be "portable", the code  using that representation is not portable.  This problem is even worse for programs running on machines on a network  that can retrieve files from multiple hosts, each using a different OS  and thus different subdirectory punctuation.  Related problems:  - In some implementations "FOO.BAR" might denote the "BAR" subdirectory    of "FOO", while in other implementations it would denote a top-level    directory, because "." is not treated as punctuation. To be safe,    portable programs must avoid all potential punctuation characters.  - Even in implementations where "." is used for subdirectories,    "FOO.BAR" may be recognized by some to mean the "BAR" subdirectory of    "FOO" and by others to mean `a seven character directory name with "."    as the fourth character.'  - In fact, CLtL does not even say whether punctuation characters are    part of the string. eg, is "foo" or "/foo" the directory component for    a unix pathname "/foo/bar.lisp". Similarly, is "[FOO]" or "FOO" the    directory component for a VMS pathname "[FOO]ME.LSP"?    PATHNAME-COMPONENT-VALUE:SPECIFY says punctuation characters are not    part of the string.Proposal (PATHNAME-SUBDIRECTORY-LIST:NEW-REPRESENTATION)  Remove the "structured" directory feature mentioned on CLtL p.412.    Allow the value of a pathname's directory component to be a list.  The  car of the list is one of the symbols :ABSOLUTE or :RELATIVE.  Each remaining element of the list is a string or a symbol (see below).  Each string names a single level of directory structure.  The strings  should contain only the directory names themselves -- no punctuation  characters.  A list whose car is the symbol :ABSOLUTE represents a directory path  starting from the root directory.  The list (:ABSOLUTE) represents  the root directory.  The list (:ABSOLUTE "foo" "bar" "baz") represents  the directory called "/foo/bar/baz" in Unix [except possibly for  alphabetic case -- that is the subject of a separate issue].  A list whose car is the symbol :RELATIVE represents a directory path  starting from a default directory.  The list (:RELATIVE) has the same  meaning as NIL and hence is not used.  The list (:RELATIVE "foo" "bar")  represents the directory named "bar" in the directory named "foo" in the  default directory.  In place of a string, at any point in the list, symbols may occur to  indicate special file notations. The following symbols have standard  meanings.  Implementations are permitted to add additional objects of any  non-string type if necessary to represent features of their file systems  that cannot be represented with the standard strings and symbols.  Supplying any non-string, including any of the symbols listed below, to a  file system for which it does not make sense signals an error of type  FILE-ERROR.  For example, Unix does not support :WILD-INFERIORS in  most implementations.   :WILD           - Wildcard match of one level of directory structure.   :WILD-INFERIORS - Wildcard match of any number of directory levels.   :UP             - Go upward in directory structure (semantic).   :BACK           - Go upward in directory structure (syntactic).  :ABSOLUTE or :WILD-INFERIORS immediately followed by :UP or :BACK  signals an error.  "Syntactic" means that the action of :BACK depends only on the pathname  and not on the contents of the file system.  "Semantic" means that the  action of :UP depends on the contents of the file system; to resolve  a pathname containing :UP to a pathname whose directory component  contains only :ABSOLUTE and strings requires probing the file system.  :UP differs from :BACK only in file systems that support multiple  names for directories, perhaps via symbolic links.  For example,  suppose that there is a directory    (:ABSOLUTE "X" "Y" "Z")  linked to     (:ABSOLUTE "A" "B" "C")  and there also exist directories    (:ABSOLUTE "A" "B" "Q")    (:ABSOLUTE "X" "Y" "Q")  then    (:ABSOLUTE "X" "Y" "Z" :UP "Q")  designates    (:ABSOLUTE "A" "B" "Q")  while    (:ABSOLUTE "X" "Y" "Z" :BACK "Q")  designates    (:ABSOLUTE "X" "Y" "Q")  If a string is used as the value of the :DIRECTORY argument to  MAKE-PATHNAME, it should be the name of a toplevel directory and should  not contain any punctuation characters.  Specifying a string, str, is  equivalent to specifying the list (:ABSOLUTE str).  Specifying the symbol  :WILD is equivalent to specifying the list (:ABSOLUTE :WILD-INFERIORS),  or (:ABSOLUTE :WILD) in a file system that does not support :WILD-INFERIORS.  The PATHNAME-DIRECTORY function always returns NIL, :UNSPECIFIC, or a  list, never a string, never :WILD.  In non-hierarchical file systems, the only valid list values for the  directory component of a pathname are (:ABSOLUTE string) and  (:ABSOLUTE :WILD).  :RELATIVE directories and the keywords  :WILD-INFERIORS, :UP, and :BACK are not used in non-hierarchical file  systems.  Pathname merging treats a relative directory specially.  Let  <pathname> and <defaults> be the first two arguments to  MERGE-PATHNAMES.  If (PATHNAME-DIRECTORY <pathname>) is a list whose  car is :RELATIVE, and (PATHNAME-DIRECTORY <defaults>) is a list, then  the merged directory is the value of    (APPEND (PATHNAME-DIRECTORY <defaults>)            (CDR  ;remove :RELATIVE from the front              (PATHNAME-DIRECTORY <pathname>)))  except that if the resulting list contains a string or :WILD immediately  followed by :BACK, both of them are removed.  This removal of redundant  :BACKs is repeated as many times as possible.  If (PATHNAME-DIRECTORY <defaults>) is not a list or  (PATHNAME-DIRECTORY <pathname>) is not a list whose car is :RELATIVE, the  merged directory is    (OR (PATHNAME-DIRECTORY <pathname>) (PATHNAME-DIRECTORY <defaults>))  A relative directory in the pathname argument to a function such as  OPEN is merged with *DEFAULT-PATHNAME-DEFAULTS* before accessing the  file system.Test Cases/Examples:  (PATHNAME-DIRECTORY (PARSE-NAMESTRING "[FOO.BAR]BAZ.LSP")) ;on VMS  => (:ABSOLUTE "FOO" "BAR")  (PATHNAME-DIRECTORY (PARSE-NAMESTRING "/foo/bar/baz.lisp")) ;on Unix  => (:ABSOLUTE "foo" "bar")  or (:ABSOLUTE "FOO" "BAR")  If PATHNAME-COMPONENT-CASE:KEYWORD-ARGUMENT passes with a default of  :COMMON, the value is the second one shown.  (PATHNAME-DIRECTORY (PARSE-NAMESTRING "../baz.lisp")) ;on Unix  => (:RELATIVE :UP)  (PATHNAME-DIRECTORY (PARSE-NAMESTRING "/foo/bar/../mum/baz")) ;on Unix  => (:ABSOLUTE "foo" "bar" :UP "mum")  (PATHNAME-DIRECTORY (PARSE-NAMESTRING ">foo>**>bar>baz.lisp")) ;on LispM  => (:ABSOLUTE "FOO" :WILD-INFERIORS "BAR")  (PATHNAME-DIRECTORY (PARSE-NAMESTRING ">foo>*>bar>baz.lisp")) ;on LispM  => (:ABSOLUTE "FOO" :WILD "BAR")Rationale:  This would allow programs to deal usefully with hierarchical file  systems, which are by far the most common file system type.  This would allow a system construction utility that organizes programs  by subdirectories to be portable to all implementations that have  hierarchical file systems.  Discussion indicated that "Implementations are permitted to add  additional objects of any non-string type if necessary to represent  features of their file systems that cannot be represented with the  standard strings and symbols" is a necessary escape hatch for things like  home directories and fancy pattern matching.  Implementations should  limit their use of this loophole and use the standard keyword symbols  whenever that is possible.Current Practice:  Symbolics Genera implements something very similar to this. The main  differences are:   - In Genera, there is no :ABSOLUTE keyword at the head of the list.     This has been shown to cause some problems in dealing with root     directories. Genera represents the root directory by a keyword     symbol (rather than a list) because the list representation      was not adequately general.   - Genera has no separate concepts of :UP and :BACK.  Genera     represents Unix ".." as :UP, but deals with :UP syntactically, not     semantically.  On the Explorer, the directory component is a list of strings, not yet  supporting the symbols specified in proposal PATHNAME-SUBDIRECTORY-LIST.  Macintosh Allegro Common Lisp 1.2.2 uses a string with punctuation  characters instead of a list for the directory.  Lucid Common Lisp 3.0.1 under Unix uses a list for directories of  somewhat different form from what is proposed in  PATHNAME-SUBDIRECTORY-LIST.  It uses :ROOT instead of :ABSOLUTE and uses  ".." instead of :UP.  It does use :RELATIVE.  Ibuki Common Lisp Release 01/01 uses a list for directories of somewhat  different form from what is proposed in PATHNAME-SUBDIRECTORY-LIST.  It  uses :ROOT instead of :ABSOLUTE, uses :PARENT instead of :UP, and omits  the leading keyword instead of using :RELATIVE.  IIM uses a list for directories of somewhat different form from what is  proposed in PATHNAME-SUBDIRECTORY-LIST.  It uses :ABSOLUTE-DIRECTORY  instead of :ABSOLUTE, uses :SUPER-DIRECTORY instead of :BACK, and omits  the leading keyword instead of using :RELATIVE.Cost to Implementors:  In principle, nothing about the implementation needs to change except  the treatment of the directory component by MAKE-PATHNAME and  PATHNAME-DIRECTORY. The internal representation can otherwise be left  as-is if necessary.  Implementations such as Genera, Explorer, Lucid, Ibuki, and IIM that  already have hierarchical directory handling will have to make an  incompatible change to switch to what is proposed here.  For implementations that choose to rationalize this representation  throughout their internals and any other implementation-specific  accessors, the cost will be necessarily higher.Cost to Users:  None for portable programs. This change is upward compatible with CLtL.  Nonportable programs will have to be changed if they use implementation  dependent hierarchical directory handling and the implementation  removes support for that when it adds support for this proposal.Cost of Non-Adoption:  Serious portability problems would continue to occur. Programmers would be  driven to the use of implementation-specific facilities because the need  for this is frequently impossible to ignore.Benefits:  The serious costs of non-adoption would be avoided.Aesthetics:  This representation of hierarchical pathnames is easy to use and quite  general. Users will probably see this as an improvement in the aesthetics.Discussion:  This issue was raised a while back but no one was fond of the particular  proposal that was submitted. This is an attempt to revive the issue.  The original proposal, to add a :SUBDIRECTORIES component to a  pathname, was discarded because it imposed an unnatural distinction  between a toplevel directory and its subdirectories. Pitman's guess is  the the idea was to try to make it a compatible change, but since most  programmers will probably want to change from implementation-specific  primitives to portable ones anyway, that's probably not such a big  deal. Also, there could have been some programs which thought the  change was compatible and ended up ignoring important information (the  :SUBDIRECTORIES component). Pitman thought it would be better if  people just accepted the cost of an incompatible change in order to  get something really pretty as a result.  Some people feel it is unnecessary to standardize the format of  pathname components such as the directory.  Moon doesn't like having both :UP and :BACK, but admits that some  file systems do it one way and some do it the other.  He still thinks  it would be simpler if we got rid of :BACK and just had :UP.  To keep it simple, we chose not to add to this issue the functions  DIRECTORY-PATHNAME-AS-FILE and PATHNAME-AS-DIRECTORY, which convert  the name of a directory from or to the directory component of a file  inferior to that directory.  This conversion is system-dependent, for  example TOPS-20 appends a type field and Unix does not.  Also in some  systems the root directory has a name and in others it doesn't.  Of  course these functions signal an error in non-hierarchical file  systems.  Examples (for Unix, assuming #P print syntax for pathnames):   (directory-pathname-as-file #P"/usr/bin/sh") => #P"/usr/bin"   (pathname-as-directory #P"/usr/bin") => #P"/usr/bin"/  These functions have not been proposed because they are mainly useful  in conjunction with additional functions for manipulating directories  (creating, expunging, setting access control) that have not been made  available in Common Lisp.*start*14800 00024 US GV-Info: X3J13-mailer@SAIL.Stanford.EDU at 21-Jun-89 11:01:01 from AGReturn-Path: <X3J13-mailer@SAIL.Stanford.EDU>Received: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 21 JUN 89 11:00:16 PDTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 21 Jun 89  10:42:04 PDTReceived: from Cabernet.ms by ArpaGateway.ms ; 21 JUN 89 10:37:57 PDTDate: 21 Jun 89 10:37 PDTFrom: masinter.paSubject: Issue: PATHNAME-SUBDIRECTORY-LIST (version 6)To: x3J13@sail.stanford.eduMessage-ID: <890621-103757-17307@Xerox>This issue was deferred from March.  Kent Pitman and David Moonhave prepared this revised writeup. Additional comments areat the end...!Issue:          PATHNAME-SUBDIRECTORY-LISTReferences:     Pathnames (pp410-413), MAKE-PATHNAME (p416),                PATHNAME-DIRECTORY (p417)Related-issues: PATHNAME-COMPONENT-CASE, PATHNAME-COMPONENT-VALUECategory:       CHANGEEdit history:   18-Jun-87, Version 1 by Ghenis.pasa@Xerox.COM                05-Jul-88, Version 2 by Pitman (major revision)                28-Dec-88, Version 3 by Pitman (merge discussion)                22-Mar-89, Version 4 by Moon (fix based on discussion)                19-May-89, Version 5 by Moon (improve based on mail)                21-May-89, Version 6 by Moon (final cleanups)Problem Description:  It is impossible to write portable code that can produce a pathname  in a subdirectory of a hierarchical file system. This defeats much of  the purpose of the pathname abstraction.  According to CLtL, only a string is a portable value for the directory  component of a pathname.  Thus in order to denote a subdirectory, the use  of punctuation characters (such as dots, slashes, or backslashes) would  be necessary. The very fact that such syntax varies from host to host  means that although the representation might be "portable", the code  using that representation is not portable.  This problem is even worse for programs running on machines on a network  that can retrieve files from multiple hosts, each using a different OS  and thus different subdirectory punctuation.  Related problems:  - In some implementations "FOO.BAR" might denote the "BAR" subdirectory    of "FOO", while in other implementations it would denote a top-level    directory, because "." is not treated as punctuation. To be safe,    portable programs must avoid all potential punctuation characters.  - Even in implementations where "." is used for subdirectories,    "FOO.BAR" may be recognized by some to mean the "BAR" subdirectory of    "FOO" and by others to mean `a seven character directory name with "."    as the fourth character.'  - In fact, CLtL does not even say whether punctuation characters are    part of the string. eg, is "foo" or "/foo" the directory component for    a unix pathname "/foo/bar.lisp". Similarly, is "[FOO]" or "FOO" the    directory component for a VMS pathname "[FOO]ME.LSP"?    PATHNAME-COMPONENT-VALUE:SPECIFY says punctuation characters are not    part of the string.Proposal (PATHNAME-SUBDIRECTORY-LIST:NEW-REPRESENTATION)  Remove the "structured" directory feature mentioned on CLtL p.412.    Allow the value of a pathname's directory component to be a list.  The  car of the list is one of the symbols :ABSOLUTE or :RELATIVE.  Each remaining element of the list is a string or a symbol (see below).  Each string names a single level of directory structure.  The strings  should contain only the directory names themselves -- no punctuation  characters.  A list whose car is the symbol :ABSOLUTE represents a directory path  starting from the root directory.  The list (:ABSOLUTE) represents  the root directory.  The list (:ABSOLUTE "foo" "bar" "baz") represents  the directory called "/foo/bar/baz" in Unix [except possibly for  alphabetic case -- that is the subject of a separate issue].  A list whose car is the symbol :RELATIVE represents a directory path  starting from a default directory.  The list (:RELATIVE) has the same  meaning as NIL and hence is not used.  The list (:RELATIVE "foo" "bar")  represents the directory named "bar" in the directory named "foo" in the  default directory.  In place of a string, at any point in the list, symbols may occur to  indicate special file notations. The following symbols have standard  meanings.  Implementations are permitted to add additional objects of any  non-string type if necessary to represent features of their file systems  that cannot be represented with the standard strings and symbols.  Supplying any non-string, including any of the symbols listed below, to a  file system for which it does not make sense signals an error of type  FILE-ERROR.  For example, Unix does not support :WILD-INFERIORS.   :WILD           - Wildcard match of one level of directory structure.   :WILD-INFERIORS - Wildcard match of any number of directory levels.   :UP             - Go upward in directory structure (semantic).   :BACK           - Go upward in directory structure (syntactic).  "Syntactic" means that the action of :BACK depends only on the pathname  and not on the contents of the file system.  "Semantic" means that the  action of :UP depends on the contents of the file system; to resolve  a pathname containing :UP to a pathname whose directory component  contains only :ABSOLUTE and strings requires probing the file system.  :UP differs from :BACK only in file systems that support multiple  names for directories, perhaps via symbolic links.  For example,  suppose that there is a directory    (:ABSOLUTE "X" "Y" "Z")  linked to     (:ABSOLUTE "A" "B" "C")  and there also exist directories    (:ABSOLUTE "A" "B" "Q")    (:ABSOLUTE "X" "Y" "Q")  then    (:ABSOLUTE "X" "Y" "Z" :UP "Q")  designates    (:ABSOLUTE "A" "B" "Q")  while    (:ABSOLUTE "X" "Y" "Z" :BACK "Q")  designates    (:ABSOLUTE "X" "Y" "Q")  If a string is used as the value of the :DIRECTORY argument to  MAKE-PATHNAME, it should be the name of a toplevel directory and should  not contain any punctuation characters.  Specifying a string, str, is  equivalent to specifying the list (:ABSOLUTE str).  Specifying the symbol  :WILD is equivalent to specifying the list (:ABSOLUTE :WILD-INFERIORS),  or (:ABSOLUTE :WILD) in a file system that does not support :WILD-INFERIORS.  The PATHNAME-DIRECTORY function always returns NIL, :UNSPECIFIC, or a  list, never a string, never :WILD.  In non-hierarchical file systems, the only valid list values for the  directory component of a pathname are (:ABSOLUTE string) and  (:ABSOLUTE :WILD).  :RELATIVE directories and the keywords  :WILD-INFERIORS, :UP, and :BACK are not used in non-hierarchical file  systems.  Pathname merging treats a relative directory specially.  Let  <pathname> and <defaults> be the first two arguments to  MERGE-PATHNAMES.  If (PATHNAME-DIRECTORY <pathname>) is a list whose  car is :RELATIVE, and (PATHNAME-DIRECTORY <defaults>) is a list, then  the merged directory is the value of    (APPEND (PATHNAME-DIRECTORY <defaults>)            (CDR  ;remove :RELATIVE from the front              (PATHNAME-DIRECTORY <pathname>)))  except that if the resulting list contains a string or :WILD immediately  followed by :BACK, both of them are removed.  This removal of redundant  :BACKs is repeated as many times as possible.  If (PATHNAME-DIRECTORY <defaults>) is not a list or  (PATHNAME-DIRECTORY <pathname>) is not a list whose car is :RELATIVE, the  merged directory is    (OR (PATHNAME-DIRECTORY <pathname>) (PATHNAME-DIRECTORY <defaults>))  A relative directory in the pathname argument to a function such as  OPEN is merged with *DEFAULT-PATHNAME-DEFAULTS* before accessing the  file system.Test Cases/Examples:  (PATHNAME-DIRECTORY (PARSE-NAMESTRING "[FOO.BAR]BAZ.LSP")) ;on VMS  => (:ABSOLUTE "FOO" "BAR")  (PATHNAME-DIRECTORY (PARSE-NAMESTRING "/foo/bar/baz.lisp")) ;on Unix  => (:ABSOLUTE "foo" "bar")  or (:ABSOLUTE "FOO" "BAR")  If PATHNAME-COMPONENT-CASE:KEYWORD-ARGUMENT passes with a default of  :COMMON, the value is the second one shown.  (PATHNAME-DIRECTORY (PARSE-NAMESTRING "../baz.lisp")) ;on Unix  => (:RELATIVE :UP)  (PATHNAME-DIRECTORY (PARSE-NAMESTRING "/foo/bar/../mum/baz")) ;on Unix  => (:ABSOLUTE "foo" "bar" :UP "mum")  (PATHNAME-DIRECTORY (PARSE-NAMESTRING ">foo>**>bar>baz.lisp")) ;on LispM  => (:ABSOLUTE "FOO" :WILD-INFERIORS "BAR")  (PATHNAME-DIRECTORY (PARSE-NAMESTRING ">foo>*>bar>baz.lisp")) ;on LispM  => (:ABSOLUTE "FOO" :WILD "BAR")Rationale:  This would allow programs to usefully deal with hierarchical file  systems, which are by far the most common file system type.  This would allow a system construction utility that organizes programs  by subdirectories to be portable to all implementations that have  hierarchical file systems.  Discussion indicated that "Implementations are permitted to add  additional objects of any non-string type if necessary to represent  features of their file systems that cannot be represented with the  standard strings and symbols" is a necessary escape hatch for things like  home directories and fancy pattern matching.  Implementations should  limit their use of this loophole and use the standard keyword symbols  whenever that is possible.Current Practice:  Symbolics Genera implements something very similar to this. The main  differences are:   - In Genera, there is no :ABSOLUTE keyword at the head of the list.     This has been shown to cause some problems in dealing with root     directories. Genera represents the root directory by a keyword     symbol (rather than a list) because the list representation      was not adequately general.   - Genera has no separate concepts of :UP and :BACK.  Genera     represents Unix ".." as :UP, but deals with :UP syntactically, not     semantically.Cost to Implementors:  In principle, nothing about the implementation needs to change except  the treatment of the directory component by MAKE-PATHNAME and  PATHNAME-DIRECTORY. The internal representation can otherwise be left  as-is if necessary.  Implementations such as Genera that already have hierarchical directory  handling will have to make an incompatible change to switch to what  is proposed here.  For implementations that choose to rationalize this representation  throughout their internals and any other implementation-specific  accessors, the cost will be necessarily higher.Cost to Users:  None for portable programs. This change is upward compatible with CLtL.  Nonportable programs will have to be changed if they use implementation  dependent hierarchical directory handling and the implementation  removes support for that when it adds support for this proposal.Cost of Non-Adoption:  Serious portability problems would continue to occur. Programmers would be  driven to the use of implementation-specific facilities because the need  for this is frequently impossible to ignore.Benefits:  The serious costs of non-adoption would be avoided.Aesthetics:  This representation of hierarchical pathnames is easy to use and quite  general. Users will probably see this as an improvement in the aesthetics.Discussion:  This issue was raised a while back but no one was fond of the particular  proposal that was submitted. This is an attempt to revive the issue.  The original proposal, to add a :SUBDIRECTORIES component to a  pathname, was discarded because it imposed an unnatural distinction  between a toplevel directory and its subdirectories. Pitman's guess is  the the idea was to try to make it a compatible change, but since most  programmers will probably want to change from implementation-specific  primitives to portable ones anyway, that's probably not such a big  deal. Also, there could have been some programs which thought the  change was compatible and ended up ignoring important information (the  :SUBDIRECTORIES component). Pitman thought it would be better if  people just accepted the cost of an incompatible change in order to  get something really pretty as a result.  Moon doesn't like having both :UP and :BACK, but admits that some  file systems do it one way and some do it the other.  He still thinks  it would be simpler not to have both.  To keep it simple, we chose not to add to this issue the functions  DIRECTORY-PATHNAME-AS-FILE and PATHNAME-AS-DIRECTORY, which convert  the name of a directory from or to the directory component of a file  inferior to that directory.  This conversion is system-dependent, for  example TOPS-20 appends a type field and Unix does not.  Also in some  systems the root directory has a name and in others it doesn't.  Of  course these functions signal an error in non-hierarchical file  systems.  Examples (for Unix, assuming #P print syntax for pathnames):   (directory-pathname-as-file #P"/usr/bin/sh") => #P"/usr/bin"   (pathname-as-directory #P"/usr/bin") => #P"/usr/bin"/  These functions have not been proposed because they are mainly useful  in conjunction with additional functions for manipulating directories  (creating, expunging, setting access control) that have not been made  available in Common Lisp.!Additional Comments"The comments I made on issue PATHNAME-COMPONENT-VALUE also apply here.In particular, I'm not personally motivated to add such a featurebecause I've never had any need to manipulate hierarchical directoriesfrom within a Common Lisp program.  Any program that does so isnecessarily nonportable.""I'm sorry, but I disagree with your last sentence.  A program that*insists* on using hierarchical directories may be nonportable,but a program that is *prepared* to deal with them if the localfile system happens to contain them is not necessarily nonportable,and indeed may me more portable than a program thast insists ondealing with directories in a nonhierarchical manner.""Yes.  For current practice, IIM does something similar.  The keywords aredifferent, and only :BACK supported.  I believe the keyword mapping is  :ABSOLUTE	:ABSOLUTE-DIRECTORY  :RELATIVE	(no leading keyword)  :BACK		:SUPER-DIRECTORYThe addition of the :RELATIVE keyword is probably cleaner, since it means thatthere is always a keyword at the head of the list, and a test for a relativedirectory is (eq (car directory) :relative) rather than something like(and directory (not (symbolp (car directory)))).The interaction between :BACK and :WILD-INFERIORS doesn't seem clear.  Ibelieve this is a case where :BACK and the thing preceding it cannot bespliced out (you can end up with (... :WILD-INFERIORS :BACK ...).  Also,(:ABSOLUTE :BACK ...) should probably signal an error."*start*00882 00024 USaGV-Info: Moon@STONY-BROOK.SCRC.Symbolics.COM at 21-Jun-89 15:51:03 from AGReturn-Path: <Moon@STONY-BROOK.SCRC.Symbolics.COM>Received: from STONY-BROOK.SCRC.Symbolics.COM ([128.81.41.144]) by Xerox.COM ; 21 JUN 89 15:51:05 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 614836; 21 Jun 89 18:52:29 EDTDate: Wed, 21 Jun 89 18:53 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-SUBDIRECTORY-LIST (version 6)To: masinter.pacc: x3J13@sail.stanford.eduIn-Reply-To: <890621-103757-17307@Xerox>Message-ID: <19890621225311.4.MOON@EUPHRATES.SCRC.Symbolics.COM>Line-fold: NoLarry, this PATHNAME-SUBDIRECTORY-LIST writeup you just mailed out isout of date.  The current version is version 7.  Is it possible thatsome of your incoming mail is getting lost?*start*00959 00024 US GV-Info: X3J13-mailer@SAIL.Stanford.EDU at 21-Jun-89 16:02:01 from AGReturn-Path: <X3J13-mailer@SAIL.Stanford.EDU>Received: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 21 JUN 89 16:02:06 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 21 Jun 89  15:50:41 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 614836; 21 Jun 89 18:52:29 EDTDate: Wed, 21 Jun 89 18:53 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-SUBDIRECTORY-LIST (version 6)To: masinter.pacc: x3J13@sail.stanford.eduIn-Reply-To: <890621-103757-17307@Xerox>Message-ID: <19890621225311.4.MOON@EUPHRATES.SCRC.Symbolics.COM>Line-fold: NoLarry, this PATHNAME-SUBDIRECTORY-LIST writeup you just mailed out isout of date.  The current version is version 7.  Is it possible thatsome of your incoming mail is getting lost?*start*00500 00024 US GV-Info: masinter.pa at 21-Jun-89 18:26:41 from massunterDate: 21 Jun 89 18:26 PDTFrom: masinter.paSubject: Re: Issue: PATHNAME-SUBDIRECTORY-LIST (version 6)In-reply-to: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>'s message of Wed, 21 Jun 89 18:53 EDTTo: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>cc: masinter.pa, x3J13@sail.stanford.eduHoops, maybe so. I'll double check with your records before mailing any more out. Sorry, out there in net-land.*start*00836 00024 US GV-Info: X3J13-mailer@SAIL.Stanford.EDU at 21-Jun-89 18:36:05 from AGReturn-Path: <X3J13-mailer@SAIL.Stanford.EDU>Received: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 21 JUN 89 18:36:11 PDTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 21 Jun 89  18:27:03 PDTReceived: from Cabernet.ms by ArpaGateway.ms ; 21 JUN 89 18:26:54 PDTDate: 21 Jun 89 18:26 PDTFrom: masinter.paSubject: Re: Issue: PATHNAME-SUBDIRECTORY-LIST (version 6)In-reply-to: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>'s message of Wed, 21 Jun 89 18:53 EDTTo: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>cc: masinter.pa, x3J13@sail.stanford.eduMessage-ID: <890621-182654-18446@Xerox>Hoops, maybe so. I'll double check with your records before mailing anymore out. Sorry, out there in net-land.