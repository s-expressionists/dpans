*start*03467 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 23-May-89 12:34:14 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 23 MAY 89 12:34:11 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 23 May 89  12:31:28 PDTReceived: from KENNETH-WILLIAMS.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via INTERNET with SMTP id 599485; 23 May 89 15:29:44 EDTDate: Tue, 23 May 89 15:34 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: MAP-INTO (version 1)To: CL-Cleanup@sail.stanford.eduMessage-ID: <19890523193408.6.MOON@KENNETH-WILLIAMS.SCRC.Symbolics.COM>This is a new issue.  It arose from an investigation of featuresthat are plausibly needed but missing from draft ANSI Common Lisp.This issue seems sufficiently simple and noncontroversial thatI would like to see it on the agenda for the June X3J13 meeting.Let's use the cleanup subcommittee to test the assertion that thisis a simple and noncontroversial issue.  If it's controversial,let's just drop it, otherwise let's give X3J13 a chance to votefor or against it.Issue:          MAP-INTOReferences:     noneRelated issues: BIT-ARRAY-FUNCTIONSCategory:       ADDITIONEdit history:   23-May-89, version 1 by MoonProblem description:  The function MAP is very useful but can be a source of inefficiency  because it conses the result.  Sometimes the user has storage  already allocated in which the result could be stored.Proposal (MAP-INTO:ADD-FUNCTION):  Add the following function:    MAP-INTO result-sequence function &rest sequences		[Function]    Destructively modifies the result-sequence to contain the results of    applying function to each element in the argument sequences in turn.    Returns result-sequence.    MAP-INTO differs from MAP in that it modifies an existing sequence    rather than creating a new one.    The arguments result-sequence and each element of sequences can each be    either a list or a vector (one-dimensional array).  Note that nil is    considered to be a sequence, of length zero.  If result-sequence and    each element of sequences are not all the same length, the iteration    terminates when the shortest sequence is exhausted.    If BIT-ARRAY-FUNCTIONS:NO-NEW-FUNCTIONS passes, then MAP-INTO will    allow result-sequence and each element of sequences to be mappables    all of the same rank.    The function must take at least as many arguments as there are    sequences provided, and at least one sequence must be provided.    If function has side effects, it can count on being called first on all    of the elements with index 0, then on all of those numbered 1, and so    on.Examples:  (map-into x #'+ x y)  (map-into q #'cons keys vals)Rationale:  MAP-INTO is a simple way to express reuse of storage that is  stylistically consistent with the rest of Common Lisp.Current practice:  Symbolics Genera 7.2 implements the proposal.Cost to Implementors:  Small.Cost to Users:  None.Cost of non-adoption:  Small.Performance impact:  None.Benefits:  More expressive language.Esthetics:  User programs won't have to write the above examples as   (loop for xx on x and yy in y do      (setf (car xx) (+ (car xx) yy)))  or something else about equally horrible.Discussion:  None.*start*01532 00024 USmGV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 24-May-89 11:29:55 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 24 MAY 89 11:18:54 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 24 May 89  11:17:34 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 600032; 24 May 89 13:49:16 EDTDate: Wed, 24 May 89 13:49 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: STREAM-CAPABILITIES (version 3), or Issue: MAP-INTO (version 1)To: jonl@lucid.comcc: Moon@STONY-BROOK.SCRC.Symbolics.COM, CL-Cleanup@sail.stanford.eduIn-Reply-To: <8905241509.AA13071@bhopal>Message-ID: <19890524174912.1.KMP@BOBOLINK.SCRC.Symbolics.COM>    Date: Wed, 24 May 89 08:09:16 PDT    From: Jon L White <jonl@lucid.com>    To: Moon@STONY-BROOK.SCRC.Symbolics.COM    Cc: CL-Cleanup@sail.stanford.edu    In-Reply-To: David A. Moon's message of Tue, 23 May 89 14:46 EDT 		 <19890523184654.3.MOON@KENNETH-WILLIAMS.SCRC.Symbolics.COM>    Subject: Issue: STREAM-CAPABILITIES (version 3)    Looks simple enough.  The evidence would be compelling if the guys    who argued so long about fixing the sequence functions to have     "re-usable" versions would lend their support as to the utility    of this thing.    -- JonL --This is really a reply to Moon's MAP-INTO proposal in disguise, right?*start*01046 00024 USmGV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 25-May-89 13:08:38 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 25 MAY 89 13:05:55 PDTReceived: from lucid.com by SAIL.Stanford.EDU with TCP; 25 May 89  13:03:49 PDTReceived: from bhopal ([192.43.178.13]) by heavens-gate id AA01143g; Thu, 25 May 89 13:01:17 PDTReceived: by bhopal id AA16119g; Thu, 25 May 89 13:00:59 PDTDate: Thu, 25 May 89 13:00:59 PDTFrom: Jon L White <jonl@lucid.com>Message-Id: <8905252000.AA16119@bhopal>To: KMP@STONY-BROOK.SCRC.Symbolics.COMCc: Moon@STONY-BROOK.SCRC.Symbolics.COM, CL-Cleanup@sail.stanford.eduIn-Reply-To: Kent M Pitman's message of Wed, 24 May 89 13:49 EDT <19890524174912.1.KMP@BOBOLINK.SCRC.Symbolics.COM>Subject: Issue: STREAM-CAPABILITIES (version 3), or Issue: MAP-INTO (version 1)re: This is really a reply to Moon's MAP-INTO proposal in disguise, right?Oh, gleep, yes.  My apologies.-- JonL --*start*01747 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 13-Jun-89 15:20:21 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 13 JUN 89 15:20:16 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 13 Jun 89  15:18:58 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 610809; 13 Jun 89 18:20:49 EDTDate: Tue, 13 Jun 89 18:20 EDTFrom: Kim Barrett <IIM@ECLA.USC.EDU>Sender: KMP@STONY-BROOK.SCRC.Symbolics.COMSubject: Issue: MAP-INTO (Version 1)To: CL-Cleanup@SAIL.Stanford.EDUComments: Received from Kim Barrett by KMP on MSDOS floppy disk via US MailMessage-ID: <19890613222039.5.KMP@BOBOLINK.SCRC.Symbolics.COM>I don't have any strong objections to this.  The only problem is that thisisn't really the function I want.  The function I really want is a variation onREPLACE, with a function applied to the successive elements from the sourcesequence and the result of the function being stored into the destinationsequence.  Probably the simplest way to add this to the language would be toadd a keyword to REPLACE (say :transform, though I don't have any strongpreference for any particular name) which defaults to IDENTITY.  I suppose Icould write this up as a seperate proposal, but I really don't have the time,especially if I have to argue that it isn't just a puppy.The description of MAP-INTO should be changed to be consistent with MAP andfriends, ie.  MAP-INTO result-sequence function sequence &rest more-sequences [Function]rather than  MAP-INTO result-sequence function &rest sequences		[Function]*start*03303 00024 USaGV-Info: X3J13-mailer@SAIL.Stanford.EDU at 19-Jun-89 09:25:53 from AGReturn-Path: <X3J13-mailer@SAIL.Stanford.EDU>Received: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 19 JUN 89 09:25:55 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 19 Jun 89  09:14:00 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 612957; 19 Jun 89 12:15:55 EDTDate: Mon, 19 Jun 89 12:16 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Reply-To: CL-Cleanup@sail.stanford.eduSubject: Issue: MAP-INTO (version 2)To: X3J13@sail.stanford.eduMessage-ID: <19890619161633.3.MOON@EUPHRATES.SCRC.Symbolics.COM>This is a new issue.  It arose from an investigation of featuresthat are plausibly needed but missing from draft ANSI Common Lisp.This issue seems sufficiently simple and noncontroversial thatI would like to see it on the agenda for the June X3J13 meeting.Issue:          MAP-INTOReferences:     noneRelated issues: BIT-ARRAY-FUNCTIONSCategory:       ADDITIONEdit history:   23-May-89, version 1 by Moon                19-Jun-89, version 2 by Moon (fix arglist)Problem description:  The function MAP is very useful but can be a source of inefficiency  because it conses the result.  Sometimes the user has storage  already allocated in which the result could be stored.Proposal (MAP-INTO:ADD-FUNCTION):  Add the following function:    MAP-INTO result-sequence function sequence &rest more-sequences  [Function]    Destructively modifies the result-sequence to contain the results of    applying function to each element in the argument sequences in turn.    Returns result-sequence.    MAP-INTO differs from MAP in that it modifies an existing sequence    rather than creating a new one.    The arguments result-sequence and each element of sequences can each be    either a list or a vector (one-dimensional array).  Note that nil is    considered to be a sequence, of length zero.  If result-sequence and    each element of sequences are not all the same length, the iteration    terminates when the shortest sequence is exhausted.    If BIT-ARRAY-FUNCTIONS:NO-NEW-FUNCTIONS passes, then MAP-INTO will    allow result-sequence and each element of sequences to be mappables    all of the same rank.    The function must take at least as many arguments as there are    sequences provided, and at least one sequence must be provided.    If function has side effects, it can count on being called first on all    of the elements with index 0, then on all of those numbered 1, and so    on.Examples:  (map-into x #'+ x y)  (map-into q #'cons keys vals)Rationale:  MAP-INTO is a simple way to express reuse of storage that is  stylistically consistent with the rest of Common Lisp.Current practice:  Symbolics Genera 7.2 implements the proposal.Cost to Implementors:  Small.Cost to Users:  None.Cost of non-adoption:  Small.Performance impact:  None.Benefits:  More expressive language.Esthetics:  User programs won't have to write the above examples as   (loop for xx on x and yy in y do      (setf (car xx) (+ (car xx) yy)))  or something else about equally horrible.Discussion:  None.*start*03007 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 19-Jun-89 10:22:34 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 19 JUN 89 10:22:40 PDTReceived: from Think.COM (Gateway.Think.COM) by SAIL.Stanford.EDU with TCP; 19 Jun 89  10:20:25 PDTReturn-Path: <barmar@Think.COM>Received: from OCCAM.THINK.COM by Think.COM; Mon, 19 Jun 89 13:21:02 EDTDate: Mon, 19 Jun 89 13:19 EDTFrom: Barry Margolin <barmar@Think.COM>Subject: Issue: MAP-INTO (version 2)To: CL-Cleanup@sail.stanford.eduIn-Reply-To: <19890619161633.3.MOON@EUPHRATES.SCRC.Symbolics.COM>Message-Id: <19890619171920.3.BARMAR@OCCAM.THINK.COM>    Date: Mon, 19 Jun 89 12:16 EDT    From: David A. Moon <Moon@stony-brook.scrc.symbolics.com>	The function must take at least as many arguments as there are	sequences provided, and at least one sequence must be provided.I suggest relaxing this, to allow zero argument sequences.  The length ofthe result-sequence would control the number of times the function iscalled.  This would permit something like	(map-into my-sequence #'(lambda () (random 1.0)))to fill a sequence with random numbers.This appears to be what Genera does.	The arguments result-sequence and each element of sequences can each be	either a list or a vector (one-dimensional array).  Note that nil is	considered to be a sequence, of length zero.  If result-sequence and	each element of sequences are not all the same length, the iteration	terminates when the shortest sequence is exhausted.I assume that the result-sequence is included when determining theshortest sequence.  If result-sequence is a vector with a fill pointer,or an adjustable vector, how does this affect things?  Intuitively, thefollowing things seem reasonable:1) The result-sequence's fill pointer could be set to the number ofelements modified (i.e. the minimum of the sequences' lengths).2) The result-sequence should be filled as if its fill pointer wereinitially 0, and each result is then VECTOR-PUSHed onto thevector.  This implies (1).3) When minimizing the sequence lengths, (array-dimensionresult-sequence 0) should be used, rather than (length result-sequence),so that the previous value of the result sequence's fill pointer doesnot cause the iteration to terminate prematurely.  This also impliesthat the VECTOR-PUSH will never try to go beyond the size of the vector.In the case where no argument sequences are provided, it might bereasonable to use (length result-sequence), but I think it would bebetter to maintain consistency.  Fill pointers are generally used toindicate which elements a reader should look at, not to restrict fillingin (for instance, make-array :initial-element initializes ALL theelements, not just up to the fill pointer).Genera appears to use (length result-sequence) all the time.                                                barmar*start*00457 00024 US GV-Info: masinter.pa at 21-Jun-89 22:07:22 from massunterDate: 21 Jun 89 22:07 PDTFrom: masinter.paSubject: Re: Issue: MAP-INTO (version 2)In-reply-to: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>'s message of Mon, 19 Jun 89 12:16 EDTTo: CL-Cleanup@sail.stanford.educc: masinter.paI liked Kim's idea (add transformation function keyword to REPLACE) better than this proposal....can't you do this with LOOP, anyway?*start*04191 00024 US GV-Info: X3J13-mailer@SAIL.Stanford.EDU at 23-Jun-89 11:12:23 from AGReturn-Path: <X3J13-mailer@SAIL.Stanford.EDU>Received: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 23 JUN 89 11:12:02 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 23 Jun 89  10:50:30 PDTReceived: from KENNETH-WILLIAMS.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via INTERNET with SMTP id 616033; 23 Jun 89 13:52:24 EDTDate: Fri, 23 Jun 89 13:50 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: MAP-INTO (version 3)To: X3J13@sail.stanford.eduMessage-ID: <19890623175044.4.MOON@KENNETH-WILLIAMS.SCRC.Symbolics.COM>This is a new issue.  It arose from an investigation of featuresthat are plausibly needed but missing from draft ANSI Common Lisp.This issue seems sufficiently simple and noncontroversial thatI would like to see it on the agenda for the June X3J13 meeting.This version has been revised based on BarMar's suggestions: It canbe called without any argument sequences; if the result sequence isa vector with a fill-pointer, the fill-pointer's current value isignored, and the fill-pointer is set to the number of results produced.Issue:          MAP-INTOReferences:     noneRelated issues: BIT-ARRAY-FUNCTIONSCategory:       ADDITIONEdit history:   23-May-89, version 1 by Moon                19-Jun-89, version 2 by Moon (fix arglist)                23-Jun-89, version 3 by Moon (include BarMar's suggestions)Problem description:  The function MAP is very useful but can be a source of inefficiency  because it conses the result.  Sometimes the user has storage  already allocated in which the result could be stored.Proposal (MAP-INTO:ADD-FUNCTION):  Add the following function:    MAP-INTO result-sequence function &rest sequences            [Function]    Destructively modifies the result-sequence to contain the results of    applying function to each element in the argument sequences in turn.    Returns result-sequence.    The arguments result-sequence and each element of sequences can each be    either a list or a vector (one-dimensional array).  Note that NIL is    considered to be a sequence, of length zero.  If result-sequence and    each element of sequences are not all the same length, the iteration    terminates when the shortest sequence is exhausted.  If result-sequence    is a vector with a fill-pointer, the fill-pointer is ignored when    deciding how many iterations to perform, and afterwards the    fill-pointer is set to the number of times function was applied.    If result-sequence is longer than the shortest element of sequences,    extra elements at the end of result-sequence are left unchanged.    MAP-INTO differs from MAP in that it modifies an existing sequence    rather than creating a new one.  In addition, MAP-INTO can be called    with only two arguments, while MAP requires at least three arguments.    If result-sequence is NIL, MAP-INTO immediately returns NIL, since    NIL is a sequence of length zero.    If BIT-ARRAY-FUNCTIONS:NO-NEW-FUNCTIONS passes, then MAP-INTO will    allow result-sequence and each element of sequences to be mappables    all of the same rank.    The function must take at least as many arguments as there are    sequences provided.    If function has side effects, it can count on being called first on all    of the elements with index 0, then on all of those numbered 1, and so    on.Examples:  (map-into x #'+ x y)  (map-into q #'cons keys vals)  (map-into syms #'gensym)Rationale:  MAP-INTO is a simple way to express reuse of storage that is  stylistically consistent with the rest of Common Lisp.Current practice:  Symbolics Genera 7.2 implements the proposal.Cost to Implementors:  Small.Cost to Users:  None.Cost of non-adoption:  Small.Performance impact:  None.Benefits:  More expressive language.Esthetics:  User programs won't have to write the above examples as   (loop for xx on x and yy in y do      (setf (car xx) (+ (car xx) yy)))  or something else about equally horrible.Discussion:  None.