*start*01728 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 21 OCT 88 09:29:29 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 21 Oct 88  09:27:57 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 479966; Fri 21-Oct-88 12:28:09 EDTDate: Fri, 21 Oct 88 12:27 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: New Issue: WRITE-NEWLINETo: KOSCHMANN@SUMEX-AIM.Stanford.EDUcc: CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <12440047204.16.KOSCHMANN@SUMEX-AIM.Stanford.EDU>Message-ID: <881021122757.4.KMP@BOBOLINK.SCRC.Symbolics.COM>The functionality you're requesting is not a duplication of whatPRINT does. Print prints a newline before AND a space after. I don'tthink anyone's going to buy doing (WRITE frob :NEWLINE-BEFORE-AND-SPACE-AFTER T)nor even (WRITE frob :NEWLINE-FIRST T :SPACE-AFTER T).In practice, most programmers don't even use WRITE (probably for fearthat the keyword argument deciphering is going to be too inefficient)and I suspect that the designers would be more likely to consider arequest to flush WRITE than to extend it. If you want a general purposeI/O operator, FORMAT is probably a better candidate.Anyway, regarding your test case: (dotimes (index 4)   (write index :newline)) 0 1 2 3 NILI assume you meant :NEWLINE T, since keywords must have accompanying values.I don't think it's unreasonable for us to ask you to do the following, whichis available now: (dotimes (index 4)   (write #\Newline :escape nil)   (write index))*start*01645 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 20 OCT 88 17:26:51 PDTReceived: from SUMEX-AIM.Stanford.EDU by SAIL.Stanford.EDU with TCP; 20 Oct 88  17:25:36 PDTDate: Thu, 20 Oct 88 17:20:14 PDTFrom: Tim Koschmann <KOSCHMANN@SUMEX-AIM.Stanford.EDU>Subject: New Issue: WRITE-NEWLINETo: cl-cleanup@sail.Stanford.EDUcc: koschmann@SUMEX-AIM.Stanford.EDUMessage-ID: <12440047204.16.KOSCHMANN@SUMEX-AIM.Stanford.EDU>Issue: 		WRITE-NEWLINEReferences:	CLtL p. 382Category:	ADDITIONEdit history:	20-Oct-88, Version 1 Tim KoschmannProblem Description:CL introduced an omnibus write function with optional keywords for all of the print control variables.  However, to produce the behavior of the print function is cumbersome using only the write function.Proposal WRITE-NEWLINE:Add another keyword for the write function called :newline (or some such) to produce the behavior of the print function.Test Case:CL> (dotimes (index 4)   (write index :newline))0123NILRationale:There is no need for new users to have to know five different output primatives.  The language would be easier to learn if you only needed to know one function for printing.Current Practice:I am aware of no implementation that offers this feature.Cost to Implementors:NegligibleCost to users:noneCost of Non-Adoption:An opportunity lost to try and simplify the language.Benefits:The language would be more consistent and easier to learn.Esthetics:A small improvement.Discussion:None-------