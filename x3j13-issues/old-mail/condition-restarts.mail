*start*08943 00024 USfReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 18 JAN 89 11:24:10 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 18 Jan 89  11:23:06 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 523111; Wed 18-Jan-89 14:21:13 ESTDate: Wed, 18 Jan 89 14:21 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: CONDITION-RESTARTS (Version 1)To: CL-Cleanup@SAIL.Stanford.EDUMessage-ID: <890118142113.3.KMP@BOBOLINK.SCRC.Symbolics.COM>Issue:        CONDITION-RESTARTSForum:	      CleanupReferences:   Common Lisp Condition SystemCategory:     CHANGEEdit history: 18-Jan-89, Version 1 by PitmanStatus:	      For Internal DiscussionProblem Description:  It was noted in the condition system document itself, and many people have  complained privately, that a major weakness of the condition system is the  inability to know whether a particular restart is associated with a   particular signalling action.  The problem being addressed shows itself in situations involving recursive  errors. The programmer wants to make sure that a restart obtained from  FIND-RESTART or COMPUTE-RESTARTS is in fact present for the purpose of  handling some particular error that he is actively focussed on, and not  for some other (outer) error which he was not actively trying to handle.Proposal (CONDITION-RESTARTS:PERMIT-ASSOCIATION):  1. Define that it is an error for SIGNAL to be called on a condition     more than once.  2. Introduce a function COPY-CONDITION:     COPY-CONDITION condition					[Function]      Returns a copy of the given condition.   3. Introduce a macro WITH-CONDITION-RESTARTS which can be used to     dynamically bind the association between a condition and a set     of restarts.      WITH-CONDITION-RESTARTS (condition-form restarts-form) &BODY forms								[Macro]      Evaluates CONDITION-FORM and RESTARTS-FORM, the results of which      should be a condition and a list of restarts, respectively. Then      evaluates the body of forms in implicit-progn style, returning the      last form. While in the dynamic context of the body, the function      COMPUTE-RESTARTS will, when given an argument that was the result      of evaluating the CONDITION-FORM, return the list of restarts that      was the result of evaluating the RESTARTS-FORM.      Only the innermost call to WITH-CONDITION-RESTARTS with a given      condition is relevant. In this way, the set of restarts associated      with a given condition can be dynamically extended or restricted.      Usually this macro is not used explicitly in code, since       SIGNAL-WITH-RESTARTS and ERROR-WITH-RESTARTS handle most of the      common cases in a way that is syntactically more concise.  4. Extend COMPUTE-RESTARTS, FIND-RESTART, ABORT, CONTINUE, USE-VALUE,     and STORE-VALUE to permit an optional condition object as an argument.     When the extra argument is not supplied, these functions behave     exactly as defined before. (Restarts are considered without     prejudice to whether they have been associated with conditions.)     When this argument is supplied, only restarts with the associated      with the given condition are considered. In all other respects, the     behavior is the same.     Passing a condition argument of NIL is treated the same as passing     no condition argument.  5. Add two new macros SIGNAL-WITH-RESTARTS and ERROR-WITH-RESTARTS:     SIGNAL-WITH-RESTARTS condition &rest restart-clauses	[Macro]      This does several things:	1. It enters a context in which the indicated RESTART-CLAUSES	   are available. They have the same form as the clauses in	   a RESTART-CASE.        2. It evaluates CONDITION expression. [This is done after the	   restarts are instantiated because the restarts are probably	   still useful in the debugger if an error occurs during the 	   evaluation of the condition.] The result of the evaluation	   must be a condition object.	3. It associates the condition which resulted from the evaluation	   with the restarts established in step 1, using the equivalent	   of WITH-CONDITION-RESTARTS.	4. It calls SIGNAL on the same condition.     ERROR-WITH-RESTARTS  condition &rest restart-clauses	[Macro]      Like SIGNAL-WITH-RESTARTS but uses ERROR rather than SIGNAL      in step 4.  6. Define that Common Lisp macros such as CHECK-TYPE, which are defined     to signal and to make restarts available, use the equivalent of     WITH-CONDITION-RESTARTS to associate the conditions they signal with     the defined restarts, so that users can make reliable tests not only     for the restarts being available, but also for them being available     for the right reasons.Rationale:  1. The ability to recycle a condition object (including the ability to     resignal a condition) means that the same condition object might be     simultaneously active for two different purposes. In such a case,     no test (not even EQ) would suffice to determine whether a particular     restart belonged with a particular signalling action, since the      condition could not uniquely identify the signalling action. By saying     that a given condition may only be signalled once, we guarantee that     the condition can serve as a unique identifier for a signalling action.  2. Since there may now be some code which has begun to rely on the ability     to re-signal a condition, COPY-CONDITION will help to make this     transition easier. Instead of       (SIGNAL already-signalled-condition)     one can write:      (SIGNAL (COPY-CONDITION already-signalled-condition))  3. This is is the minimal level of support needed to set up an      association between restarts and conditions.  4. This provides a natural interface for retrieving and using the     information about the associations between conditions and restarts.  5. This provides a natural interface for the most common case of     wanting to signal a restart with some associated conditions.Test Case:  (HANDLER-BIND ((ERROR #'(LAMBDA (C) (SIGNAL C)))) (SIGNAL "Test"))  was permissible, but this proposal makes it an error.  (DEFUN TEST-CONDITION-STUFF (OFFER-EXTRA-RESTART 			       USE-CONDITION-ARGUMENT			       USE-FOUND-RESTART)    (HANDLER-BIND ((CONDITION		     #'(LAMBDA (C)			 (LET ((R0 (FIND-RESTART 'USE-VALUE))			       (R1 (IF USE-CONDITION-ARGUMENT				       (FIND-RESTART 'USE-VALUE C)				       (FIND-RESTART 'USE-VALUE))))			   (IF (AND R1 USE-FOUND-RESTART)			       (INVOKE-RESTART R1 (EQ R0 R1))			       (USE-VALUE (EQ R0 R1)))))))      (HANDLER-BIND ((CONDITION		       #'(LAMBDA (C)			   (USE-VALUE			     (IF OFFER-EXTRA-RESTART				 (WITH-RESTARTS				     (SIGNAL (COPY-CONDITION C))				   (USE-VALUE (X) (LIST 'EXTRA X)))				 (SIGNAL (COPY-CONDITION C)))))))	(SIGNAL-WITH-RESTARTS (MAKE-CONDITION 'SIMPLE-CONDITION					      :FORMAT-STRING "Test")	  (USE-VALUE (X) X)))))  Previously, this was an error because it uses non-existent primitives, but  if you assume that    - COPY-CONDITION is implemented in the `obvious' way    - SIGNAL-WITH-RESTARTS just uses WITH-RESTARTS and SIGNAL    - FIND-RESTART ignores its last argument  in the obvious naive ways, it is possible to compare the old and new behavior:				        Current    Proposed  (TEST-CONDITION-STUFF NIL NIL NIL) => T	   T  (TEST-CONDITION-STUFF NIL NIL T)   => T	   T  (TEST-CONDITION-STUFF NIL T   NIL) => T	   T  (TEST-CONDITION-STUFF NIL T   T)   => T	   T  (TEST-CONDITION-STUFF T   NIL NIL) => T	   (EXTRA T)  (TEST-CONDITION-STUFF T   NIL T)   => T	   (EXTRA T)  (TEST-CONDITION-STUFF T   T   NIL) => T          (EXTRA NIL)  (TEST-CONDITION-STUFF T   T   T)   => T	   NILCurrent Practice:  Presumably no implementation does this yet.Cost to Implementors:  Several small, relatively modular changes.Cost to Users:  Except for the change to the recyclability of restarts, this change is   upward compatible.  Probably very few if any users currently take advantage of recycling  restarts, so the cost to users of this change is very slight.    Even in the case where recycling is used, a straightforward rewrite in  terms of COPY-CONDITION is probably feasible.Cost of Non-Adoption:  Use of restarts would not be nearly as reliable.Benefits:  It would be possible to write code which was considerably more robust.Aesthetics:  Some people might consider this proposal to make things slightly better  because it avoids some ambiguities. Others might consider it to make  things slightly worse because it adds additional complexity.Discussion:  Pitman thinks a change of this sort is important.*start*01068 00024 USfReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 30 JAN 89 09:16:57 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 30 Jan 89  09:17:06 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 529993; Mon 30-Jan-89 12:15:06 ESTDate: Mon, 30 Jan 89 12:14 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: CONDITION-RESTARTS (Version 1)To: CL-Cleanup@SAIL.Stanford.EDUReferences: <8901272310.AA10127@void.ai.mit.edu>,            <8901282129.AA10496@void.ai.mit.edu>Message-ID: <890130121458.9.KMP@BOBOLINK.SCRC.Symbolics.COM>The following endorsement came privately from Jonathan..    Date: Sat, 28 Jan 89 16:29:16 EST    From: jar@void.ai.mit.edu (Jonathan Rees)        CONDITION-RESTARTS:PERMIT-ASSOCIATION looks fine to me.    It would certainly clean things up in some code I'm working on*start*02532 00024 USfReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 05 FEB 89 18:41:43 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 5 Feb 89  18:41:41 PSTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 533922; Sun 5-Feb-89 21:39:41 ESTDate: Sun, 5 Feb 89 21:40 ESTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: CONDITION-RESTARTS (Version 1)To: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: CL-Cleanup@SAIL.STANFORD.EDUIn-Reply-To: <890118142113.3.KMP@BOBOLINK.SCRC.Symbolics.COM>Message-ID: <19890206024019.2.MOON@EUPHRATES.SCRC.Symbolics.COM>I strongly favor this proposal; it removes the major objection that Ihad to the CL condition system as it developed.However, I don't favor the COPY-CONDITION function.  I don't think it'snecessary.  More importantly, you have not proposed any concrete specificationof what it does, and unless someone does, it cannot be included in thelanguage.  Fortunately, I think we can just drop it, as I doubt that anyportable program would use it in any significant way that could not justas well be done with a tiny amount of code using other existing primitives.I'd like to suggest for consideration a change to the arglist of theSIGNAL-WITH-RESTARTS and ERROR-WITH-RESTARTS macros.  I'm not so sure thatmy suggestion is a good one, however the issue I'm addressing is real:these new macros are syntactically cumbersome, compared to the SIGNALand ERROR functions, because you have to write an explicit call toMAKE-CONDITION.  This may encourage programmers not to use these newmacros, instead they might wrap a WITH-RESTARTS around a call to SIGNALor ERROR, which looks equivalent to SIGNAL-WITH-RESTART except for havinga nicer syntax, but fails to take advantage of your new feature ofassociation between restarts and conditions.  My suggestion is tochange the first subform of SIGNAL-WITH-RESTARTS and ERROR-WITH-RESTARTS;currently it is a form that evaluates to a condition.  Instead, I proposethat it be a list of forms whose values are used as the arguments toSIGNAL or ERROR or used in an equivalent fashion.  That way if you wantto use MAKE-CONDITION, you have to use one extra pair of parentheses, butyou can use all the other convenience features of SIGNA and ERROR suchas format strings.*start*03591 00024 USfReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 15 FEB 89 12:05:48 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 15 Feb 89  12:05:55 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 539797; Wed 15-Feb-89 15:03:40 ESTDate: Wed, 15 Feb 89 15:03 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: CONDITION-RESTARTS (Version 1)To: CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <890118142113.3.KMP@BOBOLINK.SCRC.Symbolics.COM>Message-ID: <890215150320.0.KMP@BOBOLINK.SCRC.Symbolics.COM>Here's some questions/comments that need to be factored into thenext draft on this issue...1. Moon has suggested that COPY-CONDITION is not necessary.  Does anyone   disagree? I am willing to remove it, but doing so will make this   proposal less `compatible.' I don't care much one way or the other, but   I don't want to be accused of being `callous' toward people who do care.   If this committee will back me up on the removal of that function and   the resulting compatibility problems that could in principle (though   perhaps not in practice) come up, then I'll make the change. Opinions?2. Moon has also asked that the syntax to SIGNAL-WITH-RESTARTS and    ERROR-WITH-RESTARTS be:    SIGNAL-WITH-RESTARTS signal-argument-list &rest restart-clauses    ERROR-WITH-RESTARTS  signal-argument-list &rest restart-clauses   so that you would write    (SIGNAL-WITH-RESTARTS ('FOOD-COLOR-ERROR :FOOD 'LETTUCE :COLOR 'PINK)      ...restart clauses...)   rather than    (SIGNAL-WITH-RESTARTS (MAKE-CONDITION 'FOOD-COLOR-ERROR			    :FOOD 'LETTUCE :COLOR 'PINK)      ...restart clauses...)   If you wanted to use MAKE-CONDITION, you would then write:    (SIGNAL-WITH-RESTARTS ((MAKE-CONDITION 'FOOD-COLOR-ERROR			     :FOOD 'LETTUCE :COLOR 'PINK))      ...restart clauses...)   The advantage of what he proposes is that you could write    (SIGNAL-WITH-RESTARTS ("Bad ~S color" 'FOOD)      ...restart clauses...)   and a condition object would be created implicitly as with SIGNAL. A   possible disadvantage is that    (SIGNAL-WITH-RESTARTS (FOO BAR BAZ)      ...restart clauses...)   might look to someone like the FOO in (FOO BAR BAZ) named a function   rather than a variable. Does anyone else have an opinion on this?3. Rees has suggested that the syntax for WITH-CONDITION-RESTARTS should be     WITH-CONDITION-RESTARTS condition-form restarts-form &BODY forms   rather than    WITH-CONDITION-RESTARTS (condition-form restarts-form) &BODY forms   which it is now. Does anyone else have an opinion?4. Rees has asked for advice about how the condition/restart association   might be implemented -- is some kind of alist structure held by a   special variable what was intended, or ought the condition have a   restarts slot. He and I talked a little about this and eventually he   agreed that it's pretty obvious that the relation should be externally   represented. It's important that the association not be done by a slot   in the condition because if you carry around the condition object after   you're done signalling, you don't want it to contain useless and/or   misleading information about restarts that no longer exist. I'll probably   add some notes to this effect when I generate the next draft.   This doesn't really require comment, unless someone seriously disagrees.*start*05071 00024 USfReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 09 MAR 89 11:28:12 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 9 Mar 89  11:28:12 PSTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 553848; Thu 9-Mar-89 14:25:51 ESTDate: Thu, 9 Mar 89 14:25 ESTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: CONDITION-RESTARTS (Version 1)To: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <890215150320.0.KMP@BOBOLINK.SCRC.Symbolics.COM>Message-ID: <19890309192541.5.MOON@EUPHRATES.SCRC.Symbolics.COM>    Date: Wed, 15 Feb 89 15:03 EST    From: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>    Here's some questions/comments that need to be factored into the    next draft on this issue...I don't have any record of anyone ever answering this message.I reckoned that if someone answered it you might be more motivatedto come up with this next draft.    1. Moon has suggested that COPY-CONDITION is not necessary.  Does anyone       disagree? I am willing to remove it, but doing so will make this       proposal less `compatible.' I don't care much one way or the other, but       I don't want to be accused of being `callous' toward people who do care.       If this committee will back me up on the removal of that function and       the resulting compatibility problems that could in principle (though       perhaps not in practice) come up, then I'll make the change. Opinions?I still believe COPY-CONDITION is not necessary.     2. Moon has also asked that the syntax to SIGNAL-WITH-RESTARTS and        ERROR-WITH-RESTARTS be:	SIGNAL-WITH-RESTARTS signal-argument-list &rest restart-clauses	ERROR-WITH-RESTARTS  signal-argument-list &rest restart-clauses       so that you would write	(SIGNAL-WITH-RESTARTS ('FOOD-COLOR-ERROR :FOOD 'LETTUCE :COLOR 'PINK)	  ...restart clauses...)       rather than	(SIGNAL-WITH-RESTARTS (MAKE-CONDITION 'FOOD-COLOR-ERROR				:FOOD 'LETTUCE :COLOR 'PINK)	  ...restart clauses...)       If you wanted to use MAKE-CONDITION, you would then write:	(SIGNAL-WITH-RESTARTS ((MAKE-CONDITION 'FOOD-COLOR-ERROR				 :FOOD 'LETTUCE :COLOR 'PINK))	  ...restart clauses...)       The advantage of what he proposes is that you could write	(SIGNAL-WITH-RESTARTS ("Bad ~S color" 'FOOD)	  ...restart clauses...)       and a condition object would be created implicitly as with SIGNAL. A       possible disadvantage is that	(SIGNAL-WITH-RESTARTS (FOO BAR BAZ)	  ...restart clauses...)       might look to someone like the FOO in (FOO BAR BAZ) named a function       rather than a variable. Does anyone else have an opinion on this?I still believe my suggestion would be an improvement, but I thinkeven better would be   (WITH-CONDITION-RESTARTS signal-form &rest restart-clauses)where signal-form must be an invocation of SIGNAL, ERROR, WARN, orperhaps a few others, or a macro that expands into such an invocation.WITH-CONDITION-RESTARTS must signal an error at all levels of safety ifit does not recognize the signal-form.  This is "weird" because it usesa form for something other than evaluation (but not unprecedented; thisis exactly what SETF does).  The advantage is that it just nests with anexisting syntax instead of inventing a new, awkward syntax.Note that I stole the "good name" WITH-CONDITION-RESTARTS for thiscommonly used syntax.  The less commonly used primitive that just setsup the restarts without signalling doesn't need as good a name.    3. Rees has suggested that the syntax for WITH-CONDITION-RESTARTS should be 	WITH-CONDITION-RESTARTS condition-form restarts-form &BODY forms       rather than	WITH-CONDITION-RESTARTS (condition-form restarts-form) &BODY forms       which it is now. Does anyone else have an opinion?This is probably a good idea.  I'd probably name this oneWITH-CONDITION-RESTARTS-INTERNAL.  But are we sure that this operationneeds to be named in the standard at all?    4. Rees has asked for advice about how the condition/restart association       might be implemented -- is some kind of alist structure held by a       special variable what was intended, or ought the condition have a       restarts slot. He and I talked a little about this and eventually he       agreed that it's pretty obvious that the relation should be externally       represented. It's important that the association not be done by a slot       in the condition because if you carry around the condition object after       you're done signalling, you don't want it to contain useless and/or       misleading information about restarts that no longer exist. I'll probably       add some notes to this effect when I generate the next draft.       This doesn't really require comment, unless someone seriously disagrees.Agreed.*start*02573 00024 USfReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 09 MAR 89 15:23:37 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 9 Mar 89  15:22:22 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 554205; Thu 9-Mar-89 18:19:55 ESTDate: Thu, 9 Mar 89 18:19 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: CONDITION-RESTARTS (Version 1)To: Moon@STONY-BROOK.SCRC.Symbolics.COMcc: KMP@STONY-BROOK.SCRC.Symbolics.COM, CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <19890309192541.5.MOON@EUPHRATES.SCRC.Symbolics.COM>Message-ID: <890309181944.4.KMP@BOBOLINK.SCRC.Symbolics.COM>    Date: Thu, 9 Mar 89 14:25 EST    From: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>    ...    I still believe my suggestion would be an improvement, but I think    even better would be       (WITH-CONDITION-RESTARTS signal-form &rest restart-clauses)    where signal-form must be an invocation of SIGNAL, ERROR, WARN, or    perhaps a few others, or a macro that expands into such an invocation.    WITH-CONDITION-RESTARTS must signal an error at all levels of safety if    it does not recognize the signal-form.  This is "weird" because it uses    a form for something other than evaluation (but not unprecedented; this    is exactly what SETF does).  The advantage is that it just nests with an    existing syntax instead of inventing a new, awkward syntax.I thought about this. I felt guilty about suggesting it without suggestingan extension mechanism. However, I agree that practical experience with theLispm suggests that the extension mechanism is not really needed. Peoplenearly always use an explicit call to one of these.    Note that I stole the "good name" WITH-CONDITION-RESTARTS for this    commonly used syntax.  The less commonly used primitive that just sets    up the restarts without signalling doesn't need as good a name.I suppose it woudl be too yucky to consider saying that RESTART-CASE hasthis effect when its argument happens to be (or macroexpand into) a callto ERROR, SIGNAL, etc. huh?The justification being that these are lexically recognizable as reallyassociated with the signal. That would leave the name WITH-CONDITION-RESTARTS available for whatyou called ...-INTERNAL, and would eliminate the need for this primitiveas an explicit thing altogether.Thoughts?*start*03648 00024 USfReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 11 MAR 89 19:38:14 PSTReceived: from JASPER.SCRC.Symbolics.COM ([128.81.41.58]) by SAIL.Stanford.EDU with TCP; 11 Mar 89  19:37:54 PSTReceived: from EUPHRATES.SCRC.Symbolics.COM by JASPER.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 262224; Sat 11-Mar-89 22:03:27 ESTDate: Sat, 11 Mar 89 22:03 ESTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: CONDITION-RESTARTS (Version 1)To: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <890309181944.4.KMP@BOBOLINK.SCRC.Symbolics.COM>Message-ID: <19890312030341.3.MOON@EUPHRATES.SCRC.Symbolics.COM>    Date: Thu, 9 Mar 89 18:19 EST    From: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>	Date: Thu, 9 Mar 89 14:25 EST	From: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>	...	I still believe my suggestion would be an improvement, but I think	even better would be 	  (WITH-CONDITION-RESTARTS signal-form &rest restart-clauses)	where signal-form must be an invocation of SIGNAL, ERROR, WARN, or	perhaps a few others, or a macro that expands into such an invocation.	WITH-CONDITION-RESTARTS must signal an error at all levels of safety if	it does not recognize the signal-form.  This is "weird" because it uses	a form for something other than evaluation (but not unprecedented; this	is exactly what SETF does).  The advantage is that it just nests with an	existing syntax instead of inventing a new, awkward syntax.    I thought about this. I felt guilty about suggesting it without suggesting    an extension mechanism. However, I agree that practical experience with the    Lispm suggests that the extension mechanism is not really needed. People    nearly always use an explicit call to one of these.	Note that I stole the "good name" WITH-CONDITION-RESTARTS for this	commonly used syntax.  The less commonly used primitive that just sets	up the restarts without signalling doesn't need as good a name.    I suppose it woudl be too yucky to consider saying that RESTART-CASE has    this effect when its argument happens to be (or macroexpand into) a call    to ERROR, SIGNAL, etc. huh?    The justification being that these are lexically recognizable as really    associated with the signal.     That would leave the name WITH-CONDITION-RESTARTS available for what    you called ...-INTERNAL, and would eliminate the need for this primitive    as an explicit thing altogether.    Thoughts?Well, it is kind of yucky.  On the other hand, it's no yuckier, really, than my suggestion to make WITH-CONDITION-RESTARTS lexically recognizethese forms, except for one thing: my suggestion means it either lexicallyrecognizes the form or signals an error.  Your suggestion means it eitherlexically recognizes the form and attaches the restarts to the condition,or does not lexically recognize the form and does not attach the restartsto the condition, but still signals the condition and still establishesthe restarts.  The question is, is it a bad thing to signal the conditionwith the restarts in effect but not attached to it?  Well, maybe it's notas bad a thing as having another macro just for attaching restarts.Either way Gabriel is going to say it's baroque and eccentric, and he'llbe right.  Right now I'm inclined to agree to modify RESTART-CASE tospecially recognize those signalling forms and attach the restarts tothe condition, but I might change my mind back to the other way.*start*01085 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 14 MAR 89 08:35:40 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 14 Mar 89  08:35:34 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 14 MAR 89 08:28:15 PSTDate: 14 Mar 89 08:27 PSTFrom: masinter.paSubject: Re: Issue: CONDITION-RESTARTS (Version 1)In-reply-to: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>'s message of Sat, 11 Mar 89 22:03 ESTTo: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>, CL-Cleanup@SAIL.Stanford.EDUMessage-ID: <890314-082815-22614@Xerox>I don't think there will be any strong objection if, after someconsideration, you want to remove a function from the condition system,even though it is "incompatible"; the condition system has not been with uslong enough that "tweaks" are out of line.Should the condition system symbols be in the LISP package or theCONDITIONS package? The current draft of the standard doesn't distinguishtheir package.*start*00293 00024 USaDate: 14 Mar 89 08:56 PSTFrom: Stan lanning <lanning.pa>Subject: Re: Issue: CONDITION-RESTARTS (Version 1)In-reply-to: masinter.pa's message of 14 Mar 89 08:27 PSTTo: masinter.paIs there a set of "standard" conditions as part of the condition system?----- smL*start*00235 00024 US Date: 14 Mar 89 09:08 PSTFrom: masinter.paSubject: Re: Issue: CONDITION-RESTARTS (Version 1)In-reply-to: your message of 14 Mar 89 08:56 PSTTo: Stan lanning <lanning.pa>cc: masinter.paYes, I believe so. *start*12459 00024 US GV-Info: X3J13-mailer@SAIL.Stanford.EDU at 16-Mar-89 11:13:46 from AGReturn-Path: <X3J13-mailer@SAIL.Stanford.EDU>Received: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 16 MAR 89 11:05:07 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 16 Mar 89  10:44:53 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 16 MAR 89 10:30:53 PSTDate: 16 Mar 89 10:24 PSTFrom: masinter.paSubject: DRAFT Issue: CONDITION-RESTARTS (Version 1)To: x3j13@SAIL.Stanford.EDUline-fold: NOMessage-ID: <890316-103053-4587@Xerox>There will possibly be a new version of this issue availableat the meeting. Additional comments excerpted at the end...!Issue:        CONDITION-RESTARTSForum:	      CleanupReferences:   Common Lisp Condition SystemCategory:     CHANGEEdit history: 18-Jan-89, Version 1 by PitmanProblem Description:  It was noted in the condition system document itself, and many people have  complained privately, that a major weakness of the condition system is the  inability to know whether a particular restart is associated with a   particular signalling action.  The problem being addressed shows itself in situations involving recursive  errors. The programmer wants to make sure that a restart obtained from  FIND-RESTART or COMPUTE-RESTARTS is in fact present for the purpose of  handling some particular error that he is actively focussed on, and not  for some other (outer) error which he was not actively trying to handle.Proposal (CONDITION-RESTARTS:PERMIT-ASSOCIATION):  1. Define that it is an error for SIGNAL to be called on a condition     more than once.  2. Introduce a function COPY-CONDITION:     COPY-CONDITION condition					[Function]      Returns a copy of the given condition.   3. Introduce a macro WITH-CONDITION-RESTARTS which can be used to     dynamically bind the association between a condition and a set     of restarts.      WITH-CONDITION-RESTARTS (condition-form restarts-form) &BODY forms								[Macro]      Evaluates CONDITION-FORM and RESTARTS-FORM, the results of which      should be a condition and a list of restarts, respectively. Then      evaluates the body of forms in implicit-progn style, returning the      last form. While in the dynamic context of the body, the function      COMPUTE-RESTARTS will, when given an argument that was the result      of evaluating the CONDITION-FORM, return the list of restarts that      was the result of evaluating the RESTARTS-FORM.      Only the innermost call to WITH-CONDITION-RESTARTS with a given      condition is relevant. In this way, the set of restarts associated      with a given condition can be dynamically extended or restricted.      Usually this macro is not used explicitly in code, since       SIGNAL-WITH-RESTARTS and ERROR-WITH-RESTARTS handle most of the      common cases in a way that is syntactically more concise.  4. Extend COMPUTE-RESTARTS, FIND-RESTART, ABORT, CONTINUE, USE-VALUE,     and STORE-VALUE to permit an optional condition object as an argument.     When the extra argument is not supplied, these functions behave     exactly as defined before. (Restarts are considered without     prejudice to whether they have been associated with conditions.)     When this argument is supplied, only restarts with the associated      with the given condition are considered. In all other respects, the     behavior is the same.     Passing a condition argument of NIL is treated the same as passing     no condition argument.  5. Add two new macros SIGNAL-WITH-RESTARTS and ERROR-WITH-RESTARTS:     SIGNAL-WITH-RESTARTS condition &rest restart-clauses	[Macro]      This does several things:	1. It enters a context in which the indicated RESTART-CLAUSES	   are available. They have the same form as the clauses in	   a RESTART-CASE.        2. It evaluates CONDITION expression. [This is done after the	   restarts are instantiated because the restarts are probably	   still useful in the debugger if an error occurs during the 	   evaluation of the condition.] The result of the evaluation	   must be a condition object.	3. It associates the condition which resulted from the evaluation	   with the restarts established in step 1, using the equivalent	   of WITH-CONDITION-RESTARTS.	4. It calls SIGNAL on the same condition.     ERROR-WITH-RESTARTS  condition &rest restart-clauses	[Macro]      Like SIGNAL-WITH-RESTARTS but uses ERROR rather than SIGNAL      in step 4.  6. Define that Common Lisp macros such as CHECK-TYPE, which are defined     to signal and to make restarts available, use the equivalent of     WITH-CONDITION-RESTARTS to associate the conditions they signal with     the defined restarts, so that users can make reliable tests not only     for the restarts being available, but also for them being available     for the right reasons.Rationale:  1. The ability to recycle a condition object (including the ability to     resignal a condition) means that the same condition object might be     simultaneously active for two different purposes. In such a case,     no test (not even EQ) would suffice to determine whether a particular     restart belonged with a particular signalling action, since the      condition could not uniquely identify the signalling action. By saying     that a given condition may only be signalled once, we guarantee that     the condition can serve as a unique identifier for a signalling action.  2. Since there may now be some code which has begun to rely on the ability     to re-signal a condition, COPY-CONDITION will help to make this     transition easier. Instead of       (SIGNAL already-signalled-condition)     one can write:      (SIGNAL (COPY-CONDITION already-signalled-condition))  3. This is is the minimal level of support needed to set up an      association between restarts and conditions.  4. This provides a natural interface for retrieving and using the     information about the associations between conditions and restarts.  5. This provides a natural interface for the most common case of     wanting to signal a restart with some associated conditions.Test Case:  (HANDLER-BIND ((ERROR #'(LAMBDA (C) (SIGNAL C)))) (SIGNAL "Test"))  was permissible, but this proposal makes it an error.  (DEFUN TEST-CONDITION-STUFF (OFFER-EXTRA-RESTART 			       USE-CONDITION-ARGUMENT			       USE-FOUND-RESTART)    (HANDLER-BIND ((CONDITION		     #'(LAMBDA (C)			 (LET ((R0 (FIND-RESTART 'USE-VALUE))			       (R1 (IF USE-CONDITION-ARGUMENT				       (FIND-RESTART 'USE-VALUE C)				       (FIND-RESTART 'USE-VALUE))))			   (IF (AND R1 USE-FOUND-RESTART)			       (INVOKE-RESTART R1 (EQ R0 R1))			       (USE-VALUE (EQ R0 R1)))))))      (HANDLER-BIND ((CONDITION		       #'(LAMBDA (C)			   (USE-VALUE			     (IF OFFER-EXTRA-RESTART				 (WITH-RESTARTS				     (SIGNAL (COPY-CONDITION C))				   (USE-VALUE (X) (LIST 'EXTRA X)))				 (SIGNAL (COPY-CONDITION C)))))))	(SIGNAL-WITH-RESTARTS (MAKE-CONDITION 'SIMPLE-CONDITION					      :FORMAT-STRING "Test")	  (USE-VALUE (X) X)))))  Previously, this was an error because it uses non-existent primitives, but  if you assume that    - COPY-CONDITION is implemented in the `obvious' way    - SIGNAL-WITH-RESTARTS just uses WITH-RESTARTS and SIGNAL    - FIND-RESTART ignores its last argument  in the obvious naive ways, it is possible to compare the old and new behavior:				        Current    Proposed  (TEST-CONDITION-STUFF NIL NIL NIL) => T	   T  (TEST-CONDITION-STUFF NIL NIL T)   => T	   T  (TEST-CONDITION-STUFF NIL T   NIL) => T	   T  (TEST-CONDITION-STUFF NIL T   T)   => T	   T  (TEST-CONDITION-STUFF T   NIL NIL) => T	   (EXTRA T)  (TEST-CONDITION-STUFF T   NIL T)   => T	   (EXTRA T)  (TEST-CONDITION-STUFF T   T   NIL) => T          (EXTRA NIL)  (TEST-CONDITION-STUFF T   T   T)   => T	   NILCurrent Practice:  Presumably no implementation does this yet.Cost to Implementors:  Several small, relatively modular changes.Cost to Users:  Except for the change to the recyclability of restarts, this change is   upward compatible.  Probably very few if any users currently take advantage of recycling  restarts, so the cost to users of this change is very slight.    Even in the case where recycling is used, a straightforward rewrite in  terms of COPY-CONDITION is probably feasible.Cost of Non-Adoption:  Use of restarts would not be nearly as reliable.Benefits:  It would be possible to write code which was considerably more robust.Aesthetics:  Some people might consider this proposal to make things slightly better  because it avoids some ambiguities. Others might consider it to make  things slightly worse because it adds additional complexity.Discussion:  Pitman thinks a change of this sort is important.!"CONDITION-RESTARTS:PERMIT-ASSOCIATION looks fine to me.    It would certainly clean things up in some code I'm working on..""I strongly favor this proposal; it removes the major objection that Ihad to the CL condition system as it developed.However, I don't favor the COPY-CONDITION function.  I don't think it'snecessary.  More importantly, you have not proposed any concrete specificationof what it does, and unless someone does, it cannot be included in thelanguage.  Fortunately, I think we can just drop it, as I doubt that anyportable program would use it in any significant way that could not justas well be done with a tiny amount of code using other existing primitives.[generally agreed]" .. how (should) the condition/restart association   might be implemented -- is some kind of alist structure held by a   special variable what was intended, or ought the condition have a   restarts slot? ... it's pretty obvious that the relation should be externally   represented. It's important that the association not be done by a slot   in the condition because if you carry around the condition object after   you're done signalling, you don't want it to contain useless and/or   misleading information about restarts that no longer exist.""... syntax to SIGNAL-WITH-RESTARTS and        ERROR-WITH-RESTARTS should be:	SIGNAL-WITH-RESTARTS signal-argument-list &rest restart-clauses	ERROR-WITH-RESTARTS  signal-argument-list &rest restart-clauses       so that you would write	(SIGNAL-WITH-RESTARTS ('FOOD-COLOR-ERROR :FOOD 'LETTUCE :COLOR 'PINK)	  ...restart clauses...)       rather than	(SIGNAL-WITH-RESTARTS (MAKE-CONDITION 'FOOD-COLOR-ERROR				:FOOD 'LETTUCE :COLOR 'PINK)	  ...restart clauses...)       If you wanted to use MAKE-CONDITION, you would then write:	(SIGNAL-WITH-RESTARTS ((MAKE-CONDITION 'FOOD-COLOR-ERROR				 :FOOD 'LETTUCE :COLOR 'PINK))	  ...restart clauses...)       The advantage of what he proposes is that you could write	(SIGNAL-WITH-RESTARTS ("Bad ~S color" 'FOOD)	  ...restart clauses...)       and a condition object would be created implicitly as with SIGNAL. A       possible disadvantage is that	(SIGNAL-WITH-RESTARTS (FOO BAR BAZ)	  ...restart clauses...)       might look to someone like the FOO in (FOO BAR BAZ) named a function       rather than a variable. ""... even better would be   (WITH-CONDITION-RESTARTS signal-form &rest restart-clauses)where signal-form must be an invocation of SIGNAL, ERROR, WARN, orperhaps a few others, or a macro that expands into such an invocation.WITH-CONDITION-RESTARTS must signal an error at all levels of safety ifit does not recognize the signal-form.  This is "weird" because it usesa form for something other than evaluation (but not unprecedented; thisis exactly what SETF does).  The advantage is that it just nests with anexisting syntax instead of inventing a new, awkward syntax.Note that I stole the "good name" WITH-CONDITION-RESTARTS for thiscommonly used syntax.  The less commonly used primitive that just setsup the restarts without signalling doesn't need as good a name.""... the syntax for WITH-CONDITION-RESTARTS should be 	WITH-CONDITION-RESTARTS condition-form restarts-form &BODY forms       rather than	WITH-CONDITION-RESTARTS (condition-form restarts-form) &BODY forms       which it is now. Does anyone else have an opinion?This is probably a good idea.  I'd probably name this oneWITH-CONDITION-RESTARTS-INTERNAL.  But are we sure that this operationneeds to be named in the standard"*start*00972 00024 US GV-Info: sandra%defun@cs.utah.edu at 16-Mar-89 11:42:02 from AGReturn-Path: <sandra%defun@cs.utah.edu>Received: from cs.utah.edu ([128.110.4.21]) by Xerox.COM ; 16 MAR 89 11:40:57 PSTReceived: from defun.utah.edu by cs.utah.edu (5.61/utah-2.1-cs)	id AA02340; Thu, 16 Mar 89 12:39:36 -0700Received: by defun.utah.edu (5.61/utah-2.0-leaf)	id AA05919; Thu, 16 Mar 89 12:39:34 -0700From: sandra%defun@cs.utah.edu (Sandra J Loosemore)Message-Id: <8903161939.AA05919@defun.utah.edu>Date: Thu, 16 Mar 89 12:39:32 MSTSubject: Re: DRAFT Issue: CONDITION-RESTARTS (Version 1)To: masinter.paCc: cl-cleanup@SAIL.Stanford.EDUIn-Reply-To: masinter.pa@Xerox.COM, 16 Mar 89 10:24 PSTThis issue impacts the cl-compiler issue COMPILER-DIAGNOSTICS.  Thecurrent proposal we have on that issue requires COMPILE-FILE to establisha condition handler that resignals conditions.  Obviously we have a problem if resignalling is forbidden.-Sandra-------*start*01545 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 17-Mar-89 11:35:21 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 17 MAR 89 10:59:58 PSTReceived: from REAGAN.AI.MIT.EDU by SAIL.Stanford.EDU with TCP; 17 Mar 89  11:00:09 PSTReceived: from ISABEL-PERON.AI.MIT.EDU by REAGAN.AI.MIT.EDU via CHAOS with CHAOS-MAIL id 182335; Fri 17-Mar-89 13:54:53 ESTDate: Fri, 17 Mar 89 13:57 ESTFrom: Richard Mlynarik <Mly@AI.AI.MIT.EDU>Subject: Issue: CONDITION-RESTARTS (Version 1)To: cl-cleanup@sail.stanford.eduIn-Reply-To: <890314-082536-2261@Xerox>Message-ID: <19890317185733.7.MLY@ISABEL-PERON.AI.MIT.EDU>    Date: 14 Mar 89 08:24 PST    From: masinter.pa@xerox.com    Your thoughts?	 ----- Begin Forwarded Messages -----    [...]The proposal doesn't compensate for the mistake of havingdisassociated restarts from context in the first place.All restarts should have associated with them a real predicate(not just a screwy wired-in (lambda (c) (eq c associated-condition)))In general the applicability of a restart depends on the dynamicenvironment in which it invoked as well as that in which itwas established.All restarting forms should require a condition argument (-not- NIL.)Why on earth do ABORT, USE-VALUE, etc still exist?The business about COPY-CONDITION is completely confused.I don't care for the syntax, though it isn't worse thanthat of the rest of the condition system.*start*04674 00024 USaGV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 17-Mar-89 16:19:24 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 17 MAR 89 16:19:12 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 17 Mar 89  16:18:28 PSTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 560081; Fri 17-Mar-89 19:15:40 ESTDate: Fri, 17 Mar 89 19:15 ESTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: CONDITION-RESTARTS (Version 1)To: Richard Mlynarik <Mly@AI.AI.MIT.EDU>, KMP@STONY-BROOK.SCRC.Symbolics.COMcc: cl-cleanup@sail.stanford.eduIn-Reply-To: <19890317185835.8.MLY@ISABEL-PERON.AI.MIT.EDU>Message-ID: <19890318001531.0.MOON@EUPHRATES.SCRC.Symbolics.COM>    Date: Fri, 17 Mar 89 13:58 EST    From: Richard Mlynarik <Mly@AI.AI.MIT.EDU>    The proposal doesn't compensate for the mistake of having    disassociated restarts from context in the first place.    All restarts should have associated with them a real predicate    (not just a screwy wired-in (lambda (c) (eq c associated-condition)))    In general the applicability of a restart depends on the dynamic    environment in which it invoked as well as that in which it    was established.You're absolutely right.  In all the hoopla I had forgotten about this.I think it's quite reasonable to have some convenient syntax for thecommon case where the predicate is to test for a particular conditionobject, but the underlying primitives should allow an arbitrarypredicate.  RESTART-BIND needs to be enhanced with a :TEST argument,which is a predicate function that COMPUTE-RESTARTS calls.    All restarting forms should require a condition argument (-not- NIL.)I disagree with this, because it does make sense to restart a programin response to some situation other than the signalling of a condition.    Why on earth do ABORT, USE-VALUE, etc still exist?I don't know either.    The business about COPY-CONDITION is completely confused.I agree with this.  The argument against resignalling a conditionis wrong; there is no confusion of identity if a condition is signalled,this results in some transfer of control, and then the same conditionobject, representing the same situation that is still happening, issignalled again.  There is also no harm in a system keeping a particularpre-created condition object around and using that same object everytime it signals a particular condition, so long as it keeps its restartsstraight.  Since it is the program that signals a condition thatestablishes restarts bound to that particular condition, it knows whatit is doing, and if it knows that it doesn't establish any restartsthat are associated to the particular condition object, it knows thereis no harm in reusing the condition object.    I don't care for the syntax, though it isn't worse than    that of the rest of the condition system.I don't like the syntax in the version that got mailed to X3J13, whichI don't think was really ready for mailing.  I had some alternate syntaxproposals, but I don't much like them either.Here is what I would suggest doing to the proposal to make it readyfor X3J13:  1. Define that it is an error for SIGNAL to be called on a condition     more than once.  2. Introduce a function COPY-CONDITIONRemove items 1 and 2. Add a :TEST argument to RESTART-BIND.Add a :TEST argument to RESTART-CASE.  3. Introduce a macro WITH-CONDITION-RESTARTSIf we can't think of a better syntax for this, leave it out.  It canalways be done, awkwardly, by first making the condition object andbinding it to a variable, then doing a RESTART-CASE with :TEST predicatesthat check for the condition being that one and with the expressionjust being a call to SIGNAL of that condition.  4. Extend COMPUTE-RESTARTS, FIND-RESTART, ABORT, CONTINUE, USE-VALUE,     and STORE-VALUE to permit an optional condition object as an argument.OK.  5. Add two new macros SIGNAL-WITH-RESTARTS and ERROR-WITH-RESTARTS:Same comment as #3.  6. Define that Common Lisp macros such as CHECK-TYPE, which are defined     to signal and to make restarts available, use the equivalent of     WITH-CONDITION-RESTARTS to associate the conditions they signal with     the defined restarts, so that users can make reliable tests not only     for the restarts being available, but also for them being available     for the right reasons.OK (except don't use the name WITH-CONDITION-RESTARTS).*start*01111 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 17-Mar-89 19:49:11 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 17 MAR 89 19:49:09 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 17 Mar 89  19:49:18 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 17 MAR 89 19:24:08 PSTDate: 17 Mar 89 19:23 PSTFrom: masinter.paSubject: Re: Issue: CONDITION-RESTARTS (Version 1)In-reply-to: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>'s message of Fri, 17 Mar 89 19:15 ESTTo: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>cc: cl-cleanup@sail.stanford.edu, Mly@AI.AI.MIT.EDUMessage-ID: <890317-192408-3127@Xerox>I was mailing the "best draft" of all issues we want to discuss to X3J13 inthe hopes that, even if there are new proposals brought to the meeting,they won't get the "two week" rule applied if they are minor adjustments.Now that its less than two-weeks until the end of the meeting, I think I'llstop trying, if the issues aren't ready.*start*01335 00024 US Date:  4 Apr 89 08:42 PDTSender: CL-Cleanup-mailer%SAIL.Stanford:EDU:XeroxFrom: KMP%STONY-BROOK.SCRC.Symbolics:COM:XeroxSubject: Issue: CONDITION-RESTARTSTo: CL-Cleanup%SAIL.Stanford:EDU:XeroxGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: CONDITION-RESTARTSTo: CL-Cleanup@SAIL.Stanford.EDUReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 04 APR 89 08:40:27 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 4 Apr 89  08:33:21 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 570918; Tue 4-Apr-89 11:33:23 EDTOriginal-Date: Tue, 4 Apr 89 11:32 EDTMessage-ID: <890404113259.2.KMP@BOBOLINK.SCRC.Symbolics.COM>GVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVMy notes say this wasn't ready for a vote. GZ wants us to flush COPY-CONDITION, which we're already planning to do. IIM wants a :TEST keyword for restarts to allow them to selectively apply. Loosemore wants not to forbid resignalling or any new version should relate itself to item 3 of COMPILER-DIAGNOSTICS, which discusses resignalling.Deferred to next meeting.