*start*03104 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 13 SEP 88 11:12:47 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 13 Sep 88  11:09:45 PDTReceived: from GRYPHON.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 458411; Tue 13-Sep-88 14:07:28 EDTDate: Tue, 13 Sep 88 14:06 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: SYMBOL-MACROFLETTo: Moon@STONY-BROOK.SCRC.Symbolics.COMcc: jeff%aiai.edinburgh.ac.uk@NSS.Cs.Ucl.AC.UK, Masinter.pa, cl-cleanup@SAIL.STANFORD.EDUIn-Reply-To: <19880908013813.1.MOON@EUPHRATES.SCRC.Symbolics.COM>Message-ID: <880913140645.0.KMP@GRYPHON.SCRC.Symbolics.COM>    Date: Wed, 7 Sep 88 21:38 EDT    From: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>	Date: Mon, 5 Sep 88 17:51:08 BST	From: Jeff Dalton <jeff%aiai.edinburgh.ac.uk@NSS.Cs.Ucl.AC.UK>	5. Symbol-macro-flet: SYMBOL-MACRO-LET lets me have something that	looks like a variable but is really some expression.  It might seem	that MACROLET does the same for function names, but it doesn't.	MACROLET applies to entire calls, not just the name.  This suggests	that SYMBOL-MACRO-LET should have a companion, SYMBOL-MACRO-FLET.    This is Zetalisp's "lambda macros", also available in Symbolics Common    Lisp.  They're called that because they let users write new things that    behave like LAMBDA. ...I don't think what Jeff's talking about is lambda macros. There are currentlyreally three possibilities: (... symbol ...) (symbol ...) ((symbol ...) ...)Lambda macros are about the third of these. My impression is that Jeff'stalking about the second. For example, in the Cloe implementation of Flavors,the implementation of DEFUN-IN-FLAVOR uses a macro which we callSYMBOL-FMACROLET. That lets (DEFUN-IN-FLAVOR (F FOO) ...) (DEFMETHOD (ZAP FOO) () (F X))[effectively] expand into (DEFUN |F in FOO| ...) (DEFMETHOD (ZAP FOO) () (|F in FOO| ...))by going through an intermediate step such as: (DEFMETHOD (ZAP FOO) ()   (SYMBOL-FMACROLET ((F |F in FOO|))     (F X)))This facility, which I think is the one Jeff is alluding to, is verydifferent from what lambda macros are for.Aside: As far as I've been able to discern, DEFUN-IN-FLAVOR has very littleplace in CLOS so this example may seem a bit foreign to people not familiarwith Flavors. Sorry about that.Regardless of the merits of DEFUN-IN-FLAVOR, I think Jeff's right thatthis companion special form (SYMBOL-FMACROLET or SYMBOL-MACRO-FLET orSYMBOL-MACROFLET or whatever) is interesting. Also, for the sake of aportable implementation of New Flavors and things like it, I think itwould make very good sense to consider adding it now rather than waitinguntil we realize we're screwed without it. SYMBOL-MACROFLET is as hardto write as a macro as SYMBOL-MACROLET, so if you think SYMBOL-MACROLETreally must be a special form, then I argue that so shouldSYMBOL-MACROFLET.*start*01049 00024 US Return-Path: <eb@lucid.com>Received: from lucid.com ([192.26.25.1]) by Xerox.COM ; 13 SEP 88 11:30:35 PDTReceived: from edsel ([192.9.200.1]) by heavens-gate.lucid.com id AA00199g; Tue, 13 Sep 88 10:29:42 PSTReceived: from blacksox.lucid.com by edsel id AA06153g; Tue, 13 Sep 88 11:24:24 PDTReceived: by blacksox id AA00321g; Tue, 13 Sep 88 11:27:10 pdtDate: Tue, 13 Sep 88 11:27:10 pdtFrom: Eric Benson <eb@lucid.com>Message-Id: <8809131827.AA00321@blacksox.lucid.com>To: KMP@STONY-BROOK.SCRC.Symbolics.COMCc: Moon@STONY-BROOK.SCRC.Symbolics.COM, jeff%aiai.edinburgh.ac.uk@NSS.Cs.Ucl.AC.UK, Masinter.pa, cl-cleanup@SAIL.STANFORD.EDUIn-Reply-To: Kent M Pitman's message of Tue, 13 Sep 88 14:06 EDT <880913140645.0.KMP@GRYPHON.SCRC.Symbolics.COM>Subject: SYMBOL-MACROFLETDoesn't this do what you want?(defmacro fsymbolf-fmacrofletf (renamings &body body)  `(macrolet ,(mapcar #'(lambda (renaming)			  `(,(first renaming) (&rest args)			      `(,',(second renaming) ,@args)))		      renamings)     ,@body))*start*01318 00024 US Return-Path: <KMP@STONY-BROOK.SCRC.Symbolics.COM>Received: from STONY-BROOK.SCRC.Symbolics.COM ([128.81.41.144]) by Xerox.COM ; 13 SEP 88 12:10:54 PDTReceived: from GRYPHON.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 458465; Tue 13-Sep-88 15:06:32 EDTDate: Tue, 13 Sep 88 15:05 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: SYMBOL-MACROFLETTo: eb@lucid.comcc: KMP@STONY-BROOK.SCRC.Symbolics.COM, Moon@STONY-BROOK.SCRC.Symbolics.COM, jeff%aiai.edinburgh.ac.uk@NSS.Cs.Ucl.AC.UK, Masinter.pa, cl-cleanup@SAIL.STANFORD.EDUIn-Reply-To: <8809131827.AA00321@blacksox.lucid.com>Message-ID: <880913150548.2.KMP@GRYPHON.SCRC.Symbolics.COM>    Date: Tue, 13 Sep 88 11:27:10 pdt    From: Eric Benson <eb@lucid.com>    Doesn't this do what you want?    (defmacro fsymbolf-fmacrofletf (renamings &body body)      `(macrolet ,(mapcar #'(lambda (renaming)			      `(,(first renaming) (&rest args)				  `(,',(second renaming) ,@args)))			  renamings)	 ,@body))No: think about #' .In my experience, a common reason to use DEFUN-IN-FLAVOR (rather thanDEFMETHOD) is to make the name suitable for MAPCAR. That is, to beable to do (MAPCAR #'local-function things) rather than(MAPCAR #'method-name (CIRCULAR-LIST SELF) things).*start*02024 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 13 SEP 88 12:16:52 PDTReceived: from lucid.com by SAIL.Stanford.EDU with TCP; 13 Sep 88  12:14:13 PDTReceived: from edsel ([192.9.200.1]) by heavens-gate.lucid.com id AA00266g; Tue, 13 Sep 88 11:12:48 PSTReceived: from blacksox.lucid.com by edsel id AA06258g; Tue, 13 Sep 88 12:07:28 PDTReceived: by blacksox id AA00332g; Tue, 13 Sep 88 12:09:15 pdtDate: Tue, 13 Sep 88 12:09:15 pdtFrom: Eric Benson <eb@lucid.com>Message-Id: <8809131909.AA00332@blacksox.lucid.com>To: KMP@STONY-BROOK.SCRC.Symbolics.COMCc: KMP@STONY-BROOK.SCRC.Symbolics.COM, Moon@STONY-BROOK.SCRC.Symbolics.COM, jeff%aiai.edinburgh.ac.uk@NSS.Cs.Ucl.AC.UK, Masinter.pa, cl-cleanup@SAIL.STANFORD.EDUIn-Reply-To: Kent M Pitman's message of Tue, 13 Sep 88 15:05 EDT <880913150548.2.KMP@GRYPHON.SCRC.Symbolics.COM>Subject: SYMBOL-MACROFLET   Date: Tue, 13 Sep 88 15:05 EDT   From: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>       Date: Tue, 13 Sep 88 11:27:10 pdt       From: Eric Benson <eb@lucid.com>       Doesn't this do what you want?       (defmacro fsymbolf-fmacrofletf (renamings &body body)	 `(macrolet ,(mapcar #'(lambda (renaming)				 `(,(first renaming) (&rest args)				     `(,',(second renaming) ,@args)))			     renamings)	    ,@body))   No: think about #' .   In my experience, a common reason to use DEFUN-IN-FLAVOR (rather than   DEFMETHOD) is to make the name suitable for MAPCAR. That is, to be   able to do (MAPCAR #'local-function things) rather than   (MAPCAR #'method-name (CIRCULAR-LIST SELF) things).This will work:(defmacro fsymbolf-fmacrofletf (renamings &body body)  `(flet ,(mapcar #'(lambda (renaming)			  `(,(first renaming) (&rest args)			      `(apply #',',(second renaming) args)))		      renamings)     (declare (inline ,@(mapcar #'first renamings)))     ,@body))Of course you won't be happy with*start*02823 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 13 SEP 88 12:41:14 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 13 Sep 88  12:40:15 PDTReceived: from GRYPHON.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 458509; Tue 13-Sep-88 15:37:08 EDTDate: Tue, 13 Sep 88 15:36 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: SYMBOL-MACROFLETTo: eb@lucid.comcc: KMP@STONY-BROOK.SCRC.Symbolics.COM, Moon@STONY-BROOK.SCRC.Symbolics.COM, jeff%aiai.edinburgh.ac.uk@NSS.Cs.Ucl.AC.UK, Masinter.pa, cl-cleanup@SAIL.STANFORD.EDUIn-Reply-To: <8809131912.AA00335@blacksox.lucid.com>Message-ID: <880913153624.3.KMP@GRYPHON.SCRC.Symbolics.COM>    Date: Tue, 13 Sep 88 12:12:45 pdt    From: Eric Benson <eb@lucid.com>    This will work:    (defmacro fsymbolf-fmacrofletf (renamings &body body)      `(flet ,(mapcar #'(lambda (renaming)			      `(,(first renaming) (&rest args)				  (apply #',(second renaming) args)))			  renamings)	 (declare (inline ,@(mapcar #'first renamings)))	 ,@body))    Of course you won't be happy with the result unless your compiler    optimizes (APPLY x (LIST a b c)) into (FUNCALL x a b c).Ours happens to do that optimization, but not everyone's does so it'sbad to rely on that for portable code, which is actually what I wasthinking about. If I was only worried about our own implementations, wecould just have our own private implementation of fsymbolf-fmacrofletf and be done with it.Also, INLINE is not required to be processed by everyone, so there'sanother place you might take a runtime speed hit.Also, some compilers complain when you don't use the function. So youhave to put #'name1 #'name2 ... etc. at toplevel in the FLET body. [But then you have to worry that some compilers won't remove that.]Anyway, we used to do DEFUN-IN-FLAVOR by using FLET, but the practicalfact is that all the smarts needed to make FLET work can be a big drainon the compiler. If you write zillions of DEFUN-IN-FLAVORs (which somepeople do), then -every- method on that flavor (whether it uses the function or not) must have this enormous FLET in it just so that thecompiler can optimize it out. It is zillions of times more efficientat compile time (how's that for an exacting metric?) to use our SYMBOL-FMACROLET strategy than to use FLET. It forces the compiler todo semantic analysis only on demand -- which is what you need to makea thing like this really useful.(By the way, I -do- like your choice of name. When I finally talk youinto adopting this, I definitely think that fsymbolf-fmacrofletfwill be the icing on the cake. :-)*start*02166 00024 USaReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 13 SEP 88 12:41:48 PDTReceived: from lucid.com by SAIL.Stanford.EDU with TCP; 13 Sep 88  12:16:48 PDTReceived: from edsel ([192.9.200.1]) by heavens-gate.lucid.com id AA00275g; Tue, 13 Sep 88 11:15:23 PSTReceived: from blacksox.lucid.com by edsel id AA06262g; Tue, 13 Sep 88 12:10:00 PDTReceived: by blacksox id AA00335g; Tue, 13 Sep 88 12:12:45 pdtDate: Tue, 13 Sep 88 12:12:45 pdtFrom: Eric Benson <eb@lucid.com>Message-Id: <8809131912.AA00335@blacksox.lucid.com>To: KMP@STONY-BROOK.SCRC.Symbolics.COMCc: KMP@STONY-BROOK.SCRC.Symbolics.COM, Moon@STONY-BROOK.SCRC.Symbolics.COM, jeff%aiai.edinburgh.ac.uk@NSS.Cs.Ucl.AC.UK, Masinter.pa, cl-cleanup@SAIL.STANFORD.EDUIn-Reply-To: Kent M Pitman's message of Tue, 13 Sep 88 15:05 EDT <880913150548.2.KMP@GRYPHON.SCRC.Symbolics.COM>Subject: SYMBOL-MACROFLET   Date: Tue, 13 Sep 88 15:05 EDT   From: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>       Date: Tue, 13 Sep 88 11:27:10 pdt       From: Eric Benson <eb@lucid.com>       Doesn't this do what you want?       (defmacro fsymbolf-fmacrofletf (renamings &body body)	 `(macrolet ,(mapcar #'(lambda (renaming)				 `(,(first renaming) (&rest args)				     `(,',(second renaming) ,@args)))			     renamings)	    ,@body))   No: think about #' .   In my experience, a common reason to use DEFUN-IN-FLAVOR (rather than   DEFMETHOD) is to make the name suitable for MAPCAR. That is, to be   able to do (MAPCAR #'local-function things) rather than   (MAPCAR #'method-name (CIRCULAR-LIST SELF) things).Sorry about the premature posting; my fingers slipped.This will work:(defmacro fsymbolf-fmacrofletf (renamings &body body)  `(flet ,(mapcar #'(lambda (renaming)			  `(,(first renaming) (&rest args)			      (apply #',(second renaming) args)))		      renamings)     (declare (inline ,@(mapcar #'first renamings)))     ,@body))Of course you won't be happy with the result unless your compileroptimizes (APPLY x (LIST a b c)) into (FUNCALL x a b c).*start*00767 00024 US Return-Path: <eb@lucid.com>Received: from lucid.com ([192.26.25.1]) by Xerox.COM ; 20 SEP 88 23:36:37 PDTReceived: from blacksox ([192.9.201.39]) by heavens-gate.lucid.com id AA05167g; Tue, 20 Sep 88 22:28:37 PSTReceived: by blacksox id AA01150g; Tue, 20 Sep 88 23:26:20 pdtDate: Tue, 20 Sep 88 23:26:20 pdtFrom: Eric Benson <eb@lucid.com>Message-Id: <8809210626.AA01150@blacksox>To: masinter.paCc: KMP@STONY-BROOK.SCRC.Symbolics.COM, Moon@STONY-BROOK.SCRC.Symbolics.COM, jeff%aiai.edinburgh.ac.uk@NSS.Cs.Ucl.AC.UKIn-Reply-To: masinter.pa@Xerox.COM's message of 20 Sep 88 17:53 PDT <880920-175312-5239@Xerox>Subject: SYMBOL-MACROFLETI'm certainly not proposing it.  I was trying to define it portably toshow that it isn't needed.*start*05038 00024 USaReturn-Path: <KMP@STONY-BROOK.SCRC.Symbolics.COM>Received: from STONY-BROOK.SCRC.Symbolics.COM ([128.81.41.144]) by Xerox.COM ; 30 SEP 88 15:48:17 PDTReceived: from GRYPHON.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 468640; Fri 30-Sep-88 18:48:15 EDTDate: Fri, 30 Sep 88 18:47 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: SYMBOL-MACROFLET (Version 1)To: Masinter.PAcc: CL-Cleanup@SAIL.Stanford.EDUReferences: <880920-175312-5239@Xerox>Message-ID: <880930184754.5.KMP@GRYPHON.SCRC.Symbolics.COM>    Date: 20 Sep 88 17:53 PDT    From: masinter.pa@Xerox.COM        Is this a cleanup issue/proposal or just an interesting discussion?I thought about it and decided I'd better write it up.The more I think of it, the more I'm inclined to believe it wouldbe really useful (and perhaps quite hard to do without). -kmp-----Issue:        SYMBOL-MACROFLETReferences:   NoneCategory:     ADDITIONEdit history: 30-Sep-88, Version 1 by PitmanStatus:	      For Internal DiscussionProblem Description:  The SYMBOL-MACROLET facility provides access to only one of the two  Common Lisp namespaces.   For example, in the expression (F G), it is possible to bind the  semantics of G using SYMBOL-MACROLET, but there is no analogous  facility for binding the semantics of F.    The ability to have symbol-macros in the functional namespace would  make the creation of a Flavors compatibility package for CLOS much  more feasible. In particular, the DEFUN-IN-FLAVOR feature of Flavors  is not easy to implement efficiently without it.Proposal (SYMBOL-MACROFLET:NEW-MACRO):  Introduce a new macro, SYMBOL-MACROFLET, described as follows:  SYMBOL-MACROFLET ({(symbol expansion)}*) &BODY forms   The macro SYMBOL-MACROFLET provides a mechanism for the substitution   of functional expressions for function names with a lexical scope.   The SYMBOL argument specifies the symbol with which the form   specified  by the EXPANSION argument is to be associated.   Each reference to SYMBOL as a function within the lexical scope of   SYMBOL-MACROFLET is replaced by EXPANSION (not the result of evaluating   EXPANSION).   The result is that obtained by executing the forms specified by the   body FORMS.    The lexical scope of SYMBOL-FMACROLET is the body FORMS; it does not   include EXPANSION.   The use of SYMBOL-MACROFLET can be shadowed by FLET or MACROLET. In   other words, SYMBOL-MACROFLET only substitutes for occurrences of SYMBOL   that would be in the scope of a lexical function binding of SYMBOL   (such as that done by FLET or MACROLET) surrounding the body.Test Case:  (defun ff (x y) (list x y))  (defun op (object)    (symbol-macroflet ((f (lambda (x) (ff object x))))      (list (f 1) (f 2))))  is equivalent to   (defun op (object)    (list ((lambda (x) (ff object x)) 1) ((lambda (x) (ff object x)) 2)))Rationale:  This satisfies the stated goals.  In principle, it would seem as if FLET be used. It has equivalent   expressional power, but in practice the compiler in most implementations  expects that local functions declared in FLET and LABELS will actually  be used in the body. Some implementations even complain when the functions  are not used.  To get around the expectation that FLET functions will be used, it may  be necessary to do    (FLET ((F ...)) #'F ...)  to make sure F gets used, but then some compilers do not optimize that  idiom -- sometimes just producing unreachable code, sometimes even consing  a gratuitous closure.  FLET with INLINE declarations cannot be depended upon portably because  there is no requirement that every implementation support the INLINE  declaration in a serious way.  MACROLET cannot be used because #'symbol would not be possible.  The only other option is to write a code-walker, but that option has been  pretty much shot to bits in the analogous argument about SYMBOL-MACROLET.Current Practice:  Symbolics Cloe has this primitive internally (called SYMBOL-FMACROLET).  It has been used successfully to implement support for DEFUN-IN-FLAVOR,  producing a noticeable improvement in compilation-speed.Cost to Implementors:  Once you're dealing with SYMBOL-MACROLET, this is little extra effort.Cost to Users:  None. This extension is compatible.Cost of Non-Adoption:  A portable compatibility package for Flavors would be difficult to  provide in a way that was both fully portable and reliably efficient.Benefits:  Other applications involving macros that must introduce FLET bindings  which might not get used might be sped up by converting to this  primitive.  Some code could be made faster in implementations which did not  support the INLINE declaration for FLET'd functions by switching to  this primitive.Aesthetics:  This extension corrects the asymmetry in functionality introduced with  SYMBOL-MACROLET.Discussion:  Pitman supports this extension.*start*00885 00024 US Return-Path: <eb@lucid.com>Received: from lucid.com ([192.26.25.1]) by Xerox.COM ; 30 SEP 88 17:51:31 PDTReceived: from blacksox ([192.9.201.39]) by heavens-gate.lucid.com id AA01093g; Fri, 30 Sep 88 16:50:42 PSTReceived: by blacksox id AA00573g; Fri, 30 Sep 88 17:47:28 pdtDate: Fri, 30 Sep 88 17:47:28 pdtFrom: Eric Benson <eb@lucid.com>Message-Id: <8810010047.AA00573@blacksox>To: KMP@STONY-BROOK.SCRC.Symbolics.COMCc: Masinter.PA, CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: Kent M Pitman's message of Fri, 30 Sep 88 18:47 EDT <880930184754.5.KMP@GRYPHON.SCRC.Symbolics.COM>Subject: Issue: SYMBOL-MACROFLET (Version 1)Since FLET is sufficient for this purpose, I see no need to add thisto the language.  Complain to your Common Lisp supplier if you arehaving problems with run-time performance, compile-time performance,or undesirable warnings.*start*00927 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 07 OCT 88 17:46:15 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 7 Oct 88  17:46:10 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 472922; Fri 7-Oct-88 20:44:46 EDTDate: Fri, 7 Oct 88 20:44 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: SYMBOL-MACROFLET (Version 1)To: CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <880930184754.5.KMP@GRYPHON.SCRC.Symbolics.COM>Message-ID: <19881008004426.0.MOON@EUPHRATES.SCRC.Symbolics.COM>I mildly favor SYMBOL-MACROFLET:NEW-MACRO.  Of course, whatever tweakinghappens to the semantics of SYMBOL-MACROLET, SYMBOL-MACROFLET shouldbe kept consistent with it.*start*00869 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 12 DEC 88 15:28:33 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 12 Dec 88  15:27:43 PSTReceived: from Cabernet.ms by ArpaGateway.ms ; 12 DEC 88 15:10:04 PSTDate: 12 Dec 88 15:09 PSTFrom: masinter.paSubject: Re: Issue: SYMBOL-MACROFLET (Version 1)In-reply-to: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>'s message of Fri, 30 Sep 88 18:47 EDTTo: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: Masinter.PA, CL-Cleanup@SAIL.Stanford.EDUMessage-ID: <881212-151004-5356@Xerox>Somehow I missed this issue on my first two passes. I think it needs a newversion to reflect the comments (from EB, Moon).I hope I don't have *too* many copies to cart to Hawaii.