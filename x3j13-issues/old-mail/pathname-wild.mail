*start*04704 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 21 JUL 88 10:47:40 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 21 Jul 88  10:44:00 PDTReceived: from PEWEE.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 436601; Thu 21-Jul-88 13:43:43 EDTDate: Thu, 21 Jul 88 13:43 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-WILD (Version 1)To: CL-Cleanup@SAIL.Stanford.EDUMessage-ID: <880721134308.5.KMP@PEWEE.SCRC.Symbolics.COM>Issue:        PATHNAME-WILDReferences:   Pathnames (pp410-413)Category:     ADDITIONEdit history: 21-Jul-88, Version 1 by PitmanStatus:	      For Internal DiscussionProblem Description:  Some file systems provide more complex conventions for wildcards than  simple component-wise wildcards. For example,  "F*O" might mean:    - a normal three character name    - a three-character name, with the middle char wild    - at least a two-character name, with the middle 0 or more chars wild    - a wild match spanning multiple directories  ">foo>*>bar" might imply:    - the middle directory is named "*"    - the middle directory is :WILD    - there may be zero or more :WILD middle directories    - the middle directory name matches any one-letter name  ">foo>**>bar" might mean    - the middle directory is named "**"    - the middle directory is :WILD    - there may be zero or more :WILD middle directories    - the middle directory name matches any two-letter name  The CL pathname model does not provide a way to represent such wildcards,  which means, for example, that (MAKE-PATHNAME :NAME "F*O") cannot be  recognized by portable code as containing a wildcard.  CL code needs to at least be able to detect and possibly to manipulate  such wildcard pathnames.Proposal (PATHNAME-WILD:NEW-FUNCTION):  Introduce the following function:   WILD-PATHNAME-P pathname &optional field-key			[Function]    Tests a pathname for the presence of wildcard components.   If the first argument is not a pathname an error is signalled.    If no field-key is provided, or the field-key is NIL, this function   returns true if the argument pathname has any wildcard components.   Otherwise, it returns false.    If a non-null field-key is provided, it must be one of :HOST, :DEVICE,   :DIRECTORY, :NAME, :TYPE, or :VERSION. In this case, it returns true   if the argument pathname is wild in the indicated component. Otherwise,   it returns false.Test Case:  #1: (WILD-PATHNAME-P (MAKE-PATHNAME :NAME :WILD)) => T  #2: (WILD-PATHNAME-P (MAKE-PATHNAME :NAME :WILD) :NAME) => T  #3: (WILD-PATHNAME-P (MAKE-PATHNAME :NAME :WILD) :TYPE) => NIL  #4: (WILD-PATHNAME-P (PATHNAME "S:>foo>**>")) => T   ;Lispm  #4: (WILD-PATHNAME-P (PATHNAME :NAME "F*O")) => T ;Most placesRationale:  If the programmer can at least detect wild pathnames reliably,  he can know to do something useful (give up, merge out the bothersome  components, call DIRECTORY for a list of matching pathnames, etc.)Current Practice:  Presumably no implemenation supports the proposal exactly as stated.  Symbolics Genera provides the ability to do    (SEND pathname :WILD-P)  which returns a value such as NIL, :NAME, :TYPE, etc. In the case  that more than one field is wild, however, some information is lost.Cost to Implementors:  Many implementations probably have a substrate which is capable of this  or something similar already. In such cases, it's a relatively small  matter to add the proposed interface.  Even in cases where an implementation doesn't have ready code, it's clearly  better for the implementor to write that code once and for all than to ask  each user of wildcarded code to write it (often more heuristically).Cost to Users:  None. This change is upward compatible.Cost of Non-Adoption:  Wild pathnames would continue to be mistaken for ordinary pathnames in  situations which CL pathnames cannot represent.Benefits:  Portable user interfaces that prompt users for pathnames could more  reliably detect wildcard pathnames and more easily guard against  embarrassing behavior in such situations.Aesthetics:  This change would make some portable code less kludgey.Discussion:  Pitman supports PATHNAME-WILD:NEW-FUNCTION.  If someone wanted to argue that this function should accept strings and such,  coercing its argument to a pathname, I wouldn't object too strenuously. That  would entail adding an optional host argument, though.*start*01001 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 22 JUL 88 10:10:39 PDTReceived: from cs.utah.edu by SAIL.Stanford.EDU with TCP; 22 Jul 88  10:06:06 PDTReceived: by cs.utah.edu (5.54/utah-2.0-cs)	id AA27004; Fri, 22 Jul 88 11:05:45 MDTReceived: by cdr.utah.edu (5.54/utah-2.0-leaf)	id AA02421; Fri, 22 Jul 88 11:05:40 MDTFrom: sandra%cdr@cs.utah.edu (Sandra J Loosemore)Message-Id: <8807221705.AA02421@cdr.utah.edu>Date: Fri, 22 Jul 88 11:05:38 MDTSubject: Re: Issue: PATHNAME-WILD (Version 1)To: Kent M Pitman <KMP@stony-brook.scrc.symbolics.com>Cc: cl-cleanup@sail.stanford.eduIn-Reply-To: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>, Thu, 21 Jul 88 13:43 EDTI've never had any need for this functionality and am not convinced itis really that important.  However, I don't have any strenuousobjections to the content of the proposal.-Sandra-------*start*00945 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 07 SEP 88 20:31:04 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 7 Sep 88  19:18:27 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 455961; Wed 7-Sep-88 22:17:37 EDTDate: Wed, 7 Sep 88 22:17 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-WILD (Version 1)To: CL-Cleanup@SAIL.STANFORD.EDUIn-Reply-To: <880721134308.5.KMP@PEWEE.SCRC.Symbolics.COM>Message-ID: <19880908021721.6.MOON@EUPHRATES.SCRC.Symbolics.COM>I am in favor of PATHNAME-WILD:NEW-FUNCTION with one change.The function name should be PATHNAME-WILD-P rather than WILD-PATHNAME-P;I think that's more consistent with the rest of Common Lisp.*start*01875 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 08 SEP 88 11:45:10 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 8 Sep 88  11:43:42 PDTReceived: from GRYPHON.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 456355; Thu 8-Sep-88 14:40:59 EDTDate: Thu, 8 Sep 88 14:40 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-WILD (Version 1)To: Moon@STONY-BROOK.SCRC.Symbolics.COMcc: CL-Cleanup@SAIL.STANFORD.EDUIn-Reply-To: <19880908021721.6.MOON@EUPHRATES.SCRC.Symbolics.COM>Message-ID: <880908144035.1.KMP@GRYPHON.SCRC.Symbolics.COM>    Date: Wed, 7 Sep 88 22:17 EDT    From: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>    I am in favor of PATHNAME-WILD:NEW-FUNCTION with one change.    The function name should be PATHNAME-WILD-P rather than WILD-PATHNAME-P;    I think that's more consistent with the rest of Common Lisp.I chose modifier-noun-P because of INPUT-STREAM-P, OUTPUT-STREAM-P, ADJUSTABLE-ARRAY-P, BOTH-CASE-P, LOWER-CASE-P, UPPER-CASE-P,ALPHA-CHAR-P, DIGIT-CHAR-P, GRAPHIC-CHAR-P, STANDARD-CHAR-P,SPECIAL-FORM-P, and YES-OR-NO-P.Only ARRAY-IN-BOUNDS-P appears not to fit into this pattern, andarguably because the embedded modifier is a prepositional phraseand not a simple adjective.I'm ignoring COMPILED-FUNCTION-P, RANDOM-STATE-P, HASH-TABLE-P,SIMPLE-VECTOR-P, BIT-VECTOR-P, SIMPLE-BIT-VECTOR-P, SIMPLE-STRING-P,and STRING-CHAR-P even though they would support my case becausethey are really more a hyphenated-type with "-P" appended thansomething with three morphemes.Am I missing something or doesn't this making a compelling casethat WILD-PATHNAME-P is a better name?*start*01757 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 08 SEP 88 13:39:20 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 8 Sep 88  12:53:31 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 456425; Thu 8-Sep-88 15:52:20 EDTDate: Thu, 8 Sep 88 15:52 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-WILD (Version 1)To: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: CL-Cleanup@SAIL.STANFORD.EDUIn-Reply-To: <880908144147.2.KMP@GRYPHON.SCRC.Symbolics.COM>Message-ID: <19880908195203.9.MOON@EUPHRATES.SCRC.Symbolics.COM>    Date: Thu, 8 Sep 88 14:41 EDT    From: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>	Date: Wed, 7 Sep 88 22:17 EDT	From: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>	I am in favor of PATHNAME-WILD:NEW-FUNCTION with one change.	The function name should be PATHNAME-WILD-P rather than WILD-PATHNAME-P;	I think that's more consistent with the rest of Common Lisp.    I chose modifier-noun-P because of INPUT-STREAM-P, OUTPUT-STREAM-P....    Am I missing something or doesn't this making a compelling case    that WILD-PATHNAME-P is a better name?To me PATHNAME-WILD-P is analogous to PATHNAME-DIRECTORY.  It soundslike you are thinking of "wild pathname" as a data type whereas I amthinking of "wildness" as a conceptual slot of a pathname.  CL issufficiently inconsistent that we can both find justification.  Neithercase is compelling and I don't have a strong opinion, although I stilllean to my original position.*start*00967 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 08 SEP 88 16:34:43 PDTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 8 Sep 88  16:34:05 PDTReceived: from Semillon.ms by ArpaGateway.ms ; 08 SEP 88 15:03:14 PDTDate: 8 Sep 88 15:03 PDTFrom: masinter.paSubject: Re: Issue: PATHNAME-WILD (Version 1)In-reply-to: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>'s message of Thu, 8 Sep 88 16:07 EDTTo: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: Moon@STONY-BROOK.SCRC.Symbolics.COM, CL-Cleanup@SAIL.Stanford.EDUMessage-ID: <880908-150314-1255@Xerox>Why don't you add to the discussion something like"We considered the name PATHNAME-WILD-P instead, which is favored by somemembers of the cleanup committee. Precedent for both PATHNAME-WILD-P andWILD-PATHNAME-P (and PATHNAME-WILD) can be found in Common Lisp."*start*05167 00024 USaReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 06 OCT 88 18:52:50 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 6 Oct 88  18:52:19 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via INTERNET with SMTP id 472292; 6 Oct 88 21:50:40 EDTDate: Thu, 6 Oct 88 21:50 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-WILD (Version 2)To: CL-Cleanup@SAIL.Stanford.EDUSupersedes: <881006214951.3.KMP@BOBOLINK.SCRC.Symbolics.COM>Message-ID: <881006215027.4.KMP@BOBOLINK.SCRC.Symbolics.COM>I just added a few remarks in the Discussion.-----Issue:        PATHNAME-WILDReferences:   Pathnames (pp410-413)Category:     ADDITIONEdit history: 21-Jul-88, Version 1 by Pitman	      06-Oct-88, Version 2 by PitmanStatus:	      For Internal DiscussionProblem Description:  Some file systems provide more complex conventions for wildcards than  simple component-wise wildcards. For example,  "F*O" might mean:    - a normal three character name    - a three-character name, with the middle char wild    - at least a two-character name, with the middle 0 or more chars wild    - a wild match spanning multiple directories  ">foo>*>bar" might imply:    - the middle directory is named "*"    - the middle directory is :WILD    - there may be zero or more :WILD middle directories    - the middle directory name matches any one-letter name  ">foo>**>bar" might mean    - the middle directory is named "**"    - the middle directory is :WILD    - there may be zero or more :WILD middle directories    - the middle directory name matches any two-letter name  The CL pathname model does not provide a way to represent such wildcards,  which means, for example, that (MAKE-PATHNAME :NAME "F*O") cannot be  recognized by portable code as containing a wildcard.  CL code needs to at least be able to detect and possibly to manipulate  such wildcard pathnames.Proposal (PATHNAME-WILD:NEW-FUNCTION):  Introduce the following function:   WILD-PATHNAME-P pathname &optional field-key			[Function]    Tests a pathname for the presence of wildcard components.   If the first argument is not a pathname an error is signalled.    If no field-key is provided, or the field-key is NIL, this function   returns true if the argument pathname has any wildcard components.   Otherwise, it returns false.    If a non-null field-key is provided, it must be one of :HOST, :DEVICE,   :DIRECTORY, :NAME, :TYPE, or :VERSION. In this case, it returns true   if the argument pathname is wild in the indicated component. Otherwise,   it returns false.Test Case:  #1: (WILD-PATHNAME-P (MAKE-PATHNAME :NAME :WILD)) => T  #2: (WILD-PATHNAME-P (MAKE-PATHNAME :NAME :WILD) :NAME) => T  #3: (WILD-PATHNAME-P (MAKE-PATHNAME :NAME :WILD) :TYPE) => NIL  #4: (WILD-PATHNAME-P (PATHNAME "S:>foo>**>")) => T   ;Lispm  #4: (WILD-PATHNAME-P (PATHNAME :NAME "F*O")) => T ;Most placesRationale:  If the programmer can at least detect wild pathnames reliably,  he can know to do something useful (give up, merge out the bothersome  components, call DIRECTORY for a list of matching pathnames, etc.)Current Practice:  Presumably no implemenation supports the proposal exactly as stated.  Symbolics Genera provides the ability to do    (SEND pathname :WILD-P)  which returns a value such as NIL, :NAME, :TYPE, etc. In the case  that more than one field is wild, however, some information is lost.Cost to Implementors:  Many implementations probably have a substrate which is capable of this  or something similar already. In such cases, it's a relatively small  matter to add the proposed interface.  Even in cases where an implementation doesn't have ready code, it's clearly  better for the implementor to write that code once and for all than to ask  each user of wildcarded code to write it (often more heuristically).Cost to Users:  None. This change is upward compatible.Cost of Non-Adoption:  Wild pathnames would continue to be mistaken for ordinary pathnames in  situations which CL pathnames cannot represent.Benefits:  Portable user interfaces that prompt users for pathnames could more  reliably detect wildcard pathnames and more easily guard against  embarrassing behavior in such situations.Aesthetics:  This change would make some portable code less kludgey.Discussion:  Pitman supports PATHNAME-WILD:NEW-FUNCTION.  It would have been possible for this function to have accepted  a string as an argument (coercing it to a pathnames), but that  would have entailed adding an optional host argument. We opted  not to do this.  There was some question about the name. The name PATHNAME-WILD-P  suggests a ``slot'' of a pathname (like PATHNAME-HOST),  while WILD-PATHNAME-P suggests a type (like INPUT-STREAM-P).  The committee was split on what to call it. Since it is more  like a type than a slot, the name WILD-PATHNAME-P was chosen.*start*01409 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 06 OCT 88 19:10:26 PDTReceived: from REAGAN.AI.MIT.EDU by SAIL.Stanford.EDU with TCP; 6 Oct 88  19:09:14 PDTReceived: from JACKIE.AI.MIT.EDU by REAGAN.AI.MIT.EDU via CHAOS with CHAOS-MAIL id 141293; Thu 6-Oct-88 22:07:49 EDTDate: Thu, 6 Oct 88 22:07 EDTFrom: Richard Mlynarik <MLY@AI.AI.MIT.EDU>Reply-To: Mly-lisp@MC.LCS.MIT.EDUSubject: Issue: PATHNAME-WILD (Version 2)To: KMP@STONY-BROOK.SCRC.SYMBOLICS.COM, CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <881006214951.3.KMP@BOBOLINK.SCRC.Symbolics.COM>Message-ID: <19881007020748.5.MLY@JACKIE.AI.MIT.EDU>      The CL pathname model does not provide a way to represent such wildcards,      which means, for example, that (MAKE-PATHNAME :NAME "F*O") cannot be      recognized by portable code as containing a wildcard.This is not even `portable' code for creating a wildcarded pathname.How do you distinguish between pathname named "f*o" and a wildcardedpathname which starts with an #\f and ends with an #\o??  (BTW, theSymbolics pathname system ducks the entire issue.)The pathname specification is so crippled that adding dinky frobs likePATHNAME-WILD-P isn't going to make any difference to `portability' --about all it will add is another page to the CL manual.*start*02076 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 06 OCT 88 19:58:59 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 6 Oct 88  19:58:04 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via INTERNET with SMTP id 472317; 6 Oct 88 22:35:25 EDTDate: Thu, 6 Oct 88 22:35 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-WILD (Version 2)To: Mly-lisp@MC.LCS.MIT.EDUcc: KMP@STONY-BROOK.SCRC.Symbolics.COM, CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <19881007020748.5.MLY@JACKIE.AI.MIT.EDU>Message-ID: <881006223513.5.KMP@BOBOLINK.SCRC.Symbolics.COM>    Date: Thu, 6 Oct 88 22:07 EDT    From: Richard Mlynarik <MLY@AI.AI.MIT.EDU>	  The CL pathname model does not provide a way to represent such wildcards,	  which means, for example, that (MAKE-PATHNAME :NAME "F*O") cannot be	  recognized by portable code as containing a wildcard.    This is not even `portable' code for creating a wildcarded pathname.    How do you distinguish between pathname named "f*o" and a wildcarded    pathname which starts with an #\f and ends with an #\o??  (BTW, the    Symbolics pathname system ducks the entire issue.)    The pathname specification is so crippled that adding dinky frobs like    PATHNAME-WILD-P isn't going to make any difference to `portability' --    about all it will add is another page to the CL manual.The purpose of this isn't to say what's wild, it's to give portable codea way to guard against wildcards.Sample portable program that it is not possible to write correctly nowbut would be after this proposal: (DEFUN SHOW-FILE (FILE) ;Allows wildcards   (DOLIST (FILE (IF (PATHNAME-WILD-P FILE)		     (DIRECTORY FILE)		     (LIST FILE)))     (WITH-OPEN-FILE (STREAM FILE)       (DO ((LINE (READ-LINE STREAM NIL NIL) (READ-LINE STREAM NIL NIL)))	   ((NOT LINE))	 (FORMAT T "~&~A~%" LINE)))))*start*00800 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 07 OCT 88 11:51:13 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 7 Oct 88  11:06:09 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 472618; Fri 7-Oct-88 14:04:44 EDTDate: Fri, 7 Oct 88 14:04 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-WILD (Version 2)To: CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <881006215027.4.KMP@BOBOLINK.SCRC.Symbolics.COM>Message-ID: <19881007180424.1.MOON@EUPHRATES.SCRC.Symbolics.COM>PATHNAME-WILD:NEW-FUNCTION looks good to me.*start*00778 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 13 OCT 88 18:07:11 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 13 Oct 88  15:53:48 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 476082; Thu 13-Oct-88 18:52:23 EDTDate: Thu, 13 Oct 88 18:52 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-WILD (Version 2)To: CL-Cleanup@SAIL.Stanford.EDUMessage-ID: <881013185213.0.KMP@BOBOLINK.SCRC.Symbolics.COM>My notes from Fairfax meeting...Cleanup meeting: We thought this was ready to vote.*start*01071 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 28 NOV 88 11:47:13 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 28 Nov 88  11:41:06 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 28 NOV 88 10:23:59 PSTDate: 26 Nov 88 20:21 PSTFrom: masinter.paSubject: Re: Issue: PATHNAME-WILD (Version 2)In-reply-to: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>'s message of Thu, 6 Oct 88 21:50 EDTTo: CL-Cleanup@SAIL.Stanford.EDUMessage-ID: <881128-102359-1313@Xerox>I've always presumed that DIRECTORY was nearly idempotent, e.g.,(let ((x (directory y)))  (assert (or (null x) (equal (directory (car x)) (list (car x))))))The example is not quite as compelling if it is always safe to callDIRECTORY on something that might be a pattern....I don't think we can accept this and also PATHNAME-CANONICAL-CASE; why notPATHNAME-CANONICAL-WILD and just declare that "*" is the Common Lisppathname wild-card character?*start*05430 00024 US GV-Info: X3J13-mailer@SAIL.Stanford.EDU at 23-Mar-89 15:23:00 from AGReturn-Path: <X3J13-mailer@SAIL.Stanford.EDU>Received: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 23 MAR 89 15:20:20 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 23 Mar 89  12:11:23 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 563820; Thu 23-Mar-89 15:11:10 ESTDate: Thu, 23 Mar 89 15:10 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-WILD (Version 2)To: X3J13@SAIL.Stanford.EDUMessage-ID: <890323151049.1.KMP@BOBOLINK.SCRC.Symbolics.COM>	>>> PLEASE DO -NOT- REPLY TO THIS ISSUE <<<Please just ponder it and bring your comments to the meeting.My notes say that at the Fairfax meeting, we (the Cleanup committee)thought this was ready for vote.  This was held up in hopes of a unifiedpathname proposal which did not materialize, and then got lost in theshuffle. -kmp-----Issue:        PATHNAME-WILDReferences:   Pathnames (pp410-413)Category:     ADDITIONEdit history: 21-Jul-88, Version 1 by Pitman	      06-Oct-88, Version 2 by PitmanStatus:	      For Internal DiscussionProblem Description:  Some file systems provide more complex conventions for wildcards than  simple component-wise wildcards. For example,  "F*O" might mean:    - a normal three character name    - a three-character name, with the middle char wild    - at least a two-character name, with the middle 0 or more chars wild    - a wild match spanning multiple directories  ">foo>*>bar" might imply:    - the middle directory is named "*"    - the middle directory is :WILD    - there may be zero or more :WILD middle directories    - the middle directory name matches any one-letter name  ">foo>**>bar" might mean    - the middle directory is named "**"    - the middle directory is :WILD    - there may be zero or more :WILD middle directories    - the middle directory name matches any two-letter name  The CL pathname model does not provide a way to represent such wildcards,  which means, for example, that (MAKE-PATHNAME :NAME "F*O") cannot be  recognized by portable code as containing a wildcard.  CL code needs to at least be able to detect and possibly to manipulate  such wildcard pathnames.Proposal (PATHNAME-WILD:NEW-FUNCTION):  Introduce the following function:   WILD-PATHNAME-P pathname &optional field-key			[Function]    Tests a pathname for the presence of wildcard components.   If the first argument is not a pathname an error is signalled.    If no field-key is provided, or the field-key is NIL, this function   returns true if the argument pathname has any wildcard components.   Otherwise, it returns false.    If a non-null field-key is provided, it must be one of :HOST, :DEVICE,   :DIRECTORY, :NAME, :TYPE, or :VERSION. In this case, it returns true   if the argument pathname is wild in the indicated component. Otherwise,   it returns false.Test Case:  #1: (WILD-PATHNAME-P (MAKE-PATHNAME :NAME :WILD)) => T  #2: (WILD-PATHNAME-P (MAKE-PATHNAME :NAME :WILD) :NAME) => T  #3: (WILD-PATHNAME-P (MAKE-PATHNAME :NAME :WILD) :TYPE) => NIL  #4: (WILD-PATHNAME-P (PATHNAME "S:>foo>**>")) => T   ;Lispm  #4: (WILD-PATHNAME-P (PATHNAME :NAME "F*O")) => T ;Most placesRationale:  If the programmer can at least detect wild pathnames reliably,  he can know to do something useful (give up, merge out the bothersome  components, call DIRECTORY for a list of matching pathnames, etc.)Current Practice:  Presumably no implemenation supports the proposal exactly as stated.  Symbolics Genera provides the ability to do    (SEND pathname :WILD-P)  which returns a value such as NIL, :NAME, :TYPE, etc. In the case  that more than one field is wild, however, some information is lost.Cost to Implementors:  Many implementations probably have a substrate which is capable of this  or something similar already. In such cases, it's a relatively small  matter to add the proposed interface.  Even in cases where an implementation doesn't have ready code, it's clearly  better for the implementor to write that code once and for all than to ask  each user of wildcarded code to write it (often more heuristically).Cost to Users:  None. This change is upward compatible.Cost of Non-Adoption:  Wild pathnames would continue to be mistaken for ordinary pathnames in  situations which CL pathnames cannot represent.Benefits:  Portable user interfaces that prompt users for pathnames could more  reliably detect wildcard pathnames and more easily guard against  embarrassing behavior in such situations.Aesthetics:  This change would make some portable code less kludgey.Discussion:  Pitman supports PATHNAME-WILD:NEW-FUNCTION.  It would have been possible for this function to have accepted  a string as an argument (coercing it to a pathnames), but that  would have entailed adding an optional host argument. We opted  not to do this.  There was some question about the name. The name PATHNAME-WILD-P  suggests a ``slot'' of a pathname (like PATHNAME-HOST),  while WILD-PATHNAME-P suggests a type (like INPUT-STREAM-P).  The committee was split on what to call it. Since it is more  like a type than a slot, the name WILD-PATHNAME-P was chosen.*start*00995 00024 US Date:  4 Apr 89 13:13 PDTSender: CL-Cleanup-mailer%SAIL.Stanford:EDU:XeroxFrom: KMP%STONY-BROOK.SCRC.Symbolics:COM:XeroxSubject: Issue: PATHNAME-WILDTo: CL-Cleanup%SAIL.Stanford:EDU:XeroxGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-WILDTo: CL-Cleanup@SAIL.Stanford.EDUReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 04 APR 89 12:58:25 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 4 Apr 89  12:29:31 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 571241; Tue 4-Apr-89 15:29:26 EDTOriginal-Date: Tue, 4 Apr 89 15:29 EDTMessage-ID: <890404152902.5.KMP@BOBOLINK.SCRC.Symbolics.COM>GVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVThis was deferred to the next meeting.*start*13373 00024 USfGV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 23-May-89 10:20:53 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 23 MAY 89 10:20:42 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 23 May 89  10:18:45 PDTReceived: from KENNETH-WILLIAMS.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via INTERNET with SMTP id 599400; 23 May 89 13:20:31 EDTDate: Tue, 23 May 89 13:24 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-WILD (version 5)To: CL-Cleanup@sail.stanford.eduMessage-ID: <19890523172456.7.MOON@KENNETH-WILLIAMS.SCRC.Symbolics.COM>This issue is on the agenda for the June X3J13 meeting.  KMP and Ihave prepared a revised writeup which we think is ready for release.I'd like to distribute this to X3J13 as soon as discussion, if any,in the cleanup subcommittee is completed.Issue:        PATHNAME-WILDReferences:   Pathnames (pp410-413)Related issues: PATHNAME-LOGICALCategory:     ADDITIONEdit history: 21-Jul-88, Version 1 by Pitman              06-Oct-88, Version 2 by Pitman               9-May-89, Version 3 by Moon (small fixes)              10-May-89, Version 4 by Moon (add two more functions)              13-May-89, Version 5 by Moon (minor cleanups, add clarification)Problem Description:  Some file systems provide more complex conventions for wildcards than  simple component-wise wildcards (:WILD). For example,  "F*O" might mean:    - a normal three character name    - a three-character name, with the middle char wild    - at least a two-character name, with the middle 0 or more chars wild    - a wild match spanning multiple directories  ">foo>*>bar" might imply:    - the middle directory is named "*"    - the middle directory is :WILD    - there may be zero or more :WILD middle directories    - the middle directory name matches any one-letter name  ">foo>**>bar" might mean    - the middle directory is named "**"    - the middle directory is :WILD    - there may be zero or more :WILD middle directories    - the middle directory name matches any two-letter name  Some file systems support even more complex wildcards, for example  regular expressions.  The CL pathname model does not specify a way to represent complex  wildcards, which means, for example, that (MAKE-PATHNAME :NAME "F*O")  cannot be recognized by portable code as containing a wildcard.  Common Lisp provides only the first of these four common operations  on wildcard pathnames:  (1) Enumerate the set of existing files that match the pathname;  this is provided by the DIRECTORY function.  (2) Test whether a pathname contains wildcards.  (3) Test whether a pathname matches a wildcard pathname.  (4) Translate one pathname into another according to a mapping specified  by a pair of wildcard pathnames.Proposal (PATHNAME-WILD:NEW-FUNCTIONS):  Introduce the following three functions:    WILD-PATHNAME-P pathname &optional field-key      Tests a pathname for the presence of wildcard components.  If the first    argument is not a pathname, string, or file stream an error of type    TYPE-ERROR is signalled.      If no <field-key> is provided, or the <field-key> is NIL, the result is    T if <pathname> has any wildcard components, NIL if <pathname> has none.      If a non-null <field-key> is provided, it must be one of :HOST, :DEVICE,    :DIRECTORY, :NAME, :TYPE, or :VERSION.  In this case, the result is T    if the indicated component of <pathname> is a wildcard, NIL if the    component is not a wildcard.    PATHNAME-MATCH-P pathname wildcard    T if <pathname> matches <wildcard>, otherwise NIL.  The matching rules    are implementation-dependent but should be consistent with the    DIRECTORY function.  Missing components of <wildcard> default to :WILD.    If either argument is not a pathname, string, or file stream an error    of type TYPE-ERROR is signalled.  It is valid for <pathname> to be a    wild pathname.  It is valid for <wildcard> to be a non-wild pathname.    TRANSLATE-PATHNAME source from-wildcard to-wildcard &optional reversible    Translate the pathname <source> according to the correspondence between    the two wildcard pathnames.  This translation is implementation    dependent.  The result is <to-wildcard> with each missing or wildcard    field replaced by the portion of <source> that matches the corresponding    field (usually a wildcard) in <from-wildcard>.  Additional translations    of alphabetic case or file naming conventions might also occur,    especially when from-wildcard and to-wildcard are for different hosts.    If <reversible> is false, the translation is determined by the user    interface conventions of the file systems involved.  If <reversible> is    true, the translation must instead be reversible, that is, the    following identity must hold for all cases where no error is signalled:      (equal (translate-pathname (translate-pathname pathname from to t)                                 to from t)             pathname)    In some file systems the above identity is true only when    (member (pathname-version pathname) '(:newest :unspecific)).    This is considered valid, as Common Lisp cannot force all the    file systems in the world to implement versions.    In some file systems the <reversible> argument is ignored because the    user interface conventions are reversible anyway.    If any of the first three arguments is not a pathname, string, or file    stream an error of type TYPE-ERROR is signalled.  It is valid for    <source> to be a wild pathname; in general this will produce a wild    result.  It is valid for <from-wildcard> and/or <to-wildcard> to be    non-wild pathnames.  (PATHNAME-MATCH-P <source> <from-wildcard>) must    be true or an error is signalled.        Implementation guideline: one typical file system performs this    operation by examining each field of the pathnames in turn, where a    field is a component or an element of a structured component such as a    hierarchical directory.  Hierarchical directory elements in    <from-wildcard> and <to-wildcard> are matched by whether they are    wildcards, not by depth in the directory hierarchy.  If the field in    <from-wildcard> does not match the field in <source>, an error is    signalled.  If the field in <to-wildcard> is present and not wild, it    is copied into the result.   If the field in <to-wildcard> is :WILD or    NIL, and either <reversible> is false or the field in <from-wildcard>    is not a complex wildcard, the field in <source> is copied into the    result.  Otherwise, the field in <to-wildcard> might be a complex    wildcard such as "foo*bar" and the field in <from-wildcard> should be    wild; the portion of the field in <source> that matches the wildcard    portion of the field in <from-wildcard> fills in the wildcard portion    of the field in <to-wildcard> and the field value produced is used in    the result.  Clarify that the functions OPEN (and WITH-OPEN-FILE), RENAME-FILE,  DELETE-FILE, PROBE-FILE, FILE-WRITE-DATE, FILE-AUTHOR, LOAD,  COMPILE-FILE, and TRUENAME only accept non-wildcard pathnames and signal  an error if given a pathname for which WILD-PATHNAME-P returns true.Examples:  (WILD-PATHNAME-P (MAKE-PATHNAME :NAME :WILD)) => T  (WILD-PATHNAME-P (MAKE-PATHNAME :NAME :WILD) :NAME) => T  (WILD-PATHNAME-P (MAKE-PATHNAME :NAME :WILD) :TYPE) => NIL  (WILD-PATHNAME-P (PATHNAME "S:>foo>**>")) => T   ;Lispm  (WILD-PATHNAME-P (PATHNAME :NAME "F*O")) => T    ;Most places  ;This example assumes one particular set of wildcard conventions  ;Not all file systems will run this example exactly as written  (DEFUN RENAME-FILES (FROM TO)    (DOLIST (FILE (DIRECTORY FROM))      (RENAME-FILE FILE (TRANSLATE-PATHNAME FILE FROM TO))))  (RENAME-FILES "/usr/me/*.lisp" "/dev/her/*.l")    ;Renames /usr/me/init.lisp to /dev/her/init.l  (RENAME-FILES "/usr/me/pcl*/*" "/sys/pcl/*/")    ;Renames /usr/me/pcl-5-may/low.lisp to /sys/pcl/pcl-5-may/low.lisp    ;In some file systems the result might be /sys/pcl/5-may/low.lisp  (RENAME-FILES "/usr/me/pcl*/*" "/sys/library/*/")    ;Renames /usr/me/pcl-5-may/low.lisp to /sys/library/pcl-5-may/low.lisp    ;In some file systems the result might be /sys/library/5-may/low.lisp  (RENAME-FILES "/usr/me/foo.bar" "/usr/me2/")    ;Renames /usr/me/foo.bar to /usr/me2/foo.bar  ;This example assumes one particular set of wildcard conventions and  ;illustrates how and why reversible translation uses different rules  (PATHNAME-NAME (TRANSLATE-PATHNAME "foobar" "foo*" "*baz" NIL)) => "barbaz"  (PATHNAME-NAME (TRANSLATE-PATHNAME "foobar" "foo*" "*baz" T))   => "barbaz"  (PATHNAME-NAME (TRANSLATE-PATHNAME "foobar" "foo*" "*"    NIL)) => "foobar"  (PATHNAME-NAME (TRANSLATE-PATHNAME "foobar" "foo*" "*"    T))   => "bar"  (PATHNAME-NAME (TRANSLATE-PATHNAME "foobar" "*"    "foo*" NIL)) => "foofoobar"  (PATHNAME-NAME (TRANSLATE-PATHNAME "foobar" "*"    "foo*" T))   => "foofoobar"  (PATHNAME-NAME (TRANSLATE-PATHNAME "bar"    "*"    "foo*" NIL)) => "foobar"  (PATHNAME-NAME (TRANSLATE-PATHNAME "bar"    "*"    "foo*" T))   => "foobar"  ;This example presumes background information described in PATHNAME-LOGICAL  (DEFUN TRANSLATE-LOGICAL-PATHNAME-1 (PATHNAME RULES)    (LET ((RULE (ASSOC PATHNAME RULES :TEST #'PATHNAME-MATCH-P)))      (UNLESS RULE (ERROR "No translation rule for ~A" PATHNAME))      (TRANSLATE-PATHNAME PATHNAME (FIRST RULE) (SECOND RULE) T)))  (TRANSLATE-LOGICAL-PATHNAME-1 "FOO:CODE;BASIC.LISP"                        '(("FOO:DOCUMENTATION;" "MY-UNIX:/doc/foo/")                          ("FOO:CODE;"          "MY-UNIX:/lib/foo/")                          ("FOO:PATCHES;*;"     "MY-UNIX:/lib/foo/patch/*/")))   => the pathname MY-UNIX:/lib/foo/basic.lRationale:  These three functions provide a standardized interface to the  idiosyncratic wildcard functionality of each host file system.  WILD-PATHNAME-P makes it possible to detect wild pathnames reliably and  do something useful (give up, merge out the bothersome components, call  DIRECTORY for a list of matching pathnames, etc.)  TRANSLATE-PATHNAME is needed by many application programs that deal with  wildcard pathnames.  PATHNAME-MATCH-P and TRANSLATE-PATHNAME are needed  by logical pathnames.  The reversible feature is needed by logical  pathnames.Current Practice:  Presumably no implementation supports the proposal exactly as stated.  Symbolics Genera has had similar features under different names for many  years:    (SEND pathname :WILD-P) returns a value such as NIL, :NAME, :TYPE,    etc., indicating the first wild field.    (SEND pathname :NAME-WILD-P), (SEND pathname :DIRECTORY-WILD-P),    etc. test individual fields.    The :TRANSLATE-WILD-PATHNAME, :TRANSLATE-WILD-PATHNAME-REVERSIBLE, and    :PATHNAME-MATCH messages resemble TRANSLATE-PATHNAME and    PATHNAME-MATCH-P.  The clarification is current practice as far as the authors are aware.  If some implementations are found that specify a meaning for wildcard  pathnames as arguments to these functions, this proposal should be changed  to say that the consequences are unspecified rather than signalling an error.Cost to Implementors:  Many implementations probably have a substrate which is capable of this  or something similar already. In such cases, it's a relatively small  matter to add the proposed interface.  Even in cases where an implementation doesn't have ready code, it's clearly  better for the implementor to write that code once and for all than to ask  each user of wildcards to write it.  Since the detailed behavior is at the implementor's discretion, the cost  is unlikely to be large.  Some file systems will do all the work and the  implementor need only provide an interface to the file system or to a  standard library routine.  For other file systems the implementor has to  write the actual matching and translation algorithms.Cost to Users:  None. This change is upward compatible.Cost of Non-Adoption:  Wild pathnames would continue to be mistaken for ordinary pathnames in  many situations.  User programs that deal with wildcard pathnames would  have to operate on implementation-dependent representations and hence  would not be easily portable.  The biggest cost is that any logical pathnames proposal would be stymied.Performance Impact:  None.Benefits:  A more complete set of wildcard pathname operations.  Portable user  programs that deal with wildcard pathnames will be more consistent  and reliable.  A portable system construction tool can be written  and the foundations are laid for a `logical pathname' facility  (proposed separately in PATHNAME-LOGICAL).Aesthetics:  This change would make some portable code less kludgey.Discussion:  There was some question about the name. The name PATHNAME-WILD-P  suggests a ``slot'' of a pathname (like PATHNAME-HOST),  while WILD-PATHNAME-P suggests a type (like INPUT-STREAM-P).  The committee was split on what to call it. Since it is more  like a type than a slot, the name WILD-PATHNAME-P was chosen.*start*01647 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 25-May-89 13:11:04 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 25 MAY 89 13:07:40 PDTReceived: from cs.utah.edu by SAIL.Stanford.EDU with TCP; 25 May 89  13:06:09 PDTReceived: from defun.utah.edu by cs.utah.edu (5.61/utah-2.1-cs)	id AA24402; Thu, 25 May 89 14:06:29 -0600Received: by defun.utah.edu (5.61/utah-2.0-leaf)	id AA09216; Thu, 25 May 89 14:06:20 -0600From: sandra%defun@cs.utah.edu (Sandra J Loosemore)Message-Id: <8905252006.AA09216@defun.utah.edu>Date: Thu, 25 May 89 14:06:18 MDTSubject: Re: Issue: PATHNAME-WILD (version 5)To: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Cc: CL-Cleanup@sail.stanford.edu, sandra%defun@cs.utah.edu, gray@dsg.csc.ti.comIn-Reply-To: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>, Tue, 23 May 89 13:24 EDTI don't have any big objection to the functionality being proposed here,but again it's something I've never needed myself so I'm not real motivated about adding it to the language.I don't understand what all the arguments to TRANSLATE-PATHNAME arefor.  I guess that this function is intended to be a merging operationthat fills in wildcard components in one pathname with matchingcomponents from another pathname, but I don't understand why you needto pass in two wildcard pathnames instead of one, or whatreversibility really implies.  I got kind of lost reading thedescription of this function -- isn't there a more concise way tostate what is going on?-Sandra-------*start*02714 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at  8-Jun-89 17:22:16 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 08 JUN 89 17:22:12 PDTReceived: from ti.com by SAIL.Stanford.EDU with TCP; 8 Jun 89  17:21:00 PDTReceived: by ti.com id AA05063; Thu, 8 Jun 89 18:41:14 CDTReceived: from Kelvin by tilde id AA26425; Tue, 6 Jun 89 19:27:09 CDTMessage-Id: <2822171220-15473020@Kelvin>Sender: GRAY@Kelvin.csc.ti.comDate: Tue, 6 Jun 89 19:27:00 CDTFrom: David N Gray <Gray@DSG.csc.ti.com>To: "David A. Moon" <Moon@STONY-BROOK.SCRC.Symbolics.COM>Cc: CL-Cleanup@sail.stanford.eduSubject: Re: Issue: PATHNAME-WILD (version 5)In-Reply-To: Msg of Tue, 23 May 89 13:24 EDT from David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>> Proposal (PATHNAME-WILD:NEW-FUNCTIONS):> >   Introduce the following three functions:> >     WILD-PATHNAME-P pathname &optional field-key...>     If a non-null <field-key> is provided, it must be one of :HOST, :DEVICE,>     :DIRECTORY, :NAME, :TYPE, or :VERSION.I was worried that permitting (WILD-PATHNAME-P <path> :HOST) impliedthat the host component might be wild, which is impossible in ourimplementation.  But I see that proposalPATHNAME-COMPONENT-VALUE:SPECIFY clarifies that the standard does notrequire support for wild hosts.  So you might want to mention here that(WILD-PATHNAME-P <path> :HOST) is allowed just in case someimplementation might support wild hosts as an extension.> Current Practice:> >   Presumably no implementation supports the proposal exactly as stated.>   Symbolics Genera has had similar features under different names for many>   years:> >     (SEND pathname :WILD-P) returns a value such as NIL, :NAME, :TYPE,>     etc., indicating the first wild field.> >     (SEND pathname :NAME-WILD-P), (SEND pathname :DIRECTORY-WILD-P),>     etc. test individual fields.> >     The :TRANSLATE-WILD-PATHNAME, :TRANSLATE-WILD-PATHNAME-REVERSIBLE, and>     :PATHNAME-MATCH messages resemble TRANSLATE-PATHNAME and>     PATHNAME-MATCH-P.The Explorer also supports the messages :WILD-P (although it onlyreturns NIL or T), :NAME-WILD-P, etc., :TRANSLATE-WILD-PATHNAME, and:PATHNAME-MATCH.>   The clarification is current practice as far as the authors are aware.>   If some implementations are found that specify a meaning for wildcard>   pathnames as arguments to these functions, this proposal should be changed>   to say that the consequences are unspecified rather than signalling an error.The Explorer permits DELETE-FILE on a wild pathname, meaning to deleteall files that match.*start*04427 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 12-Jun-89 15:23:21 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 12 JUN 89 15:23:21 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 12 Jun 89  15:21:56 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 609988; 12 Jun 89 18:23:43 EDTDate: Mon, 12 Jun 89 18:24 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Re: Issue: PATHNAME-WILD (version 5)To: Sandra J Loosemore <sandra%defun@cs.utah.edu>, David N Gray <Gray@DSG.csc.ti.com>cc: CL-Cleanup@sail.stanford.eduIn-Reply-To: <8905252006.AA09216@defun.utah.edu>,             <2822171220-15473020@Kelvin>Message-ID: <19890612222403.1.MOON@EUPHRATES.SCRC.Symbolics.COM>I'm having trouble finding the time to write up revised versionsof these issues, based on your comments, but here is an acknowledgementof your comments and some responses.    Date: Thu, 25 May 89 14:06:18 MDT    From: sandra%defun@cs.utah.edu (Sandra J Loosemore)    I don't understand what all the arguments to TRANSLATE-PATHNAME are    for.  I guess that this function is intended to be a merging operation    that fills in wildcard components in one pathname with matching    components from another pathname, but I don't understand why you need    to pass in two wildcard pathnames instead of one, It's not a merging operation, it's a translating operation.  The two wildcardpathnames tell you what translates to what.  I suppose that's not any clearerthan what the issue writeup said; I'll try to improve the way this isdescribed, if I can find the time.  I take it the example that was givenin the writeup didn't help?  Could you constructively criticize it?    or what reversibility really implies.  Reversibility is easy, it means it obeys the invariant given in theproposal.  The hard question is what does irreversibility really imply(i.e. why don't we just make it reversible all the time?) and that's hardbecause it's implementation-dependent.  The basic idea is that Common Lispcan't dictate any particular wildcard matching and translating algorithm,because every file system has its own idea of what's right, and we'd getinto a religious war if we tried to dictate some particular algorithm.				   I got kind of lost reading the    description of this function -- isn't there a more concise way to    state what is going on?I'll look for one.  Thanks for the feedback.    Date: Tue, 6 Jun 89  19:27:00 CDT    From: David N Gray <Gray@DSG.csc.ti.com>    I was worried that permitting (WILD-PATHNAME-P <path> :HOST) implied    that the host component might be wild, which is impossible in our    implementation.  But I see that proposal    PATHNAME-COMPONENT-VALUE:SPECIFY clarifies that the standard does not    require support for wild hosts.  So you might want to mention here that    (WILD-PATHNAME-P <path> :HOST) is allowed just in case some    implementation might support wild hosts as an extension.I'm not sure how much of PATHNAME-COMPONENT-VALUE to copy intoPATHNAME-WILD; my preference is to copy as little as possible, tominimize the chance for creating inconsistencies.  Perhaps the rationalesection should just say that WILD-PATHNAME-P might always return NIL insome implementations or something.    > Current Practice:    The Explorer also supports the messages :WILD-P (although it only    returns NIL or T), :NAME-WILD-P, etc., :TRANSLATE-WILD-PATHNAME, and    :PATHNAME-MATCH.Will add.    >   The clarification is current practice as far as the authors are aware.    >   If some implementations are found that specify a meaning for wildcard    >   pathnames as arguments to these functions, this proposal should be changed    >   to say that the consequences are unspecified rather than signalling an error.    The Explorer permits DELETE-FILE on a wild pathname, meaning to delete    all files that match.I don't think this should be a mandated feature, but we can add it to currentpractice.  Do you think this feature of the Explorer is good or a wart?  I.e.would you like the proposal to say that the consequences are unspecified, orwould you like the proposal to require the Explorer to change?*start*01531 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 12-Jun-89 16:20:51 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 12 JUN 89 16:20:54 PDTReceived: from ti.com by SAIL.Stanford.EDU with TCP; 12 Jun 89  16:19:39 PDTReceived: by ti.com id AA05524; Mon, 12 Jun 89 18:19:13 CDTReceived: from Kelvin by tilde id AA19433; Mon, 12 Jun 89 18:05:57 CDTMessage-Id: <2822684717-5627457@Kelvin>Sender: GRAY@Kelvin.csc.ti.comDate: Mon, 12 Jun 89 18:05:17 CDTFrom: David N Gray <Gray@DSG.csc.ti.com>To: "David A. Moon" <Moon@STONY-BROOK.SCRC.Symbolics.COM>Cc: Sandra J Loosemore <sandra%defun@cs.utah.edu>, CL-Cleanup@sail.stanford.eduSubject: Re: Issue: PATHNAME-WILD (version 5)In-Reply-To: Msg of Mon, 12 Jun 89 18:24 EDT from David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>>     The Explorer permits DELETE-FILE on a wild pathname, meaning to delete>     all files that match.> > I don't think this should be a mandated feature, but we can add it to current> practice.  Do you think this feature of the Explorer is good or a wart?  I.e.> would you like the proposal to say that the consequences are unspecified, or> would you like the proposal to require the Explorer to change?I think it's a useful feature (especially on a Lisp Machine where Lispis the operating system command language); I'd prefer "consequencesare unspecified" so that this would be a permissible extension.*start*01641 00024 USaGV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 13-Jun-89 07:56:37 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 13 JUN 89 07:56:39 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 13 Jun 89  07:55:09 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via INTERNET with SMTP id 610282; 13 Jun 89 10:55:34 EDTDate: Tue, 13 Jun 89 10:56 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Re: Issue: PATHNAME-WILD (version 5)To: David N Gray <Gray@DSG.csc.ti.com>, Gray@Kelvin.csc.ti.comcc: Sandra J Loosemore <sandra%defun@cs.utah.edu>, CL-Cleanup@sail.stanford.eduIn-Reply-To: <2822684717-5627457@Kelvin>Message-ID: <19890613145601.6.MOON@EUPHRATES.SCRC.Symbolics.COM>    Date: Mon, 12 Jun 89  18:05:17 CDT    From: David N Gray <Gray@DSG.csc.ti.com>    >     The Explorer permits DELETE-FILE on a wild pathname, meaning to delete    >     all files that match.    >     > I don't think this should be a mandated feature, but we can add it to current    > practice.  Do you think this feature of the Explorer is good or a wart?  I.e.    > would you like the proposal to say that the consequences are unspecified, or    > would you like the proposal to require the Explorer to change?    I think it's a useful feature (especially on a Lisp Machine where Lisp    is the operating system command language); I'd prefer "consequences    are unspecified" so that this would be a permissible extension.OK.*start*01060 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 13-Jun-89 09:10:08 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 13 JUN 89 09:07:57 PDTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 13 Jun 89  09:06:36 PDTReceived: from Semillon.ms by ArpaGateway.ms ; 13 JUN 89 09:03:01 PDTDate: 13 Jun 89 09:01 PDTFrom: masinter.paSubject: Re: Issue: PATHNAME-WILD (version 5)In-reply-to: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>'s message of Tue, 13 Jun 89 10:56 EDTTo: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>cc: David N Gray <Gray@DSG.csc.ti.com>, Gray@Kelvin.csc.ti.com, Sandra J Loosemore <sandra%defun@cs.utah.edu>, CL-Cleanup@sail.stanford.eduMessage-ID: <890613-090301-15730@Xerox> I'm opposed to "little"  "permissible extensions". It weakens thestandard, and hardly is anyone's "competitive advantage". Let the explorersay DELETE-ALL-FILES-MATCHING. Or even EXPLORER:DELETE-FILES.*start*02604 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 13-Jun-89 09:38:33 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 13 JUN 89 09:38:36 PDTReceived: from cs.utah.edu by SAIL.Stanford.EDU with TCP; 13 Jun 89  09:36:43 PDTReceived: from defun.utah.edu by cs.utah.edu (5.61/utah-2.1-cs)	id AA20822; Tue, 13 Jun 89 10:36:54 -0600Received: by defun.utah.edu (5.61/utah-2.0-leaf)	id AA22421; Tue, 13 Jun 89 10:36:52 -0600From: sandra%defun@cs.utah.edu (Sandra J Loosemore)Message-Id: <8906131636.AA22421@defun.utah.edu>Date: Tue, 13 Jun 89 10:36:49 MDTSubject: Re: Issue: PATHNAME-WILD (version 5)To: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Cc: Sandra J Loosemore <sandra%defun@cs.utah.edu>, David N Gray <Gray@DSG.csc.ti.com>, CL-Cleanup@sail.stanford.eduIn-Reply-To: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>, Mon, 12 Jun 89 18:24 EDTI'll try again to explain my confusion (!) about TRANSLATE-PATHNAME.I think a large part of the problem is that I just don't understandwhat the motivation is for making this function as complicated as itis.My understanding is that this function is actually performing *two*distinct operations: first, it performs a pattern match on<from-wildcard> and <source>; and then it combines <to-wildcard> withthe result of that operation in a kind of merging procedure that fillsin wildcard fields as well as empty fields.  My confusion is about whythese two operations have been glued together like this instead ofbeing made into two separate primitives.  It seems like the mergingoperation by itself would be quite useful, but I'm having a hard timeimagining an example where you really need the combined operation.(The rationale section doesn't address this, and it seems like theRENAME-FILES example could be accomplished with only the mergingprimitive.)  Is reversibility a property of the matching operation orthe merging operation, or both?  Perhaps if the combined functionalityand the whole business about reversibility are only needed to supportlogical pathnames, they should be made part of that proposal instead? After giving this proposal another reading, I have a two additionalunrelated comments.  First, WILD-PATHNAME-P and PATHNAME-MATCH-P oughtto be allowed to return "true" instead of T.  Second, I think that ifwe allow DELETE-FILE not to signal an error when given a wildcardpathname, that RENAME-FILE also ought to be allowed not to signal anerror.-Sandra-------*start*05914 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 13-Jun-89 11:50:22 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 13 JUN 89 11:50:23 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 13 Jun 89  11:48:17 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 610559; 13 Jun 89 14:49:57 EDTDate: Tue, 13 Jun 89 14:50 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Re: Issue: PATHNAME-WILD (version 5)To: Sandra J Loosemore <sandra%defun@cs.utah.edu>cc: David N Gray <Gray@DSG.csc.ti.com>, CL-Cleanup@sail.stanford.edu, Gray@Kelvin.csc.ti.comIn-Reply-To: <8906131636.AA22421@defun.utah.edu>Message-ID: <19890613185018.1.MOON@EUPHRATES.SCRC.Symbolics.COM>    Date: Tue, 13 Jun 89 10:36:49 MDT    From: sandra%defun@cs.utah.edu (Sandra J Loosemore)    I'll try again to explain my confusion (!) about TRANSLATE-PATHNAME.    I think a large part of the problem is that I just don't understand    what the motivation is for making this function as complicated as it    is.Thanks for continuing to pursue this, Sandra.    My understanding is that this function is actually performing *two*    distinct operations: first, it performs a pattern match on    <from-wildcard> and <source>; and then it combines <to-wildcard> with    the result of that operation in a kind of merging procedure that fills    in wildcard fields as well as empty fields.  That's accurate.                                                 My confusion is about why    these two operations have been glued together like this instead of    being made into two separate primitives.  Because some new object would have to be invented to carry the result ofthe first operation into the second operation.  This would represent thecorrespondence between the from-wildcard and the source in some way.  Intypical implementations, this is currently represented as flow of controlinside the TRANSLATE-PATHNAME function and functions that it calls.  Iwouldn't want to introduce this complicated new pathname-correspondenceobject if there isn't really a need to get the first primitive by itself.Think about (using Unix syntax):  (translate-pathname "/usr/dmr/hacks/frob.l"                      "/usr/d*/hacks/*.l"                      "/usr/d*/backup/hacks/backup-*.l")for which the answer is (assuming the wildcard conventions used by theUnix on which I tried this):  "/usr/dmr/backup/hacks/backup-frob.l"Now think about:  (translate-pathname "/usr/dmr/hacks/frob.l"                      "/usr/d*/hacks/fr*.l"                      "/usr/d*/backup/hacks/backup-*.l")for which the answer is  "/usr/dmr/backup/hacks/backup-ob.l"Your second primitive sees only the first and third arguments, so ithas no way to distinguish these two cases.  To separate the primitives,the first one would have to output something telling you that in thefirst case, "frob" matched the wildcard, while in the second case,"ob" matched the wildcard.  Should this example go into the proposal?                                              It seems like the merging    operation by itself would be quite useful, I agree that it's useful.  It's available as TRANSLATE-PATHNAME with thetwo wildcard pathname arguments the same, isn't it?  I don't see how thematching primitive could be used by itself.                                               but I'm having a hard time    imagining an example where you really need the combined operation.    (The rationale section doesn't address this, and it seems like the    RENAME-FILES example could be accomplished with only the merging    primitive.)  I haven't been able to figure out how you think the RENAME-FILES examplecan be done with only the merging half.  Maybe you didn't think about anycases where the source file name has a partially wild component ("foo*"rather than "*")?  There were two of those in the examples, but they weren'tvery clear because the target file name had a full wild component in both.I should should concoct another example to clarify this.  I clearly have alot of trouble coming up with examples that cover all the cases for thesethings.                 Is reversibility a property of the matching operation or    the merging operation, or both?  I don't know, probably both, but it depends on exactly what you had in mindas the boundary between the two operations.				     Perhaps if the combined functionality    and the whole business about reversibility are only needed to support    logical pathnames, they should be made part of that proposal instead? It's very hard to know how to modularize these proposals.  I've heardeverything from "put all pathname stuff into a single omnibus proposalso we can understand it as a unit", to "break each feature into aseparate proposal so we can address it separately".  In the face ofthat, I'm just guessing at the modularity.  I don't know about thereversible part, but everything else is useful independent of logicalpathnames.    After giving this proposal another reading, I have a two additional    unrelated comments.  First, WILD-PATHNAME-P and PATHNAME-MATCH-P ought    to be allowed to return "true" instead of T.  I think they did in an earlier version, and some commentor made me changeit to T, so as to make the language less ambiguous.  Did you have a specificuseful value in mind for them to return?  If so, maybe we could just specifythat that is what they return.  If not, let's stick with T.						  Second, I think that if    we allow DELETE-FILE not to signal an error when given a wildcard    pathname, that RENAME-FILE also ought to be allowed not to signal an    error.Good point.*start*02368 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 13-Jun-89 12:56:25 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 13 JUN 89 12:56:28 PDTReceived: from cs.utah.edu by SAIL.Stanford.EDU with TCP; 13 Jun 89  12:53:44 PDTReceived: from defun.utah.edu by cs.utah.edu (5.61/utah-2.1-cs)	id AA26121; Tue, 13 Jun 89 13:53:50 -0600Received: by defun.utah.edu (5.61/utah-2.0-leaf)	id AA22515; Tue, 13 Jun 89 13:53:44 -0600From: sandra%defun@cs.utah.edu (Sandra J Loosemore)Message-Id: <8906131953.AA22515@defun.utah.edu>Date: Tue, 13 Jun 89 13:53:43 MDTSubject: Re: Issue: PATHNAME-WILD (version 5)To: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Cc: Sandra J Loosemore <sandra%defun@cs.utah.edu>, David N Gray <Gray@DSG.csc.ti.com>, CL-Cleanup@sail.stanford.edu, Gray@Kelvin.csc.ti.comIn-Reply-To: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>, Tue, 13 Jun 89 14:50 EDTYour additional example has suddenly made it clear to me that I'm evenmore confused than I thought I was, and that one of the reasons I'mconfused is the vagueness of the terminology in the proposal.  Itseems clear from this example that my interpretation of the terms"field" and "portion that matches" is not what you really had in mind.Can you define these terms more precisely and perhaps annotate theother examples to explain what exactly the "field" and "portion" are?You seem to be interpreting "portion" to mean "the part that matchesthe *" but I'm not at all clear how that would extend to a morecomplicated wildcard pattern like a regular expression.> I think they did in an earlier version, and some commentor made me change> it to T, so as to make the language less ambiguous.  Did you have a specific> useful value in mind for them to return?  If so, maybe we could just specify> that that is what they return.  If not, let's stick with T.Well, I thought that PATHNAME-MATCH-P might conceivably return somekind of an object representing the "portion that matches".  But moregenerally, all the other predicates in the language that I can thinkof are defined to either return "true" or NIL.  Also, in someimplementations it's slightly more efficient to return an argumentinstead of T, for example.-Sandra-------*start*01362 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 13-Jun-89 13:16:51 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 13 JUN 89 13:16:52 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 13 Jun 89  13:15:29 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 610672; 13 Jun 89 16:16:39 EDTDate: Tue, 13 Jun 89 16:17 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Re: Issue: PATHNAME-WILD (version 5)To: Sandra J Loosemore <sandra%defun@cs.utah.edu>cc: David N Gray <Gray@DSG.csc.ti.com>, CL-Cleanup@sail.stanford.edu, Gray@Kelvin.csc.ti.comIn-Reply-To: <8906131953.AA22515@defun.utah.edu>Message-ID: <19890613201703.7.MOON@EUPHRATES.SCRC.Symbolics.COM>    Date: Tue, 13 Jun 89 13:53:43 MDT    From: sandra%defun@cs.utah.edu (Sandra J Loosemore)    ....I'm not at all clear how that would extend to a more    complicated wildcard pattern like a regular expression.The person who added regular expressions would have to define how theywork with the various pathname functions.  There's no way that theCommon Lisp language specification can define that.I'll respond to the rest of your message later.*start*00959 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 13-Jun-89 15:34:32 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 13 JUN 89 15:34:37 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 13 Jun 89  15:24:47 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 610828; 13 Jun 89 18:26:24 EDTDate: Tue, 13 Jun 89 18:26 EDTFrom: Kim Barrett <IIM@ECLA.USC.EDU>Sender: KMP@STONY-BROOK.SCRC.Symbolics.COMSubject: Issue: PATHNAME-WILD (Version 5)To: CL-Cleanup@SAIL.Stanford.EDUComments: Received from Kim Barrett by KMP on MSDOS floppy disk via US MailMessage-ID: <19890613222614.1.KMP@BOBOLINK.SCRC.Symbolics.COM>I don't understand TRANSLATE-PATHNAME.  I think I know the intent, but thedescription in the proposal is pretty opaque.*start*18137 00024 US GV-Info: X3J13-mailer@SAIL.Stanford.EDU at 19-Jun-89 16:02:04 from AGReturn-Path: <X3J13-mailer@SAIL.Stanford.EDU>Received: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 19 JUN 89 16:02:07 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 19 Jun 89  15:45:22 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 613310; 19 Jun 89 17:41:50 EDTDate: Mon, 19 Jun 89 17:42 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Reply-To: CL-Cleanup@sail.stanford.eduSubject: Issue: PATHNAME-WILD (version 6)To: X3J13@sail.stanford.eduMessage-ID: <19890619214210.6.MOON@EUPHRATES.SCRC.Symbolics.COM>This issue is on the agenda for the June X3J13 meeting.  KMP and Ihave prepared a revised writeup which we think is ready for release.Issue:        PATHNAME-WILDForum:        CleanupReferences:   Pathnames (pp410-413)Related issues: PATHNAME-COMPONENT-VALUE, PATHNAME-LOGICALCategory:     ADDITIONEdit history: 21-Jul-88, Version 1 by Pitman              06-Oct-88, Version 2 by Pitman               9-May-89, Version 3 by Moon (small fixes)              10-May-89, Version 4 by Moon (add two more functions)              13-May-89, Version 5 by Moon (minor cleanups, add clarification)              19-Jun-89, Version 6 by Moon (revise based on extensive                        discussion in the cleanup subcommittee; rewrite                        the description of TRANSLATE-PATHNAME so it is                        possible to understand it)Problem Description:  Some file systems provide more complex conventions for wildcards than  simple component-wise wildcards (:WILD). For example,  "F*O" might mean:    - a normal three character name    - a three-character name, with the middle char wild    - at least a two-character name, with the middle 0 or more chars wild    - a wild match spanning multiple directories  ">foo>*>bar" might imply:    - the middle directory is named "*"    - the middle directory is :WILD    - there may be zero or more :WILD middle directories    - the middle directory name matches any one-letter name  ">foo>**>bar" might mean    - the middle directory is named "**"    - the middle directory is :WILD    - there may be zero or more :WILD middle directories    - the middle directory name matches any two-letter name  Some file systems support even more complex wildcards, for example  regular expressions.  The CL pathname model does not specify a way to represent complex  wildcards, which means, for example, that (MAKE-PATHNAME :NAME "F*O")  cannot be recognized by portable code as containing a wildcard.  Common Lisp provides only the first of these four common operations  on wildcard pathnames:  (1) Enumerate the set of existing files that match the pathname;  this is provided by the DIRECTORY function.  (2) Test whether a pathname contains wildcards.  (3) Test whether a pathname matches a wildcard pathname.  (4) Translate one pathname into another according to a mapping specified  by a pair of wildcard pathnames.Proposal (PATHNAME-WILD:NEW-FUNCTIONS):  Introduce the following three functions:  1. WILD-PATHNAME-P pathname &optional field-key      Tests a pathname for the presence of wildcard components.  If the first    argument is not a pathname, string, or file stream an error of type    TYPE-ERROR is signalled.      If no <field-key> is provided, or the <field-key> is NIL, the result is    T if <pathname> has any wildcard components, NIL if <pathname> has none.      If a non-null <field-key> is provided, it must be one of :HOST, :DEVICE,    :DIRECTORY, :NAME, :TYPE, or :VERSION.  In this case, the result is T    if the indicated component of <pathname> is a wildcard, NIL if the    component is not a wildcard.  Note that not all implementations    support wildcards in all fields, according to PATHNAME-COMPONENT-VALUE.  2. PATHNAME-MATCH-P pathname wildcard    T if <pathname> matches <wildcard>, otherwise NIL.  The matching rules    are implementation-defined but should be consistent with the    DIRECTORY function.  Missing components of <wildcard> default to :WILD.    If either argument is not a pathname, string, or file stream an error    of type TYPE-ERROR is signalled.  It is valid for <pathname> to be a    wild pathname; a wildcard field in <pathname> will only match a    wildcard field in <wildcard>, i.e. the function is not commutative.    It is valid for <wildcard> to be a non-wild pathname.  3. TRANSLATE-PATHNAME source from-wildcard to-wildcard &optional reversible    Translates the pathname <source>, which matches <from-wildcard>, into    a corresponding pathname <result>, which matches <to-wildcard>, and    returns <result>.    The pathname <result> is <to-wildcard> with each wildcard or missing    field replaced by a portion of <source>.  A "wildcard field" is a    pathname component with a value of :WILD, a :WILD element of a    list-valued directory component, or an implementation-defined portion    of a component, such as the "*" in the complex wildcard string    "foo*bar" that some implementations support.  An implementation that    adds other wildcard features, such as regular expressions, must define    how TRANSLATE-PATHNAME extends to those features.  A "missing field" is    a pathname component with a value of NIL.    The portion of <source> that is copied into <result> is implementation    defined.  Typically it is determined by the user interface conventions    of the file systems involved.  Usually it is the portion of <source>    that matches a wildcard field of <from-wildcard> that is in the same    position as the wildcard or missing field of <to-wildcard>.  If there    is no wildcard field in <from-wildcard> at that position, then usually    it is the entire corresponding pathname component of <source>, or in    the case of a list-valued directory component, the entire corresponding    list element.  For example, if the name components of <source>,    <from-wildcard>, and <to-wildcard> are "gazonk", "gaz*", and "h*"    respectively, then in most file systems, the wildcard fields of the    name component of <from-wildcard> and <to-wildcard> are each "*", the    matching portion of <source> is "onk", and the name component of    <result> is "honk".  However, the exact behavior of TRANSLATE-PATHNAME    cannot be dictated by the Common Lisp language and must be allowed to    vary, depending on the user interface conventions of the file systems    involved.    During the copying of a portion of <source> into <result>, additional    implementation-defined translations of alphabetic case or file naming    conventions might occur, especially when <from-wildcard> and    <to-wildcard> are for different hosts.    If <reversible> is true, the translation must be reversible, that is,    the following identity must hold for all cases where no error is    signalled:      (equal (translate-pathname (translate-pathname pathname from to t)                                 to from t)             pathname)    In some file systems the above identity is true only when    (member (pathname-version pathname) '(:newest :unspecific)).    This is considered valid, as Common Lisp cannot force all the    file systems in the world to implement versions.    If <reversible> is false (which is the default), the translation is    determined by the user interface conventions of the file systems    involved and is not necessarily reversible.  In some file systems the    <reversible> argument is ignored because the user interface conventions    are reversible anyway.    If any of the first three arguments is not a pathname, string, or file    stream an error of type TYPE-ERROR is signalled.  It is valid for    <source> to be a wild pathname; in general this will produce a wild    result.  It is valid for <from-wildcard> and/or <to-wildcard> to be    non-wild pathnames.  (PATHNAME-MATCH-P <source> <from-wildcard>) must    be true or an error is signalled.        Implementation guideline: one file system performs this operation by    examining each piece of the three pathnames in turn, where a piece is a    pathname component or a list element of a structured component such as    a hierarchical directory.  Hierarchical directory elements in    <from-wildcard> and <to-wildcard> are matched by whether they are    wildcards, not by depth in the directory hierarchy.  If the piece in    <to-wildcard> is present and not wild, it is copied into the result.    If the piece in <to-wildcard> is :WILD or NIL, and either <reversible>    is false or the piece in <from-wildcard> is not a complex wildcard, the    piece in <source> is copied into the result.  Otherwise, the piece in    <to-wildcard> might be a complex wildcard such as "foo*bar" and the    piece in <from-wildcard> should be wild; the portion of the piece in    <source> that matches the wildcard portion of the piece in    <from-wildcard> replaces the wildcard portion of the piece in    <to-wildcard> and the value produced is used in the result.  4. Clarify that the functions OPEN (and WITH-OPEN-FILE), PROBE-FILE,  FILE-WRITE-DATE, FILE-AUTHOR, and TRUENAME only accept non-wildcard  pathnames and signal an error if given a pathname for which  WILD-PATHNAME-P returns true.  5. Clarify that the functions RENAME-FILE, DELETE-FILE, LOAD, and  COMPILE-FILE have implementation-defined consequences when given a  wildcard pathname.  Each function might signal an error or might operate  on all files that match the wildcard pathname.Examples:  ;The following examples are not portable.  They are written to run  ;with particular file systems and particular wildcard conventions.  ;Other implementations will behave differently.  These examples are  ;intended to be illustrative, not to be prescriptive.  (WILD-PATHNAME-P (MAKE-PATHNAME :NAME :WILD)) => T  (WILD-PATHNAME-P (MAKE-PATHNAME :NAME :WILD) :NAME) => T  (WILD-PATHNAME-P (MAKE-PATHNAME :NAME :WILD) :TYPE) => NIL  (WILD-PATHNAME-P (PATHNAME "S:>foo>**>")) => T   ;Lispm  (WILD-PATHNAME-P (PATHNAME :NAME "F*O")) => T    ;Most places  ;This example assumes one particular set of wildcard conventions  ;Not all file systems will run this example exactly as written  (DEFUN RENAME-FILES (FROM TO)    (DOLIST (FILE (DIRECTORY FROM))      (RENAME-FILE FILE (TRANSLATE-PATHNAME FILE FROM TO))))  (RENAME-FILES "/usr/me/*.lisp" "/dev/her/*.l")    ;Renames /usr/me/init.lisp to /dev/her/init.l  (RENAME-FILES "/usr/me/pcl*/*" "/sys/pcl/*/")    ;Renames /usr/me/pcl-5-may/low.lisp to /sys/pcl/pcl-5-may/low.lisp    ;In some file systems the result might be /sys/pcl/5-may/low.lisp  (RENAME-FILES "/usr/me/pcl*/*" "/sys/library/*/")    ;Renames /usr/me/pcl-5-may/low.lisp to /sys/library/pcl-5-may/low.lisp    ;In some file systems the result might be /sys/library/5-may/low.lisp  (RENAME-FILES "/usr/me/foo.bar" "/usr/me2/")    ;Renames /usr/me/foo.bar to /usr/me2/foo.bar  (RENAME-FILES "/usr/joe/*-recipes.text" "/usr/jim/cookbook/joe's-*-rec.text")    ;Renames /usr/joe/lamb-recipes.text to /usr/jim/cookbook/joe's-lamb-rec.text    ;Renames /usr/joe/pork-recipes.text to /usr/jim/cookbook/joe's-pork-rec.text    ;Renames /usr/joe/veg-recipes.text to /usr/jim/cookbook/joe's-veg-rec.text  ;This example assumes one particular set of wildcard conventions and  ;illustrates how and why reversible translation uses different rules  (PATHNAME-NAME (TRANSLATE-PATHNAME "foobar" "foo*" "*baz" NIL)) => "barbaz"  (PATHNAME-NAME (TRANSLATE-PATHNAME "foobar" "foo*" "*baz" T))   => "barbaz"  (PATHNAME-NAME (TRANSLATE-PATHNAME "foobar" "foo*" "*"    NIL)) => "foobar"  (PATHNAME-NAME (TRANSLATE-PATHNAME "foobar" "foo*" "*"    T))   => "bar"  (PATHNAME-NAME (TRANSLATE-PATHNAME "foobar" "*"    "foo*" NIL)) => "foofoobar"  (PATHNAME-NAME (TRANSLATE-PATHNAME "foobar" "*"    "foo*" T))   => "foofoobar"  (PATHNAME-NAME (TRANSLATE-PATHNAME "bar"    "*"    "foo*" NIL)) => "foobar"  (PATHNAME-NAME (TRANSLATE-PATHNAME "bar"    "*"    "foo*" T))   => "foobar"  ;Using Unix syntax and the wildcard conventions used by the  ;particular version of Unix on which I tried this:  (NAMESTRING    (TRANSLATE-PATHNAME "/usr/dmr/hacks/frob.l"                        "/usr/d*/hacks/*.l"                        "/usr/d*/backup/hacks/backup-*.*"))   => "/usr/dmr/backup/hacks/backup-frob.l"  (NAMESTRING    (TRANSLATE-PATHNAME "/usr/dmr/hacks/frob.l"                        "/usr/d*/hacks/fr*.l"                        "/usr/d*/backup/hacks/backup-*.*"))   => "/usr/dmr/backup/hacks/backup-ob.l"  ;This is similar to the above example but uses two different hosts,  ;U: which is a Unix and V: which is a VMS.  Note the translation  ;of file type and alphabetic case conventions.  (NAMESTRING    (TRANSLATE-PATHNAME "U:/usr/dmr/hacks/frob.l"                        "U:/usr/d*/hacks/*.l"                        "V:SYS$DISK:[D*.BACKUP.HACKS]BACKUP-*.*"))   => "V:SYS$DISK:[DMR.BACKUP.HACKS]BACKUP-FROB.LSP"  (NAMESTRING    (TRANSLATE-PATHNAME "U:/usr/dmr/hacks/frob.l"                        "U:/usr/d*/hacks/fr*.l"                        "V:SYS$DISK:[D*.BACKUP.HACKS]BACKUP-*.*"))   => "V:SYS$DISK:[DMR.BACKUP.HACKS]BACKUP-OB.LSP"  ;This example presumes background information described in PATHNAME-LOGICAL  (DEFUN TRANSLATE-LOGICAL-PATHNAME-1 (PATHNAME RULES)    (LET ((RULE (ASSOC PATHNAME RULES :TEST #'PATHNAME-MATCH-P)))      (UNLESS RULE (ERROR "No translation rule for ~A" PATHNAME))      (TRANSLATE-PATHNAME PATHNAME (FIRST RULE) (SECOND RULE) T)))  (TRANSLATE-LOGICAL-PATHNAME-1 "FOO:CODE;BASIC.LISP"                        '(("FOO:DOCUMENTATION;" "MY-UNIX:/doc/foo/")                          ("FOO:CODE;"          "MY-UNIX:/lib/foo/")                          ("FOO:PATCHES;*;"     "MY-UNIX:/lib/foo/patch/*/")))   => the pathname MY-UNIX:/lib/foo/basic.lRationale:  1,2,3. These three functions provide a standardized interface to the  idiosyncratic wildcard functionality of each host file system.  1. WILD-PATHNAME-P makes it possible to detect wild pathnames reliably and  do something useful (give up, merge out the bothersome components, call  DIRECTORY for a list of matching pathnames, etc.)  2,3. TRANSLATE-PATHNAME is needed by many application programs that deal with  wildcard pathnames.  PATHNAME-MATCH-P and TRANSLATE-PATHNAME are needed  by logical pathnames.  The reversible feature is needed by logical  pathnames.  The PATHNAME-LOGICAL proposal cannot be implemented without  these features.  4. Since these functions return a value connected with one file, there  is no meaningful way to extend them to work on wildcard pathnames.  It  seems best to specify that they signal an error, rather than leaving  the consequences undefined.  5. The consequences are proposed to be implementation-defined because  current practice varies and no one wants to change.Current Practice:  Presumably no implementation supports the proposal exactly as stated.  Symbolics Genera has had similar features under different names for many  years:    (SEND pathname :WILD-P) returns a value such as NIL, :NAME, :TYPE,    etc., indicating the first wild field.    (SEND pathname :NAME-WILD-P), (SEND pathname :DIRECTORY-WILD-P),    etc. test individual fields.    The :TRANSLATE-WILD-PATHNAME, :TRANSLATE-WILD-PATHNAME-REVERSIBLE, and    :PATHNAME-MATCH messages resemble TRANSLATE-PATHNAME and    PATHNAME-MATCH-P.  The Explorer also supports the messages :WILD-P (although it only  returns NIL or T), :NAME-WILD-P, etc., :TRANSLATE-WILD-PATHNAME, and  :PATHNAME-MATCH.  Points 4 and 5 are current practice as far as the authors are aware.  The Explorer permits DELETE-FILE on a wild pathname, meaning to delete  all files that match.Cost to Implementors:  Many implementations probably have a substrate which is capable of this  or something similar already. In such cases, it's a relatively small  matter to add the proposed interface.  Even in cases where an implementation doesn't have ready code, it's clearly  better for the implementor to write that code once and for all than to ask  each user of wildcards to write it.  Since the detailed behavior is at the implementor's discretion, the cost  is unlikely to be large.  Some file systems will do all the work and the  implementor need only provide an interface to the file system or to a  standard library routine.  For other file systems the implementor has to  write the actual matching and translation algorithms.Cost to Users:  None.  This change is upward compatible.Cost of Non-Adoption:  Wild pathnames would continue to be mistaken for ordinary pathnames in  many situations.  User programs that deal with wildcard pathnames would  have to operate on implementation-dependent representations and hence  would not be easily portable.  The biggest cost is that the logical pathnames proposal would be stymied.Performance Impact:  None.Benefits:  A more complete set of wildcard pathname operations.  Portable user  programs that deal with wildcard pathnames will be more consistent  and reliable.  A portable system construction tool can be written  and the foundations are laid for a `logical pathname' facility  (proposed separately in PATHNAME-LOGICAL).Aesthetics:  This change would make some portable code less kludgey.Discussion:  There was some question about the name. The name PATHNAME-WILD-P  suggests a ``slot'' of a pathname (like PATHNAME-HOST),  while WILD-PATHNAME-P suggests a type (like INPUT-STREAM-P).  The committee was split on what to call it. Since it is more  like a type than a slot, the name WILD-PATHNAME-P was chosen.  It's been suggested that WILD-PATHNAME-P and PATHNAME-MATCH-P be allowed  to return a value other than T to represent "truth", which would  somehow encode some additional information.*start*13176 00024 US GV-Info: X3J13-mailer@SAIL.Stanford.EDU at 21-Jun-89 11:15:33 from AGReturn-Path: <X3J13-mailer@SAIL.Stanford.EDU>Received: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 21 JUN 89 11:15:34 PDTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 21 Jun 89  10:59:14 PDTReceived: from Semillon.ms by ArpaGateway.ms ; 21 JUN 89 10:51:15 PDTDate: 21 Jun 89 10:50 PDTFrom: masinter.paSubject: Issue: PATHNAME-WILD (version 5)To: x3j13@sail.stanford.eduMessage-ID: <890621-105115-17348@Xerox>This issue was deferred from the last meeting. There has been quitea bit of discussion on this proposal, especially about whatTRANSLATE-PATHNAME does and is why, and some comments on whetherDELETE-FILE might accept wildcard pathnames.(Discussion not summarized.)!Issue:        PATHNAME-WILDReferences:   Pathnames (pp410-413)Related issues: PATHNAME-LOGICALCategory:     ADDITIONEdit history: 21-Jul-88, Version 1 by Pitman              06-Oct-88, Version 2 by Pitman               9-May-89, Version 3 by Moon (small fixes)              10-May-89, Version 4 by Moon (add two more functions)              13-May-89, Version 5 by Moon (minor cleanups, add clarification)Problem Description:  Some file systems provide more complex conventions for wildcards than  simple component-wise wildcards (:WILD). For example,  "F*O" might mean:    - a normal three character name    - a three-character name, with the middle char wild    - at least a two-character name, with the middle 0 or more chars wild    - a wild match spanning multiple directories  ">foo>*>bar" might imply:    - the middle directory is named "*"    - the middle directory is :WILD    - there may be zero or more :WILD middle directories    - the middle directory name matches any one-letter name  ">foo>**>bar" might mean    - the middle directory is named "**"    - the middle directory is :WILD    - there may be zero or more :WILD middle directories    - the middle directory name matches any two-letter name  Some file systems support even more complex wildcards, for example  regular expressions.  The CL pathname model does not specify a way to represent complex  wildcards, which means, for example, that (MAKE-PATHNAME :NAME "F*O")  cannot be recognized by portable code as containing a wildcard.  Common Lisp provides only the first of these four common operations  on wildcard pathnames:  (1) Enumerate the set of existing files that match the pathname;  this is provided by the DIRECTORY function.  (2) Test whether a pathname contains wildcards.  (3) Test whether a pathname matches a wildcard pathname.  (4) Translate one pathname into another according to a mapping specified  by a pair of wildcard pathnames.Proposal (PATHNAME-WILD:NEW-FUNCTIONS):  Introduce the following three functions:    WILD-PATHNAME-P pathname &optional field-key      Tests a pathname for the presence of wildcard components.  If the first    argument is not a pathname, string, or file stream an error of type    TYPE-ERROR is signalled.      If no <field-key> is provided, or the <field-key> is NIL, the result is    T if <pathname> has any wildcard components, NIL if <pathname> has none.      If a non-null <field-key> is provided, it must be one of :HOST, :DEVICE,    :DIRECTORY, :NAME, :TYPE, or :VERSION.  In this case, the result is T    if the indicated component of <pathname> is a wildcard, NIL if the    component is not a wildcard.    PATHNAME-MATCH-P pathname wildcard    T if <pathname> matches <wildcard>, otherwise NIL.  The matching rules    are implementation-dependent but should be consistent with the    DIRECTORY function.  Missing components of <wildcard> default to :WILD.    If either argument is not a pathname, string, or file stream an error    of type TYPE-ERROR is signalled.  It is valid for <pathname> to be a    wild pathname.  It is valid for <wildcard> to be a non-wild pathname.    TRANSLATE-PATHNAME source from-wildcard to-wildcard &optional reversible    Translate the pathname <source> according to the correspondence between    the two wildcard pathnames.  This translation is implementation    dependent.  The result is <to-wildcard> with each missing or wildcard    field replaced by the portion of <source> that matches the corresponding    field (usually a wildcard) in <from-wildcard>.  Additional translations    of alphabetic case or file naming conventions might also occur,    especially when from-wildcard and to-wildcard are for different hosts.    If <reversible> is false, the translation is determined by the user    interface conventions of the file systems involved.  If <reversible> is    true, the translation must instead be reversible, that is, the    following identity must hold for all cases where no error is signalled:      (equal (translate-pathname (translate-pathname pathname from to t)                                 to from t)             pathname)    In some file systems the above identity is true only when    (member (pathname-version pathname) '(:newest :unspecific)).    This is considered valid, as Common Lisp cannot force all the    file systems in the world to implement versions.    In some file systems the <reversible> argument is ignored because the    user interface conventions are reversible anyway.    If any of the first three arguments is not a pathname, string, or file    stream an error of type TYPE-ERROR is signalled.  It is valid for    <source> to be a wild pathname; in general this will produce a wild    result.  It is valid for <from-wildcard> and/or <to-wildcard> to be    non-wild pathnames.  (PATHNAME-MATCH-P <source> <from-wildcard>) must    be true or an error is signalled.        Implementation guideline: one typical file system performs this    operation by examining each field of the pathnames in turn, where a    field is a component or an element of a structured component such as a    hierarchical directory.  Hierarchical directory elements in    <from-wildcard> and <to-wildcard> are matched by whether they are    wildcards, not by depth in the directory hierarchy.  If the field in    <from-wildcard> does not match the field in <source>, an error is    signalled.  If the field in <to-wildcard> is present and not wild, it    is copied into the result.   If the field in <to-wildcard> is :WILD or    NIL, and either <reversible> is false or the field in <from-wildcard>    is not a complex wildcard, the field in <source> is copied into the    result.  Otherwise, the field in <to-wildcard> might be a complex    wildcard such as "foo*bar" and the field in <from-wildcard> should be    wild; the portion of the field in <source> that matches the wildcard    portion of the field in <from-wildcard> fills in the wildcard portion    of the field in <to-wildcard> and the field value produced is used in    the result.  Clarify that the functions OPEN (and WITH-OPEN-FILE), RENAME-FILE,  DELETE-FILE, PROBE-FILE, FILE-WRITE-DATE, FILE-AUTHOR, LOAD,  COMPILE-FILE, and TRUENAME only accept non-wildcard pathnames and signal  an error if given a pathname for which WILD-PATHNAME-P returns true.Examples:  (WILD-PATHNAME-P (MAKE-PATHNAME :NAME :WILD)) => T  (WILD-PATHNAME-P (MAKE-PATHNAME :NAME :WILD) :NAME) => T  (WILD-PATHNAME-P (MAKE-PATHNAME :NAME :WILD) :TYPE) => NIL  (WILD-PATHNAME-P (PATHNAME "S:>foo>**>")) => T   ;Lispm  (WILD-PATHNAME-P (PATHNAME :NAME "F*O")) => T    ;Most places  ;This example assumes one particular set of wildcard conventions  ;Not all file systems will run this example exactly as written  (DEFUN RENAME-FILES (FROM TO)    (DOLIST (FILE (DIRECTORY FROM))      (RENAME-FILE FILE (TRANSLATE-PATHNAME FILE FROM TO))))  (RENAME-FILES "/usr/me/*.lisp" "/dev/her/*.l")    ;Renames /usr/me/init.lisp to /dev/her/init.l  (RENAME-FILES "/usr/me/pcl*/*" "/sys/pcl/*/")    ;Renames /usr/me/pcl-5-may/low.lisp to /sys/pcl/pcl-5-may/low.lisp    ;In some file systems the result might be /sys/pcl/5-may/low.lisp  (RENAME-FILES "/usr/me/pcl*/*" "/sys/library/*/")    ;Renames /usr/me/pcl-5-may/low.lisp to /sys/library/pcl-5-may/low.lisp    ;In some file systems the result might be /sys/library/5-may/low.lisp  (RENAME-FILES "/usr/me/foo.bar" "/usr/me2/")    ;Renames /usr/me/foo.bar to /usr/me2/foo.bar  ;This example assumes one particular set of wildcard conventions and  ;illustrates how and why reversible translation uses different rules  (PATHNAME-NAME (TRANSLATE-PATHNAME "foobar" "foo*" "*baz" NIL)) => "barbaz"  (PATHNAME-NAME (TRANSLATE-PATHNAME "foobar" "foo*" "*baz" T))   => "barbaz"  (PATHNAME-NAME (TRANSLATE-PATHNAME "foobar" "foo*" "*"    NIL)) => "foobar"  (PATHNAME-NAME (TRANSLATE-PATHNAME "foobar" "foo*" "*"    T))   => "bar"  (PATHNAME-NAME (TRANSLATE-PATHNAME "foobar" "*"    "foo*" NIL)) => "foofoobar"  (PATHNAME-NAME (TRANSLATE-PATHNAME "foobar" "*"    "foo*" T))   => "foofoobar"  (PATHNAME-NAME (TRANSLATE-PATHNAME "bar"    "*"    "foo*" NIL)) => "foobar"  (PATHNAME-NAME (TRANSLATE-PATHNAME "bar"    "*"    "foo*" T))   => "foobar"  ;This example presumes background information described in PATHNAME-LOGICAL  (DEFUN TRANSLATE-LOGICAL-PATHNAME-1 (PATHNAME RULES)    (LET ((RULE (ASSOC PATHNAME RULES :TEST #'PATHNAME-MATCH-P)))      (UNLESS RULE (ERROR "No translation rule for ~A" PATHNAME))      (TRANSLATE-PATHNAME PATHNAME (FIRST RULE) (SECOND RULE) T)))  (TRANSLATE-LOGICAL-PATHNAME-1 "FOO:CODE;BASIC.LISP"                        '(("FOO:DOCUMENTATION;" "MY-UNIX:/doc/foo/")                          ("FOO:CODE;"          "MY-UNIX:/lib/foo/")                          ("FOO:PATCHES;*;"     "MY-UNIX:/lib/foo/patch/*/")))   => the pathname MY-UNIX:/lib/foo/basic.lRationale:  These three functions provide a standardized interface to the  idiosyncratic wildcard functionality of each host file system.  WILD-PATHNAME-P makes it possible to detect wild pathnames reliably and  do something useful (give up, merge out the bothersome components, call  DIRECTORY for a list of matching pathnames, etc.)  TRANSLATE-PATHNAME is needed by many application programs that deal with  wildcard pathnames.  PATHNAME-MATCH-P and TRANSLATE-PATHNAME are needed  by logical pathnames.  The reversible feature is needed by logical  pathnames.Current Practice:  Presumably no implementation supports the proposal exactly as stated.  Symbolics Genera has had similar features under different names for many  years:    (SEND pathname :WILD-P) returns a value such as NIL, :NAME, :TYPE,    etc., indicating the first wild field.    (SEND pathname :NAME-WILD-P), (SEND pathname :DIRECTORY-WILD-P),    etc. test individual fields.    The :TRANSLATE-WILD-PATHNAME, :TRANSLATE-WILD-PATHNAME-REVERSIBLE, and    :PATHNAME-MATCH messages resemble TRANSLATE-PATHNAME and    PATHNAME-MATCH-P.  The clarification is current practice as far as the authors are aware.  If some implementations are found that specify a meaning for wildcard  pathnames as arguments to these functions, this proposal should be changed  to say that the consequences are unspecified rather than signalling an error.Cost to Implementors:  Many implementations probably have a substrate which is capable of this  or something similar already. In such cases, it's a relatively small  matter to add the proposed interface.  Even in cases where an implementation doesn't have ready code, it's clearly  better for the implementor to write that code once and for all than to ask  each user of wildcards to write it.  Since the detailed behavior is at the implementor's discretion, the cost  is unlikely to be large.  Some file systems will do all the work and the  implementor need only provide an interface to the file system or to a  standard library routine.  For other file systems the implementor has to  write the actual matching and translation algorithms.Cost to Users:  None. This change is upward compatible.Cost of Non-Adoption:  Wild pathnames would continue to be mistaken for ordinary pathnames in  many situations.  User programs that deal with wildcard pathnames would  have to operate on implementation-dependent representations and hence  would not be easily portable.  The biggest cost is that any logical pathnames proposal would be stymied.Performance Impact:  None.Benefits:  A more complete set of wildcard pathname operations.  Portable user  programs that deal with wildcard pathnames will be more consistent  and reliable.  A portable system construction tool can be written  and the foundations are laid for a `logical pathname' facility  (proposed separately in PATHNAME-LOGICAL).Aesthetics:  This change would make some portable code less kludgey.Discussion:  There was some question about the name. The name PATHNAME-WILD-P  suggests a ``slot'' of a pathname (like PATHNAME-HOST),  while WILD-PATHNAME-P suggests a type (like INPUT-STREAM-P).  The committee was split on what to call it. Since it is more  like a type than a slot, the name WILD-PATHNAME-P was chosen.*start*00856 00024 US GV-Info: Moon@STONY-BROOK.SCRC.Symbolics.COM at 21-Jun-89 15:50:53 from AGReturn-Path: <Moon@STONY-BROOK.SCRC.Symbolics.COM>Received: from STONY-BROOK.SCRC.Symbolics.COM ([128.81.41.144]) by Xerox.COM ; 21 JUN 89 15:50:47 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 614835; 21 Jun 89 18:52:08 EDTDate: Wed, 21 Jun 89 18:52 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-WILD (version 5)To: masinter.pacc: x3j13@sail.stanford.eduIn-Reply-To: <890621-105115-17348@Xerox>Message-ID: <19890621225250.3.MOON@EUPHRATES.SCRC.Symbolics.COM>Line-fold: NoLarry, this PATHNAME-WILD writeup you just mailed out is out ofdate.  The current version is version 6.  Is it possible thatsome of your incoming mail is getting lost?*start*17520 00024 US GV-Info: X3J13-mailer@SAIL.Stanford.EDU at 23-Jun-89 11:15:26 from AGReturn-Path: <X3J13-mailer@SAIL.Stanford.EDU>Received: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 23 JUN 89 11:15:20 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 23 Jun 89  10:51:51 PDTReceived: from KENNETH-WILLIAMS.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via INTERNET with SMTP id 616035; 23 Jun 89 13:53:42 EDTDate: Fri, 23 Jun 89 13:52 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-WILD (version 7)To: X3J13@sail.stanford.eduMessage-ID: <19890623175202.6.MOON@KENNETH-WILLIAMS.SCRC.Symbolics.COM>This issue is on the agenda for the June X3J13 meeting.  KMP and Ihave prepared a revised writeup which we think is ready for release.This version has been updated based on last minute discussion:Remove reversible argument from TRANSLATE-PATHNAME, add ability forimplementations to add keyword arguments and extra return values.Issue:        PATHNAME-WILDForum:        CleanupReferences:   Pathnames (pp410-413)Related issues: PATHNAME-COMPONENT-VALUE, PATHNAME-LOGICALCategory:     ADDITIONEdit history: 21-Jul-88, Version 1 by Pitman              06-Oct-88, Version 2 by Pitman               9-May-89, Version 3 by Moon (small fixes)              10-May-89, Version 4 by Moon (add two more functions)              13-May-89, Version 5 by Moon (minor cleanups, add clarification)              19-Jun-89, Version 6 by Moon (revise based on extensive                        discussion in the cleanup subcommittee; rewrite                        the description of TRANSLATE-PATHNAME so it is                        possible to understand it)              23-Jun-89, Version 7 by Moon (simplify TRANSLATE-PATHNAME                        based on last minute discussion of logical pathnames)Problem Description:  Some file systems provide more complex conventions for wildcards than  simple component-wise wildcards (:WILD). For example,  "F*O" might mean:    - a normal three character name    - a three-character name, with the middle char wild    - at least a two-character name, with the middle 0 or more chars wild    - a wild match spanning multiple directories  ">foo>*>bar" might imply:    - the middle directory is named "*"    - the middle directory is :WILD    - there may be zero or more :WILD middle directories    - the middle directory name matches any one-letter name  ">foo>**>bar" might mean    - the middle directory is named "**"    - the middle directory is :WILD    - there may be zero or more :WILD middle directories    - the middle directory name matches any two-letter name  Some file systems support even more complex wildcards, for example  regular expressions.  The CL pathname model does not specify a way to represent complex  wildcards, which means, for example, that (MAKE-PATHNAME :NAME "F*O")  cannot be recognized by portable code as containing a wildcard.  Common Lisp provides only the first of these four common operations  on wildcard pathnames:  (1) Enumerate the set of existing files that match the pathname;  this is provided by the DIRECTORY function.  (2) Test whether a pathname contains wildcards.  (3) Test whether a pathname matches a wildcard pathname.  (4) Translate one pathname into another according to a mapping specified  by a pair of wildcard pathnames.Proposal (PATHNAME-WILD:NEW-FUNCTIONS):  Introduce the following three functions:  1. WILD-PATHNAME-P pathname &optional field-key      Tests a pathname for the presence of wildcard components.  If the first    argument is not a pathname, string, or file stream an error of type    TYPE-ERROR is signalled.      If no <field-key> is provided, or the <field-key> is NIL, the result is    T if <pathname> has any wildcard components, NIL if <pathname> has none.      If a non-null <field-key> is provided, it must be one of :HOST, :DEVICE,    :DIRECTORY, :NAME, :TYPE, or :VERSION.  In this case, the result is T    if the indicated component of <pathname> is a wildcard, NIL if the    component is not a wildcard.  Note that not all implementations    support wildcards in all fields, according to PATHNAME-COMPONENT-VALUE.  2. PATHNAME-MATCH-P pathname wildcard    T if <pathname> matches <wildcard>, otherwise NIL.  The matching rules    are implementation-defined but should be consistent with the    DIRECTORY function.  Missing components of <wildcard> default to :WILD.    If either argument is not a pathname, string, or file stream an error    of type TYPE-ERROR is signalled.  It is valid for <pathname> to be a    wild pathname; a wildcard field in <pathname> will only match a    wildcard field in <wildcard>, i.e. the function is not commutative.    It is valid for <wildcard> to be a non-wild pathname.  3. TRANSLATE-PATHNAME source from-wildcard to-wildcard &key    Translates the pathname <source>, which matches <from-wildcard>, into    a corresponding pathname <result>, which matches <to-wildcard>, and    returns <result>.    The pathname <result> is <to-wildcard> with each wildcard or missing    field replaced by a portion of <source>.  A "wildcard field" is a    pathname component with a value of :WILD, a :WILD element of a    list-valued directory component, or an implementation-defined portion    of a component, such as the "*" in the complex wildcard string    "foo*bar" that some implementations support.  An implementation that    adds other wildcard features, such as regular expressions, must define    how TRANSLATE-PATHNAME extends to those features.  A "missing field" is    a pathname component with a value of NIL.    The portion of <source> that is copied into <result> is implementation    defined.  Typically it is determined by the user interface conventions    of the file systems involved.  Usually it is the portion of <source>    that matches a wildcard field of <from-wildcard> that is in the same    position as the wildcard or missing field of <to-wildcard>.  If there    is no wildcard field in <from-wildcard> at that position, then usually    it is the entire corresponding pathname component of <source>, or in    the case of a list-valued directory component, the entire corresponding    list element.  For example, if the name components of <source>,    <from-wildcard>, and <to-wildcard> are "gazonk", "gaz*", and "h*"    respectively, then in most file systems, the wildcard fields of the    name component of <from-wildcard> and <to-wildcard> are each "*", the    matching portion of <source> is "onk", and the name component of    <result> is "honk".  However, the exact behavior of TRANSLATE-PATHNAME    cannot be dictated by the Common Lisp language and must be allowed to    vary, depending on the user interface conventions of the file systems    involved.    During the copying of a portion of <source> into <result>, additional    implementation-defined translations of alphabetic case or file naming    conventions might occur, especially when <from-wildcard> and    <to-wildcard> are for different hosts.    If any of the first three arguments is not a pathname, string, or file    stream an error of type TYPE-ERROR is signalled.  It is valid for    <source> to be a wild pathname; in general this will produce a wild    result.  It is valid for <from-wildcard> and/or <to-wildcard> to be    non-wild pathnames.  (PATHNAME-MATCH-P <source> <from-wildcard>) must    be true or an error is signalled.        There are no specified keyword arguments for TRANSLATE-PATHNAME, but    implementations are permitted to extend it by adding keyword arguments.    There is one specified return value from TRANSLATE-PATHNAME;    implementations are permitted to extend it by returning additional    values.    Implementation guideline: one file system performs this operation by    examining each piece of the three pathnames in turn, where a piece is a    pathname component or a list element of a structured component such as    a hierarchical directory.  Hierarchical directory elements in    <from-wildcard> and <to-wildcard> are matched by whether they are    wildcards, not by depth in the directory hierarchy.  If the piece in    <to-wildcard> is present and not wild, it is copied into the result.    If the piece in <to-wildcard> is :WILD or NIL, the piece in <source> is    copied into the result.  Otherwise, the piece is <to-wildcard> might be    a complex wildcard such as "foo*bar" and the piece in <from-wildcard>    should be wild; the portion of the piece in <source> that matches the    wildcard portion of the piece in <from-wildcard> replaces the wildcard    portion of the piece in <to-wildcard> and the value produced is used in    the result.  4. Clarify that the functions OPEN (and WITH-OPEN-FILE), PROBE-FILE,  FILE-WRITE-DATE, FILE-AUTHOR, and TRUENAME only accept non-wildcard  pathnames and signal an error if given a pathname for which  WILD-PATHNAME-P returns true.  5. Clarify that the functions RENAME-FILE, DELETE-FILE, LOAD, and  COMPILE-FILE have implementation-defined consequences when given a  wildcard pathname.  Each function might signal an error or might operate  on all files that match the wildcard pathname.Examples:  ;The following examples are not portable.  They are written to run  ;with particular file systems and particular wildcard conventions.  ;Other implementations will behave differently.  These examples are  ;intended to be illustrative, not to be prescriptive.  (WILD-PATHNAME-P (MAKE-PATHNAME :NAME :WILD)) => T  (WILD-PATHNAME-P (MAKE-PATHNAME :NAME :WILD) :NAME) => T  (WILD-PATHNAME-P (MAKE-PATHNAME :NAME :WILD) :TYPE) => NIL  (WILD-PATHNAME-P (PATHNAME "S:>foo>**>")) => T   ;Lispm  (WILD-PATHNAME-P (PATHNAME :NAME "F*O")) => T    ;Most places  ;This example assumes one particular set of wildcard conventions  ;Not all file systems will run this example exactly as written  (DEFUN RENAME-FILES (FROM TO)    (DOLIST (FILE (DIRECTORY FROM))      (RENAME-FILE FILE (TRANSLATE-PATHNAME FILE FROM TO))))  (RENAME-FILES "/usr/me/*.lisp" "/dev/her/*.l")    ;Renames /usr/me/init.lisp to /dev/her/init.l  (RENAME-FILES "/usr/me/pcl*/*" "/sys/pcl/*/")    ;Renames /usr/me/pcl-5-may/low.lisp to /sys/pcl/pcl-5-may/low.lisp    ;In some file systems the result might be /sys/pcl/5-may/low.lisp  (RENAME-FILES "/usr/me/pcl*/*" "/sys/library/*/")    ;Renames /usr/me/pcl-5-may/low.lisp to /sys/library/pcl-5-may/low.lisp    ;In some file systems the result might be /sys/library/5-may/low.lisp  (RENAME-FILES "/usr/me/foo.bar" "/usr/me2/")    ;Renames /usr/me/foo.bar to /usr/me2/foo.bar  (RENAME-FILES "/usr/joe/*-recipes.text" "/usr/jim/cookbook/joe's-*-rec.text")    ;Renames /usr/joe/lamb-recipes.text to /usr/jim/cookbook/joe's-lamb-rec.text    ;Renames /usr/joe/pork-recipes.text to /usr/jim/cookbook/joe's-pork-rec.text    ;Renames /usr/joe/veg-recipes.text to /usr/jim/cookbook/joe's-veg-rec.text  ;This example assumes one particular set of wildcard conventions  (PATHNAME-NAME (TRANSLATE-PATHNAME "foobar" "foo*" "*baz")) => "barbaz"  (PATHNAME-NAME (TRANSLATE-PATHNAME "foobar" "foo*" "*"))    => "foobar"  (PATHNAME-NAME (TRANSLATE-PATHNAME "foobar" "*"    "foo*")) => "foofoobar"  (PATHNAME-NAME (TRANSLATE-PATHNAME "bar"    "*"    "foo*")) => "foobar"  ;Using Unix syntax and the wildcard conventions used by the  ;particular version of Unix on which I tried this:  (NAMESTRING    (TRANSLATE-PATHNAME "/usr/dmr/hacks/frob.l"                        "/usr/d*/hacks/*.l"                        "/usr/d*/backup/hacks/backup-*.*"))   => "/usr/dmr/backup/hacks/backup-frob.l"  (NAMESTRING    (TRANSLATE-PATHNAME "/usr/dmr/hacks/frob.l"                        "/usr/d*/hacks/fr*.l"                        "/usr/d*/backup/hacks/backup-*.*"))   => "/usr/dmr/backup/hacks/backup-ob.l"  ;This is similar to the above example but uses two different hosts,  ;U: which is a Unix and V: which is a VMS.  Note the translation  ;of file type and alphabetic case conventions.  (NAMESTRING    (TRANSLATE-PATHNAME "U:/usr/dmr/hacks/frob.l"                        "U:/usr/d*/hacks/*.l"                        "V:SYS$DISK:[D*.BACKUP.HACKS]BACKUP-*.*"))   => "V:SYS$DISK:[DMR.BACKUP.HACKS]BACKUP-FROB.LSP"  (NAMESTRING    (TRANSLATE-PATHNAME "U:/usr/dmr/hacks/frob.l"                        "U:/usr/d*/hacks/fr*.l"                        "V:SYS$DISK:[D*.BACKUP.HACKS]BACKUP-*.*"))   => "V:SYS$DISK:[DMR.BACKUP.HACKS]BACKUP-OB.LSP"  ;This example presumes background information described in PATHNAME-LOGICAL  (DEFUN TRANSLATE-LOGICAL-PATHNAME-1 (PATHNAME RULES)    (LET ((RULE (ASSOC PATHNAME RULES :TEST #'PATHNAME-MATCH-P)))      (UNLESS RULE (ERROR "No translation rule for ~A" PATHNAME))      (TRANSLATE-PATHNAME PATHNAME (FIRST RULE) (SECOND RULE))))  (TRANSLATE-LOGICAL-PATHNAME-1 "FOO:CODE;BASIC.LISP"                        '(("FOO:DOCUMENTATION;" "MY-UNIX:/doc/foo/")                          ("FOO:CODE;"          "MY-UNIX:/lib/foo/")                          ("FOO:PATCHES;*;"     "MY-UNIX:/lib/foo/patch/*/")))   => the pathname MY-UNIX:/lib/foo/basic.lRationale:  1,2,3. These three functions provide a standardized interface to the  idiosyncratic wildcard functionality of each host file system.  1. WILD-PATHNAME-P makes it possible to detect wild pathnames reliably and  do something useful (give up, merge out the bothersome components, call  DIRECTORY for a list of matching pathnames, etc.)  2,3. TRANSLATE-PATHNAME is needed by many application programs that deal  with wildcard pathnames.  PATHNAME-MATCH-P and TRANSLATE-PATHNAME are  needed by logical pathnames.  The PATHNAME-LOGICAL proposal cannot be  implemented without these features.  Implementing PATHNAME-LOGICAL could  involve adding additional capabilities to TRANSLATE-PATHNAME, depending  on the type of file system used, but those capabilities do not need to  be in the standard.  4. Since these functions return a value connected with one file, there  is no meaningful way to extend them to work on wildcard pathnames.  It  seems best to specify that they signal an error, rather than leaving  the consequences undefined.  5. The consequences are proposed to be implementation-defined because  current practice varies and no one wants to change.Current Practice:  Presumably no implementation supports the proposal exactly as stated.  Symbolics Genera has had similar features under different names for many  years:    (SEND pathname :WILD-P) returns a value such as NIL, :NAME, :TYPE,    etc., indicating the first wild field.    (SEND pathname :NAME-WILD-P), (SEND pathname :DIRECTORY-WILD-P),    etc. test individual fields.    The :TRANSLATE-WILD-PATHNAME, :TRANSLATE-WILD-PATHNAME-REVERSIBLE, and    :PATHNAME-MATCH messages resemble TRANSLATE-PATHNAME and    PATHNAME-MATCH-P.  The Explorer also supports the messages :WILD-P (although it only  returns NIL or T), :NAME-WILD-P, etc., :TRANSLATE-WILD-PATHNAME, and  :PATHNAME-MATCH.  Points 4 and 5 are current practice as far as the authors are aware.  The Explorer permits DELETE-FILE on a wild pathname, meaning to delete  all files that match.Cost to Implementors:  Many implementations probably have a substrate which is capable of this  or something similar already. In such cases, it's a relatively small  matter to add the proposed interface.  Even in cases where an implementation doesn't have ready code, it's clearly  better for the implementor to write that code once and for all than to ask  each user of wildcards to write it.  Since the detailed behavior is at the implementor's discretion, the cost  is unlikely to be large.  Some file systems will do all the work and the  implementor need only provide an interface to the file system or to a  standard library routine.  For other file systems the implementor has to  write the actual matching and translation algorithms.Cost to Users:  None.  This change is upward compatible.Cost of Non-Adoption:  Wild pathnames would continue to be mistaken for ordinary pathnames in  many situations.  User programs that deal with wildcard pathnames would  have to operate on implementation-dependent representations and hence  would not be easily portable.  The biggest cost is that the logical pathnames proposal would be stymied.Performance Impact:  None.Benefits:  A more complete set of wildcard pathname operations.  Portable user  programs that deal with wildcard pathnames will be more consistent  and reliable.  A portable system construction tool can be written  and the foundations are laid for a `logical pathname' facility  (proposed separately in PATHNAME-LOGICAL).Aesthetics:  This change would make some portable code less kludgey.Discussion:  There was some question about the name. The name PATHNAME-WILD-P  suggests a ``slot'' of a pathname (like PATHNAME-HOST),  while WILD-PATHNAME-P suggests a type (like INPUT-STREAM-P).  The committee was split on what to call it. Since it is more  like a type than a slot, the name WILD-PATHNAME-P was chosen.  It's been suggested that WILD-PATHNAME-P and PATHNAME-MATCH-P be allowed  to return a value other than T to represent "truth", which would  somehow encode some additional information.