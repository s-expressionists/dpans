*start*04394 00024 USaReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 21 OCT 88 11:03:37 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 21 Oct 88  11:02:00 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 480032; Fri 21-Oct-88 14:02:08 EDTDate: Fri, 21 Oct 88 14:01 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: IN-SYNTAX (Version 1)To: CL-Cleanup@SAIL.Stanford.EDUMessage-ID: <881021140158.2.KMP@BOBOLINK.SCRC.Symbolics.COM>From my list of "pending issues" distributed at the last X3J13 meeting...-----Issue:        IN-SYNTAXReferences:   NoneCategory:     ADDITIONEdit history: 21-Oct-88, Version 1 by PitmanStatus:	      For Internal DiscussionProblem Description:  There is no way to bind read syntax within a file.  As a result, applications which require extended syntax of some sort  tend to globally modify the lisp readtable at compile and load time,  sometimes interfering with other modules and/or user interaction.  Conscientious developers often avoid the creation of any stylized  syntax because of its likely effect on parts of the environment which  don't really belong to the application developer. This need for  paranoia is probably contrived and the result of what amounts to  an oversight in the design of Common Lisp.Proposal (IN-SYNTAX:NEW-FUNCTION):  Define that COMPILE-FILE and LOAD bind *READTABLE* to its current  value.  Introduce a new function IN-SYNTAX described as follows:  IN-SYNTAX readtable					[Function]   Assigns *READTABLE* to the value of its argument, which must   be a readtable.   Like IN-PACKAGE, this function is specially recognized by the   compiler, and has the implicit effect of being within   (EVAL-WHEN (EVAL COMPILE LOAD) ...).  Rationale:    IN-SYNTAX would make it possible to select a particular syntax for the    remainder of a file, radically increasing the usefulness of readtables     in Common Lisp by localizing their effect.Proposal (IN-SYNTAX:NEW-MACRO):  Define that COMPILE-FILE and LOAD bind *READTABLE* to its current  value.  Define a new macro IN-SYNTAX which has the effect of:   (DEFMACRO IN-SYNTAX (READTABLE)     `(EVAL-WHEN (EVAL COMPILE LOAD)	(SETQ *READTABLE* ,READTABLE)))  Incompatibly change the status of IN-PACKAGE from Function to Macro,  and describe it as:   (DEFMACRO IN-PACKAGE (PACKAGE-NAME)     `(EVAL-WHEN (EVAL COMPILE LOAD)	(SETQ *PACKAGE* (FIND-PACKAGE ,PACKAGE-NAME))))  Rationale:    IN-PACKAGE is intended as a declarative form anyway. Making it a macro    makes it unnecessary for the compiler to treat it specially.    IN-SYNTAX would make it possible to select a particular syntax for the    remainder of a file, radically increasing the usefulness of readtables     in Common Lisp by localizing their effect.Proposal (IN-SYNTAX:MINIMAL):  Define that COMPILE-FILE and LOAD bind *READTABLE* to its current  value at the time   Rationale:    This is enough of a foothold to implement a more elaborate facility    for using readtables in a localized way.Test Case:    -----File A-----   (DEFPACKAGE ACME ...)   (DEFVAR *ACME-SYNTAX*  (COPY-READTABLE *READTABLE*))   ----------------    -----File B-----   (IN-PACKAGE 'ACME)   (IN-SYNTAX *ACME-SYNTAX*)    (SET-MACRO-CHARACTER #\! ...)    (... !... ...)    ----------------   (COMPILE-FILE "A")  (LOAD "A")  (COMPILE-FILE "B")  (LOAD "B")   At this point, "!" would still have its normal syntax globally,  although it was used locally within B in a different way.Current Practice:  Presumably no one does this yet.Cost to Implementors:  Very small.Cost to Users:  None. This change is upward compatible.Cost of Non-Adoption:  Readtables would continue to be hard to use in a clean way.Benefits:  If people could use readtables safely, we might see more interesting  experimentation with read syntax.Aesthetics:  A slight improvement to aesthetics by controlling what was formerly  an unbounded side-effect (modification to the global readtable).Discussion:  Pitman supports (in order of decreasing preference) NEW-MACRO,  NEW-FUNCTION, and MINIMAL.*start*02301 00024 US Return-Path: <CL-Compiler-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 21 OCT 88 14:08:49 PDTReceived: from lucid.com by SAIL.Stanford.EDU with TCP; 21 Oct 88  14:01:13 PDTReceived: from bhopal ([192.9.200.13]) by heavens-gate.lucid.com id AA00405g; Fri, 21 Oct 88 14:00:49 PDTReceived: by bhopal id AA11541g; Fri, 21 Oct 88 13:59:17 PDTDate: Fri, 21 Oct 88 13:59:17 PDTFrom: Jon L White <jonl@lucid.com>Message-Id: <8810212059.AA11541@bhopal>To: KMP@STONY-BROOK.SCRC.Symbolics.COMCc: CL-Cleanup@SAIL.Stanford.EDU, CL-Compiler@SAIL.Stanford.EDUIn-Reply-To: Kent M Pitman's message of Fri, 21 Oct 88 14:01 EDT <881021140158.2.KMP@BOBOLINK.SCRC.Symbolics.COM>Subject: Issue: IN-SYNTAX (Version 1)This issue is far too narrowly focused right now.  For example,-- I would *strongly* favor the name IN-READTABLE over IN-SYNTAX; the   analogy is that IN-PACKAGE sets *PACKAGE*.  Alternatively, IN-SYNTAX   would have to jointly handle *READ-BASE* and *PACKAGE* as well as   *READTABLE*.-- The change suggested for IN-PACKAGE in the IN-SYNTAX:NEW-MACRO proposal    presumes:    (1) acceptance of the more radical IN-PACKAGE-FUNCTIONALITY:SELECT-ONLY        proposal, or at least eliminating the :use and :nicknames arguments;    (2) acceptance of the Cl-compiler's EVAL-WHEN-NON-TOP-LEVEL proposal.   While I favor both of these pivotal proposals, one might not want to   get this issued hung up over them.-- The rebindings of syntax parameters like *PACKAGE* and *READ-TABLE* by    LOAD and COMPILE-FILE are currently directed towards the perpetuation of    a horrible loophole; binding to "the current" values encourages the kind   of viewpoint mistakes that occur frequently even to fairly compotent    programmers.In short, we would all be better off if LOAD and COMPILE-FILE started out in a ***known*** configuration.  I would suggest binding *READ-BASE* to 10,*PACKAGE* to USER, and *READTABLE* to a value like (copy-readtable nil).The MIMIMAL proposal -- assuming the name change -- is nearly uncontroversial, and wouldn't preclude subsequent embellishments.How about adding *READ-BASE* to it, and considering more standarddefault values?-- JonL --*start*02947 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 21 OCT 88 14:17:01 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 21 Oct 88  14:15:17 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 480205; Fri 21-Oct-88 17:13:31 EDTDate: Fri, 21 Oct 88 17:13 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: IN-SYNTAX (Version 1)To: jonl@lucid.comcc: KMP@STONY-BROOK.SCRC.Symbolics.COM, CL-Cleanup@SAIL.Stanford.EDU, CL-Compiler@SAIL.Stanford.EDUIn-Reply-To: <8810212059.AA11541@bhopal>Message-ID: <881021171320.4.KMP@BOBOLINK.SCRC.Symbolics.COM>    Date: Fri, 21 Oct 88 13:59:17 PDT    From: Jon L White <jonl@lucid.com>    This issue is far too narrowly focused right now.  For example,[Reasonable comments ommitted for now.]    In short, we would all be better off if LOAD and COMPILE-FILE started out     in a ***known*** configuration.  I would suggest binding *READ-BASE* to 10,    *PACKAGE* to USER, and *READTABLE* to a value like (copy-readtable nil).I'm worried about this because:   - LISP is unsuitable because you don't know what's in it.   - USER is unsuitable because     - it may contain implementation-dependent stuff, including       shadowed definitions of standard common lisp things.     - its express purpose is for users to muck around in, so even       if it starts off clean, it won't stay that way. as such, either       it will be unreliable to load anything once you've been fooling       around awhile or you'll have to know not to do some things that       might screw up loading. either of these is unacceptable.   - SYSTEM is unsuitable because you can't know what's in it.   - KEYWORD is unsuitable because it has no functions in it and you'd     have to use package prefixes anyway.    ...    The MIMIMAL proposal -- assuming the name change -- is nearly     uncontroversial, and wouldn't preclude subsequent embellishments.    How about adding *READ-BASE* to it, and considering more standard    default values?Something I just thought of (a result of thinking about your message):In spite of my hesitation about using USER, I have to say that it mightbe kinda nice if LOAD could rebind everything to its `standard value' ifwe could adopt the STANDARD-VALUE proposal. If that were true, thenpeople could do LET-STANDARD to affect the value if they really wantedto, yet not only *PACKAGE*, but also *READTABLE*, *PRINT-BASE*, etc.could be handled in a reason which was intuitively nice and didn't haveto pick some arbitrary set of variables to bind. Maybe if we did that,I wouldn't feel a need to push this issue. When you've had a chance toreview that proposal, let me know how you feel about this idea.*start*01438 00024 US Return-Path: <CL-Compiler-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 27 OCT 88 22:38:57 PDTReceived: from lucid.com by SAIL.Stanford.EDU with TCP; 27 Oct 88  22:30:29 PDTReceived: from bhopal ([192.9.200.13]) by heavens-gate.lucid.com id AA01747g; Thu, 27 Oct 88 22:29:53 PDTReceived: by bhopal id AA13376g; Thu, 27 Oct 88 22:28:24 PDTDate: Thu, 27 Oct 88 22:28:24 PDTFrom: Jon L White <jonl@lucid.com>Message-Id: <8810280528.AA13376@bhopal>To: KMP@STONY-BROOK.SCRC.Symbolics.COMCc: CL-Cleanup@SAIL.Stanford.EDU, CL-Compiler@SAIL.Stanford.EDUIn-Reply-To: Kent M Pitman's message of Fri, 21 Oct 88 17:19 EDT <881021171949.5.KMP@BOBOLINK.SCRC.Symbolics.COM>Subject: Issue: IN-SYNTAX (Version 1)re: I noticed too late that you had added CL-Compiler.  . . . Because of the extensive implications for the CL-Compiler issue EVAL-WHEN-NON-TOP-LEVEL, and because of the (hasty) acceptance ofre-binding *package* to the "current" value by COMPILE-FILE.I can appreciate your concern about double cc'ing, and will takethe issue only to CL-Cleanup now.  Anyone on CL-Compiler who isn'talso on CL-CLeanup, but would like to hear about the issue ofdefault bindings for *package*/*readtable*/*read-base* duringLOAD or COMPILE-FILE, please contact me privately, and I will add you individually to the cc list.-- JonL --*start*02337 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 27 OCT 88 22:49:10 PDTReceived: from lucid.com by SAIL.Stanford.EDU with TCP; 27 Oct 88  22:47:20 PDTReceived: from bhopal ([192.9.200.13]) by heavens-gate.lucid.com id AA01763g; Thu, 27 Oct 88 22:46:48 PDTReceived: by bhopal id AA13441g; Thu, 27 Oct 88 22:45:18 PDTDate: Thu, 27 Oct 88 22:45:18 PDTFrom: Jon L White <jonl@lucid.com>Message-Id: <8810280545.AA13441@bhopal>To: CL-Cleanup@SAIL.Stanford.EDUSubject: Issue: IN-SYNTAX?I'm still very serious about the question of the default  package/readtable/read-base  to be in effect when LOAD and COMPILE-FILE start to work.  I think the choice made way back when, to let all of these assume their dynamic value current at the time of the call to LOAD etc, has been counter-productive.  It means that normal files *cannot* be guaranteed to be loadable;the caller of LOAD must at least guarantee that (1) some reasonable readtable is in effect, (2) that either read-base is 10 or the file has isolated itself against integer bases, and (3) that the current package is "reasonable enough" to get something correctly read-in for the initial IN-PACKAGE or the file has no unqualified symbols.  [Note that very fewusers write LISP:IN-PACKAGE -- not even those actually involved in writing portable code!].  While it is reasonable for a file to have something in it like:   (in-syntax :package sys:big-loser :read-base 16)and thus be parsed in a truly non-standard way, I can think of noother standardized computer language that leaves so much of itssyntax to environmental accidents rather than to clear specification.I've "looked ahead" [actually "jumped around"] in my mail file to see Kent's proposal for STANDARD-VALUE; while quite interesting in its own right, it is more focused at shielding the debugger.  Furthermore,only 3 of the proposed 14 "standard values" would be involved in simplefile reading/loading.Is there anyone else in this community simiarly concerned about specifyinga standard "foot to stand on", for the syntax of LOADing files?  It maybe too late to bring up such an incompatible change now, but I still think it is a serious problem.-- JonL --*start*01135 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 28 OCT 88 11:12:13 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 28 Oct 88  11:10:40 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 483759; Fri 28-Oct-88 14:10:19 EDTDate: Fri, 28 Oct 88 14:10 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: IN-SYNTAX?To: Jon L White <jonl@lucid.com>cc: CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <8810280545.AA13441@bhopal>Message-ID: <19881028181006.2.MOON@EUPHRATES.SCRC.Symbolics.COM>Only one comment from me: be careful not to make it impossible to writeprograms that set up the environment that they know they want, and thencall LOAD or COMPILE-FILE.  In other words, right now those functionsare (approximately) primitives that just do one thing, and if they arechanged to also set up a particular environment, the primitives need toremain accessible too.*start*01531 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 28 OCT 88 11:53:16 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 28 Oct 88  11:51:02 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 483793; Fri 28-Oct-88 14:49:57 EDTDate: Fri, 28 Oct 88 14:49 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: IN-SYNTAX?To: Moon@STONY-BROOK.SCRC.Symbolics.COMcc: jonl@lucid.com, CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <19881028181006.2.MOON@EUPHRATES.SCRC.Symbolics.COM>Message-ID: <881028144955.3.KMP@BOBOLINK.SCRC.Symbolics.COM>    Date: Fri, 28 Oct 88 14:10 EDT    From: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>    Only one comment from me: be careful not to make it impossible to write    programs that set up the environment that they know they want, and then    call LOAD or COMPILE-FILE.  In other words, right now those functions    are (approximately) primitives that just do one thing, and if they are    changed to also set up a particular environment, the primitives need to    remain accessible too.Saying that LOAD and COMPILE-FILE bind the standard value of the variablesin question (and perhaps all standard variables) and then saying that peopleshould do LET-STANDARD-VALUE in the scenario you allude to would be ok, right?*start*01825 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 28 OCT 88 13:27:13 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 28 Oct 88  13:22:06 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 483876; Fri 28-Oct-88 16:21:34 EDTDate: Fri, 28 Oct 88 16:21 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: IN-SYNTAX?To: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: jonl@lucid.com, CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <881028144955.3.KMP@BOBOLINK.SCRC.Symbolics.COM>Message-ID: <19881028202112.6.MOON@EUPHRATES.SCRC.Symbolics.COM>    Date: Fri, 28 Oct 88 14:49 EDT    From: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>	Date: Fri, 28 Oct 88 14:10 EDT	From: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>	Only one comment from me: be careful not to make it impossible to write	programs that set up the environment that they know they want, and then	call LOAD or COMPILE-FILE.  In other words, right now those functions	are (approximately) primitives that just do one thing, and if they are	changed to also set up a particular environment, the primitives need to	remain accessible too.    Saying that LOAD and COMPILE-FILE bind the standard value of the variables    in question (and perhaps all standard variables) and then saying that people    should do LET-STANDARD-VALUE in the scenario you allude to would be ok, right?Yes, if "bind the standard value" means "bind each variable to its standardvalue" rather than "temporarily change what the standard value is."  Of courseit would be an incompatible change.*start*03565 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 28 OCT 88 15:51:48 PDTReceived: from lucid.com by SAIL.Stanford.EDU with TCP; 28 Oct 88  15:49:01 PDTReceived: from bhopal ([192.9.200.13]) by heavens-gate.lucid.com id AA02415g; Fri, 28 Oct 88 15:48:00 PDTReceived: by bhopal id AA16141g; Fri, 28 Oct 88 15:46:31 PDTDate: Fri, 28 Oct 88 15:46:31 PDTFrom: Jon L White <jonl@lucid.com>Message-Id: <8810282246.AA16141@bhopal>To: Moon@STONY-BROOK.SCRC.Symbolics.COMCc: CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: David A. Moon's message of Fri, 28 Oct 88 14:10 EDT <19881028181006.2.MOON@EUPHRATES.SCRC.Symbolics.COM>Subject: Issue: IN-SYNTAX?re: . . . be careful not to make it impossible to write    programs that set up the environment that they know they want, and then    call LOAD or COMPILE-FILE.  I wondered about this -- namely, is it necessary to provide backwardscompatibility in exactly the same way it is done now, or would someslightly more kludgy replacement be satisfactory?  It has always seemedto me that the context sensitivity of LOAD/COMPILE-FILE has been a "throwback" to MacLisp days, where the standard input radix was octal!But even if 99.44% of all programs never tamper with the improved syntax standards, I agree that there must be a reasonably convenient way to overide the "binding" parts of LOAD/COMPILE-FILE.  What would you think of the following avenues:    (1) have a keyword argument to LOAD/COMPILE-FILE that says "start        out in current syntax rather than in standard syntax"; or have        keyword arguments for all the syntax variables.	[Pro: simplest to user; Con: added complexity in general, and          more work for implementors in particular]    (2) have all standard syntax specifications be user-accessible as        the values of special variables; thus ordinary lambda-binding        would suffice for tailoring the "standard" environment.        [Pro: makes the "primitives" user-accessible; Con: the set of        such variables might not be fixed between implementations, and        global-variable access to internal data is less "safe" than        a functional interface to it]    (3) have a documentary suggestion that when one wants to retain the        syntax environment, he should arrange such communication via        his own global variables;  e.g.,          (defun my-load (&rest args)            (let ((*my-package* *package*)                  (*my-readtable* *readtable*)                  (*my-read-base* *read-base*))              (apply #'load args)))       then add the following statement at the beginning of any file       for which this hack is needed:           (in-syntax :package *my-package*                      :readtable *my-readtable*                      :read-base *my-read-base*)       [Pro: puts the burden on the weirdo who _really_ wants this;        Con: can work unless you can modify the in-syntax of the file.]By the bye, I've ignored *READ-SUPPRESS* and *READ-DEFAULT-FLOAT-FORMAT*til now.  Probably the former doesn't need to be redefinable by theIN-SYNTAX form, but surely it needs to be "protected" over LOAD/COMPILE-FILE.As to the latter, I don't have a great argument for it now, but I rathertend to view it as a global "site installation" parameter, rather than as a useful dynamic variable; my mind would be changed if I heard of significant "dynamic" use of it.-- JonL --*start*05591 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 28 OCT 88 16:47:43 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 28 Oct 88  16:38:58 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 484000; Fri 28-Oct-88 19:38:34 EDTDate: Fri, 28 Oct 88 19:38 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: IN-SYNTAX?To: Jon L White <jonl@lucid.com>cc: CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <8810282246.AA16141@bhopal>Message-ID: <19881028233810.0.MOON@EUPHRATES.SCRC.Symbolics.COM>    Date: Fri, 28 Oct 88 15:46:31 PDT    From: Jon L White <jonl@lucid.com>    re: . . . be careful not to make it impossible to write	programs that set up the environment that they know they want, and then	call LOAD or COMPILE-FILE.      I wondered about this -- namely, is it necessary to provide backwards    compatibility in exactly the same way it is done now, or would some    slightly more kludgy replacement be satisfactory?  I said don't make it impossible, not don't make it incompatible.  Of courseit would be better to be compatible, but that can be judged on its ownmerits and might be outweighed by the esthetics of a new approach.    ....What would you think of the following avenues:I have another suggestion, which is to leave LOAD and COMPILE-FILE theway they are, and add WITH-STANDARD-IO-ENVIRONMENT (a Symbolics CommonLisp feature), which binds all of the variables to their standard values,and say you should wrap this around calls to LOAD and COMPILE-FILE whenthat's what you want.  The reason for WITH-STANDARD-IO-ENVIRONMENT ratherthan LET is that you don't have to know all the variables to bind, andindeed there might be implementation-dependent ones as well as all thestandard ones.The only problem with this suggestion is that people might be callingLOAD by hand as the way to load programs, and wouldn't like to have totype in a WITH-STANDARD-IO-ENVIRONMENT form.  I suppose there areprobably still environments out there in which calling LOAD by hand isthe way to load programs.  But I would hope that more typically onewould call some kind of Load Program command, which would do theWITH-STANDARD-IO-ENVIRONMENT for you.	(1) have a keyword argument to LOAD/COMPILE-FILE that says "start	    out in current syntax rather than in standard syntax"; or have	    keyword arguments for all the syntax variables.	    [Pro: simplest to user; Con: added complexity in general, and 	     more work for implementors in particular]I prefer the second of those two suggestions over the first of them,it seems more consistent with the rest of Common Lisp.In Symbolics Common Lisp, LOAD and COMPILE-FILE have a :PACKAGE argumentthat does this.  However, we don't have arguments for the other things,like base and readtable, because this is thought of as a way to overridewhat the file says via the -*- line.  In general our system is basedaround the assumption that most files use the -*- mechanism forspecifying the attributes, which unfortunately Common Lisp didn't adopt,and loading or compiling with the caller's attributes is an unusual caseseen only in a few straight Common Lisp programs.  It's also worth notingthat LOAD of a binary file always loads the file with the same attributesit was compiled with, and if all implementations did this, the issue ofportable programs would be lessened, since compiled programs would alwaysbe loaded correctly, and people who compile programs are no doubt morecareful than people who load them.	(2) have all standard syntax specifications be user-accessible as	    the values of special variables; thus ordinary lambda-binding	    would suffice for tailoring the "standard" environment.	    [Pro: makes the "primitives" user-accessible; Con: the set of	    such variables might not be fixed between implementations, and	    global-variable access to internal data is less "safe" than	    a functional interface to it]I agree with the Con.	(3) have a documentary suggestion that when one wants to retain the	    syntax environment, he should arrange such communication via	    his own global variables;  e.g.,	      (defun my-load (&rest args)		(let ((*my-package* *package*)		      (*my-readtable* *readtable*)		      (*my-read-base* *read-base*))		  (apply #'load args)))	   then add the following statement at the beginning of any file	   for which this hack is needed:	       (in-syntax :package *my-package*			  :readtable *my-readtable*			  :read-base *my-read-base*)	   [Pro: puts the burden on the weirdo who _really_ wants this;	    Con: can work unless you can modify the in-syntax of the file.]This does not appeal to me at all.    By the bye, I've ignored *READ-SUPPRESS* and *READ-DEFAULT-FLOAT-FORMAT*    til now.  Probably the former doesn't need to be redefinable by the    IN-SYNTAX form, but surely it needs to be "protected" over LOAD/COMPILE-FILE.    As to the latter, I don't have a great argument for it now, but I rather    tend to view it as a global "site installation" parameter, rather than as     a useful dynamic variable; my mind would be changed if I heard of     significant "dynamic" use of it.Outputting postscript.The fact that there are several variables like this that people tend tooverlook is an argument for WITH-STANDARD-IO-ENVIRONMENT.*start*02483 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 31 OCT 88 17:00:16 PSTReceived: from lucid.com by SAIL.Stanford.EDU with TCP; 31 Oct 88  12:02:39 PSTReceived: from bhopal ([192.9.200.13]) by LUCID.COM id AA03394g; Mon, 31 Oct 88 12:01:41 PSTReceived: by bhopal id AA01329g; Mon, 31 Oct 88 12:00:14 PSTDate: Mon, 31 Oct 88 12:00:14 PSTFrom: Jon L White <jonl@lucid.com>Message-Id: <8810312000.AA01329@bhopal>To: Moon@STONY-BROOK.SCRC.Symbolics.COMCc: CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: David A. Moon's message of Fri, 28 Oct 88 19:38 EDT <19881028233810.0.MOON@EUPHRATES.SCRC.Symbolics.COM>Subject: Issue: IN-SYNTAX?re: The fact that there are several variables like this that people tend to    overlook is an argument for WITH-STANDARD-IO-ENVIRONMENT.Right, which is why my first suggestion was to add an argument to LOAD that says "let the syntax be the current one, rather than the standard one".  I have the feeling that taking the standard defaults is what 99.44% of all programs would be doing, and am thus willing to contemplate the more incompatible change to LOAD.  This would leave open a possibility fora macro named something like WITH-STANDARD-INPUT-SYNTAX, which would dynamically bind the "standard" settings to the current values of the various documented parameters (or to keyword arguments).  The burden is thus shifted to the 0.56% of the cases that wanted something "non-standard".I gathered from your reply to KMP that you don't think much of being able to dynamically bind the "standards".re:     [jonl] As to [*read-default-float-format*], I don't have a great 	  argument for it now, but I rather tend to view it as a global "site 	  installation"  parameter, rather than as a useful dynamic variable; 	  my mind would be changed if I heard of significant "dynamic" use.    [moon] Outputting postscript.Well, FORMAT's ~E or ~G with hairy prefix parameters could be used instead. [I presume you mean while PRINTing, rather than while READing; the READ sideis the important one for IN-SYNTAX.]  This looks like a gap in CL in that there is no corresponding parameter *PRINT-DEFAULT-FLOAT-FORMAT*; it's a bit like letting PRINT use *READ-BASE* rather than *PRINT-BASE*.   Were that corrected, then I think the conjecture about "site installation parameter" _might_ stand.-- JonL --*start*01084 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 16-Mar-89 23:09:58 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 16 MAR 89 23:09:50 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 16 Mar 89  23:10:33 PSTReceived: from Cabernet.ms by ArpaGateway.ms ; 16 MAR 89 23:05:56 PSTDate: 16 Mar 89 23:05 PSTFrom: masinter.paSubject: Re: Issue: IN-SYNTAX (Version 1)In-reply-to: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>'s message of Fri, 21 Oct 88 14:01 EDTTo: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: CL-Cleanup@SAIL.Stanford.EDUMessage-ID: <890316-230556-6907@Xerox>The discussion of this Issue quickly evolved into a discussion of thedefault environment for LOAD. I don't see much in the way of the discussionof the issue itself except "far too narrowly focused."Under the circumstances -- and given that I'm not that thrilled by addingYet Another Puppy that We Aren't Sure We Need -- can we drop this?*start*00863 00024 US GV-Info: gls@Think.COM at 17-Mar-89 12:13:00 from AGReturn-Path: <gls@Think.COM>Received: from Think.COM ([10.4.0.6]) by Xerox.COM ; 17 MAR 89 12:02:50 PSTReceived: from fafnir.think.com by Think.COM; Fri, 17 Mar 89 15:01:32 ESTReturn-Path: <gls@Think.COM>Received: from verdi.think.com by fafnir.think.com; Fri, 17 Mar 89 15:02:43 ESTReceived: by verdi.think.com; Fri, 17 Mar 89 14:59:31 ESTDate: Fri, 17 Mar 89 14:59:31 ESTFrom: Guy Steele <gls@Think.COM>Message-Id: <8903171959.AA09035@verdi.think.com>To: masinter.paCc: KMP@stony-brook.scrc.symbolics.com, CL-Cleanup@sail.stanford.eduIn-Reply-To: masinter.pa@xerox.com's message of 16 Mar 89 23:05 PST <890316-230556-6907@Xerox>Subject: Issue: IN-SYNTAX (Version 1)Yet Another Puppy--YAP!So let us define a "yapper" to mean someone who proposes Yet Another Puppy.--Q*start*01766 00024 US Date:  4 Apr 89 12:11 PDTSender: CL-Cleanup-mailer%SAIL.Stanford:EDU:XeroxFrom: KMP%STONY-BROOK.SCRC.Symbolics:COM:XeroxSubject: Issue: IN-SYNTAXTo: CL-Cleanup%SAIL.Stanford:EDU:XeroxGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: IN-SYNTAXTo: CL-Cleanup@SAIL.Stanford.EDUReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 04 APR 89 11:56:40 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 4 Apr 89  11:53:13 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 571174; Tue 4-Apr-89 14:53:10 EDTOriginal-Date: Tue, 4 Apr 89 14:52 EDTMessage-ID: <890404145245.6.KMP@BOBOLINK.SCRC.Symbolics.COM>GVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVVersion 2, which makes LOAD and *COMPILE-FILE* bind *READTABLE* (andwhich does -not- introduce the IN-SYNTAX macro mentioned in version 1)passed 12-0-3.  This version was distributed by KMP in handwritten form.The full text of the hand-written proposal was:  Issue IN-SYNTAX (Version 2)		KMP 3/30/89  Proposal (IN-SYNTAX:MINIMAL):   Define that COMPILE-FILE and LOAD bind *READTABLE* to its   current value.  Rationale:   This allows portable programs to do     (IN-PACKAGE "FOO")     (EVAL-WHEN (EVAL LOAD COMPILE)       (SETQ *READTABLE* FOO:MY-READTABLE))   at the top of a file without globally side-effecting the   environment.   Currently, there is no portable way to change the syntax only for   the duration of a file, which in turn makes customized syntax   difficult to use safely.