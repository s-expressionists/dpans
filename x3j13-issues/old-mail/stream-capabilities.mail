*start*08037 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 05 JUL 88 14:57:08 PDTReceived: from multimax.ARPA by SAIL.Stanford.EDU with TCP; 5 Jul 88  14:54:49 PDTReceived:  by multimax.ARPA (5.51/25-eef)	id AA00214; Tue, 5 Jul 88 17:52:23 EDTReceived: from localhost by mist.UUCP (3.2/4.7)	id AA19990; Tue, 5 Jul 88 17:56:33 EDTMessage-Id: <8807052156.AA19990@mist.UUCP>To: cl-cleanup%sail.stanford.edu@multimax.ARPASubject: Issue: STREAM-CAPABILITIES (version 1)Date: Tue, 05 Jul 88 17:56:31 EDTFrom: Dan L. Pierson <pierson%mist@multimax.ARPA>Issue:         STREAM-CAPABILITIESReferences:    Standard streams (pp. 327-329)Category:      ADDITIONEdit history:  Version 1 by Pierson 7/ 5 88, add redesign per PitmanStatus:        For Internal DiscussionTwo versions, one from Masinter and one from Pitman.Problem description:Portable programs cannot currently determine certain usefulrelationships among streams because the required information isoperating-system dependent and unavailable at a portable Common Lisplevel. ---------------------------------------------------------------------------Proposal (STREAM-CAPABILITIES:NEW-PREDICATES):Add the following inquiry functions to Common Lisp:    STREAM-SAME-DESTINATION-P stream1 stream2	    	    [Function]      Returns T if the Lisp can prove that the two streams send their      output to the same "destination".  For example, this function      would return true for two streams that output to Unix files iff      the streams resulted either in output to the same file      descriptor or in output to two different file descriptors for      the same inode.    STREAM-SAME-SOURCE-P stream1 stream2    	    	    [Function]      Returns T if the Lisp can prove that the two streams receive      their input from the same "source", where same source mans that      input on one stream will change what the other stream would next      read.  For example, this function would return true for two      streams that read from Unix files iff the streams resulted in      input from the same file descriptor but not if the streams      resulted in in input from two different file descriptors for the      same inode because then reading one stream would not change what      the other stream saw.    INTERACTIVE-STREAM-P stream	    	    	    	    [Function]      Returns T if the Lisp believes that the stream is interactive.      Some of the things that define a stream as interactive include:         1. The stream is connected to a person, program, or device	    such that the program can prompt for information and	    expect to receive different input depending on the prompt.	 2. The program should prompt for input and support "normal	    input editing".	 3. READ-CHAR might hang waiting for input instead of	    immediately returning EOF.      The answer returned by this function may be incorrect; it will      most likely be based on whether or not the stream is connected      to whatever the underlying operating system considers a      "terminal device".Test Cases/Examples:(LET* ((IN1 (OPEN "foo" :DIRECTION :INPUT))       (IN2 (OPEN "foo" :DIRECTION :INPUT))       (OUT1 (OPEN "foo" :DIRECTION :OUTPUT))       (OUT2 (OPEN "foo" :DIRECTION :OUTPUT))       (STREAM1 (MAKE-TWO-WAY-STREAM IN1 OUT1))       (STREAM2 (MAKE-TWO-WAY-STREAM IN2 OUT2)))  (LIST (STREAM-SAME-DESTINATION-P STREAM1 OUT1)        (STREAM-SAME-DESTINATION-P STREAM1 STREAM2)	(STREAM-SAME-SOURCE-P STREAM1 IN1)	(STREAM-SAME-SOURCE-P STREAM1 STREAM2)	(STREAM-INTERACTIVE-P STREAM1)	(STREAM-INTERACTIVE-P *TERMINAL-IO*)))==> (T T T NIL NIL ?) ; *TERMINAL-IO* might or might not be interactive---------------------------------------------------------------------------Proposal (STREAM-CAPABILITIES:LIST-FUNCTIONS)Add the following inquiry functions to Common Lisp:    STREAM-SOURCE-ID-LIST stream                            [Function]    STREAM-DESTINATION-ID-LIST stream                       [Function]      Returns a list of tokens which identify the source or the      destination of the stream at the current time.  The tokens may      be any Lisp objects distinguishable using EQL.  The only valid      operations on the list of tokens are non-destructive set      operations.      A synonym stream always returns the same id list as the stream      to which it is indirected.      An encapsulated stream (such as an echo stream or a broadcast      stream) always returns at least the union of the tokens which      would be returned by each of the encapsulated streams.    INTERACTIVE-STREAM-P stream	    	    	    	    [Function]      Returns T if the Lisp believes that the stream is interactive.      Some of the things that define a stream as interactive include:         1. The stream is connected to a person, program, or device	    such that the program can prompt for information and	    expect to receive different input depending on the prompt.	 2. The program should prompt for input and support "normal	    input editing".	 3. READ-CHAR might hang waiting for input instead of	    immediately returning EOF.      The answer returned by this function may be incorrect; it will      most likely be based on whether or not the stream is connected      to whatever the underlying operating system considers a      "terminal device".Test Cases/Examples:(LET* ((IN1 (OPEN "foo" :DIRECTION :INPUT))       (IN2 (OPEN "foo" :DIRECTION :INPUT))       (OUT1 (OPEN "foo" :DIRECTION :OUTPUT))       (OUT2 (OPEN "foo" :DIRECTION :OUTPUT))       (STREAM1 (MAKE-TWO-WAY-STREAM IN1 OUT1))       (STREAM2 (MAKE-TWO-WAY-STREAM IN2 OUT2)))  (LIST (INTERSECTION (STREAM-DESTINATION-ID-LIST STREAM1)                      (STREAM-DESTINATION-ID-LIST OUT1))        (INTERSECTION (STREAM-DESTINATION-ID-LIST STREAM1)	              (STREAM-DESTINATION-ID-LIST STREAM2))	(INTERSECTION (STREAM-SOURCE-ID-LIST STREAM1)	              (STREAM-SOURCE-ID-LIST IN1))	(INTERSECTION (STREAM-SOURCE-ID-LIST STREAM1)	              (STREAM-SOURCE-ID-LIST STREAM2))	(INTERACTIVE-STREAM-P STREAM1)	(INTERACTIVE-STREAM-P *TERMINAL-IO*)))==> (T T T NIL NIL ?) ; *TERMINAL-IO* might or might not be interactive---------------------------------------------------------------------------Rationale:These inquiry functions answer questions that portable Lisp programscan't answer on their own because the information is frequently onlymaintained at an operating system level.Current practice:No implementations currently provide this functionality.Cost to Implementors:Implementations will have to support these new functions.  Correctsupport will require some thought for each operating system supported.Cost to Users:None, this is an upward-compatible extension.Cost of non-Adoption:Portable programs will have trouble matching their user interface todifferent target environments.Benefits:Implementations will be more able to match their IO behavior to theirenvironment and their user's expectations.  Portable programs willhave more tools for reasoning about stream relationships.Aesthetics:Improved because this area becomes better defined.Discussion:Masinter doesn't believe that STREAM-SAME-SOURCE-P (or, presumably,STREAM-SOURCE-ID-LIST) is needed; Pierson disagrees.INTERACTIVE-STREAM-P is problematical, the information would be usefulto some programs, but it's not clear how many implementations canreturn a useful answer.Pierson supports STREAM-CAPABILITIES:NEW-PREDICATES because he isconcerned that it may be hard for implementations to provide the listfunctions efficiently because the natural token type for multiple,disjoint types of streams may be integers.  The implementation wouldhave to coerce these integers in to some other type of token thatwould be guaranteed unique across all possible stream types.*start*00929 00024 USaReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 14 SEP 88 07:32:04 PDTReceived: from decwrl.dec.com by SAIL.Stanford.EDU with TCP; 14 Sep 88  07:30:33 PDTReceived: by decwrl.dec.com (5.54.5/4.7.34)	id AA03471; Wed, 14 Sep 88 07:29:16 PDTDate: Wed, 14 Sep 88 07:29:16 PDTMessage-Id: <8809141429.AA03471@decwrl.dec.com>From: vanroggen%aitg.DEC@decwrl.dec.comTo: cl-cleanup@sail.stanford.eduSubject: Issue: STREAM-CAPABILITIESI think I mostly agree with Larry that STREAM-SAME-xxx-P (or STREAM-xxx-ID-LIST) aren't needed.  His reasons aren't clear from the write-up;I believe that such functionality would be nice but too difficult toprovide in some implementations and therefore shouldn't be part ofthe language.  For example, what happens with streams working onremote files?			---Walter*start*02026 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 20 SEP 88 02:18:32 PDTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 20 Sep 88  02:18:00 PDTReceived: from Cabernet.ms by ArpaGateway.ms ; 20 SEP 88 02:16:33 PDTDate: 20 Sep 88 02:16 PDTFrom: masinter.paSubject: Re: Issue: STREAM-CAPABILITIESIn-reply-to: vanroggen%aitg.DEC@decwrl.dec.com's message of Wed, 14 Sep 88 07:29:16 PDTTo: vanroggen%aitg.DEC@decwrl.dec.comcc: cl-cleanup@sail.stanford.eduMessage-ID: <880920-021633-3385@Xerox>Yes, its not so much the necessity of STREAM-SAME-xxx-P as it is the likelihoodof them being correctly implementable for any of the likely operating systems,especially in the presence of network file systems, pipes, streams, indirects,redirects, etc.I think adding something that cannot be correctly implemented will lead to morerather than less portable code.I think INTERACTIVE-STREAM-P is implementable, however, if only because it isreasonable to be conservative.It is important to answer the questions about CL-constructed streams lest wediffer: what about MAKE-ECHO-STREAM MAKE-BROADCAST-STREAM MAKE-TWO-WAY-STREAMwith regard to their transformation of INTERACTIVE-STREAM-Ps to non-interactiveones? The STREAM-SOURCE-ID-LIST proposal has some merits, but reminds me of Godelnumbering schemes.Dans reasoning "Pierson supports STREAM-CAPABILITIES:NEW-PREDICATES because heisconcerned that it may be hard for implementations to provide the listfunctions efficiently because the natural token type for multiple,disjoint types of streams may be integers.  The implementation wouldhave to coerce these integers in to some other type of token thatwould be guaranteed unique across all possible stream types." doesn't follow from the proposal, does it? Some streams could have integers astokens (are you thinking of their inode number or something?), and others not. *start*02450 00024 US Return-Path: <Moon@STONY-BROOK.SCRC.Symbolics.COM>Received: from STONY-BROOK.SCRC.Symbolics.COM ([128.81.41.144]) by Xerox.COM ; 20 SEP 88 10:22:25 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 462457; Tue 20-Sep-88 13:22:24 EDTDate: Tue, 20 Sep 88 13:22 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Re: Issue: STREAM-CAPABILITIESTo: masinter.pacc: vanroggen%aitg.DEC@decwrl.dec.com, cl-cleanup@sail.stanford.eduIn-Reply-To: <880920-021633-3385@Xerox>Message-ID: <19880920172214.7.MOON@EUPHRATES.SCRC.Symbolics.COM>Line-fold: No    Date: 20 Sep 88 02:16 PDT    From: masinter.pa@Xerox.COM    ....    I think INTERACTIVE-STREAM-P is implementable, however, if only because it is    reasonable to be conservative.    It is important to answer the questions about CL-constructed streams lest we    differ: what about MAKE-ECHO-STREAM MAKE-BROADCAST-STREAM MAKE-TWO-WAY-STREAM    with regard to their transformation of INTERACTIVE-STREAM-Ps to non-interactive    ones? I believe that interactivity is a property of input streams: it meansthat input from the stream is coming from an intelligent agent whichbases his/her/its input on observations of the state of the system,which might include output to various streams.  A non-interactivestream, in contrast, is one whose input comes from some kind of "canned"source.  There might be gray areas where an implementor has to usehis judgement, but that's not a fatal flaw.One could argue that an output stream can be interactive, which meansthat an intelligent agent is more likely to look at what is written tothat stream (e.g. it's displayed directly in a window, rather than beingsent to a file that would have to be examined; but what if the window iscovered over?).  I don't think this is a useful distinction.If we agree that interactivity is a property of input streams, thenthe answers follow: MAKE-ECHO-STREAM and MAKE-TWO-WAY-STREAM get theinteractivity from their input-stream.  Since MAKE-BROADCAST-STREAMmakes output streams, INTERACTIVE-STREAM-P is either invalid oralways returns NIL, whichever it's defined to be for output streams.MAKE-CONCATENATED-STREAM is wierd, but I guess the only sensiblechoice is that it gets its interactivity from the currently activeinput stream, or if all of them have been used up, it's not interactive.*start*02438 00024 USaReturn-Path: <@multimax.encore.com:pierson@mist>Received: from multimax.encore.com ([192.5.63.14]) by Xerox.COM ; 16 NOV 88 13:24:11 PSTReceived: from mist.encore.COM by multimax.encore.com (5.59/25-eef)	id AA03392; Wed, 16 Nov 88 16:21:46 ESTReceived: from localhost by mist.UUCP (3.2/4.7)	id AA08678; Wed, 16 Nov 88 16:25:41 ESTMessage-Id: <8811162125.AA08678@mist.UUCP>To: masinter.pa%Xerox.COM@multimax.encore.comCc: cl-cleanup%sail.stanford.edu@multimax.encore.comSubject: Re: Issue: STREAM-CAPABILITIES (Version 1)In-Reply-To: Your message of 20 Sep 88 02:16:00 -0700.Date: Wed, 16 Nov 88 16:25:38 ESTFrom: Dan L. Pierson <pierson@mist.ARPA>A long delayed reply, now that Moon woke me up.    Yes, its not so much the necessity of STREAM-SAME-xxx-P as it is the    likelihood of them being correctly implementable for any of the likely    operating systems, especially in the presence of network file systems,    pipes, streams, indirects, redirects, etc.    Would it help if the functions returned the cannonical two values: T   T	    means Yes Nil T	    means No ?   Nil    means can't find out or not sureIt would be legitimate for an implementation to always return {Nil, Nil}if either stream led to a network file.  However some network filesystems (and some implementations) might be able to answer the questionaccurately in all cases.    I think adding something that cannot be correctly implemented will    lead to more rather than less portable code.    I don't think this is what you meant to say.    Dans reasoning "Pierson supports STREAM-CAPABILITIES:NEW-PREDICATES    because he is concerned that it may be hard for implementations to    provide the list functions efficiently because the natural token type    for multiple, disjoint types of streams may be integers.  The    implementation would have to coerce these integers in to some other    type of token that would be guaranteed unique across all possible    stream types."        doesn't follow from the proposal, does it? Some streams could have    integers as tokens (are you thinking of their inode number or    something?), and others not.    Well, I tried to explain this in more detail and ended up convincingmyself that I was wrong so please consider the objection withdrawn.Would a new draft based on LIST-FUNCTIONS be useful?Does this *have* to be broken up into two issues?*start*01627 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 29 NOV 88 16:04:10 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 29 Nov 88  16:03:08 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 29 NOV 88 15:50:15 PSTDate: 29 Nov 88 15:49 PSTFrom: masinter.paSubject: Re: Issue: STREAM-CAPABILITIES (Version 1)In-reply-to: Dan L. Pierson <pierson@mist.ARPA>'s message of Wed, 16 Nov 88 16:25:38 ESTTo: Dan L. Pierson <pierson@mist.ARPA>cc: cl-cleanup@sail.stanford.eduMessage-ID: <881129-155015-6276@Xerox>When Moon said "I think adding something that cannot be correctly implemented will leadto more rather than less portable code."I thought I understood him and agreed. If you add a new feature to thestandard, people will use that feature. If the feature can't really beimplemented "correctly", and different implementors treat the featuredifferently, users will write code that winds up depending on theimplementation-dependent interpretation of the standard.I'm inclined to believe that we should decide what these mean in individualoperating systems, and then see if the concepts map into features thatcould be operating-system independent. Trying to write the generic prosewithout some specific examples is leading us into more ambiguous wordingrather than less.I see no reason to separate the proposals here into separate issues. Ithink these might well be lumped in with the "pathname" issues in a biggercategory of "standardizing file system interactions".*start*02259 00024 US Return-Path: <@multimax.encore.com:pierson@mist.encore.com>Received: from multimax.encore.com ([192.5.63.14]) by Xerox.COM ; 29 NOV 88 16:19:25 PSTReceived: from mist.encore.COM by multimax.encore.com (5.59/25-eef)	id AA12132; Tue, 29 Nov 88 19:17:41 ESTReceived: from localhost by mist. (4.0/SMI-4.0)	id AA00505; Tue, 29 Nov 88 19:17:51 ESTMessage-Id: <8811300017.AA00505@mist.>To: masinter.paCc: cl-cleanup@sail.stanford.eduSubject: Re: Issue: STREAM-CAPABILITIES (Version 1) In-Reply-To: Your message of 29 Nov 88 15:49:00 -0800.             <881129-155015-6276@Xerox> Date: Tue, 29 Nov 88 19:17:49 ESTFrom: Dan L. Pierson <pierson@mist.encore.com>(I'm back on the net after a week and a half of local network reconfigurations)    When Moon said         "I think adding something that cannot be correctly implemented will lead    to more rather than less portable code."        I thought I understood him and agreed. If you add a new feature to the    standard, people will use that feature. If the feature can't really be    implemented "correctly", and different implementors treat the feature    differently, users will write code that winds up depending on the    implementation-dependent interpretation of the standard.    I agree with you but I think Moon's wording (but probably notthinking) says the exact opposite.  If more portable code is agreed tobe a good thing, he seems to be saying that adding features whichcan't be correctly implemented will lead to this good result....    I'm inclined to believe that we should decide what these mean in individual    operating systems, and then see if the concepts map into features that    could be operating-system independent. Trying to write the generic prose    without some specific examples is leading us into more ambiguous wording    rather than less.    You're getting more convincing every time you say this.  I've reallygot to try and get a survey together.    I see no reason to separate the proposals here into separate issues. I    think these might well be lumped in with the "pathname" issues in a bigger    category of "standardizing file system interactions".    OK, I'll just let the current draft sit for now.*start*04515 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 23-May-89 12:30:00 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 23 MAY 89 12:30:03 PDTReceived: from ALLEGHENY.SCRC.Symbolics.COM ([128.81.41.45]) by SAIL.Stanford.EDU with TCP; 23 May 89  12:28:02 PDTReceived: from KENNETH-WILLIAMS.SCRC.Symbolics.COM by ALLEGHENY.SCRC.Symbolics.COM via INTERNET with SMTP id 140393; 23 May 89 14:42:53 EDTDate: Tue, 23 May 89 14:46 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: STREAM-CAPABILITIES (version 3)To: CL-Cleanup@sail.stanford.eduMessage-ID: <19890523184654.3.MOON@KENNETH-WILLIAMS.SCRC.Symbolics.COM>I hope this issue is on the agenda for the June X3J13 meeting.  KMP andI have prepared a revised writeup which we think is ready for release.I'd like to distribute this to X3J13 as soon as discussion, if any, inthe cleanup subcommittee is completed.Issue:         STREAM-CAPABILITIESReferences:    Standard streams (pp. 327-329)Category:      ADDITIONEdit history:  Version 1 by Pierson 5-Jul-88, add redesign per Pitman               Version 2 by Moon, 10-May-89, remove controversial parts               Version 3 by Moon, 12-May-89, improve wording and examplesProblem description:  Programs cannot currently distinguish between interactive use and batch  (or background) use without using implementation-dependent extensions.  For example, there is currently no way to tell whether it is useful to  ask a question when an unexpected situation is encountered.  Note: earlier versions of this issue tried to solve another problem  as well.  See discussion section.Proposal (STREAM-CAPABILITIES:INTERACTIVE-STREAM-P):  Add the following function:    INTERACTIVE-STREAM-P stream    Returns T if the stream is interactive, otherwise NIL.  Signals    an error of type TYPE-ERROR if the argument is not a stream.    The precise meaning of INTERACTIVE-STREAM-P is implementation    dependent, and may depend on the underlying operating system.  However    the general intent is to distinguish between interactive and batch (or    background or command-file) operations.    Some examples of the things that might identify a stream as interactive    include:       1. The stream is connected to a person (or equivalent) in          such a way that the program can prompt for information and          expect to receive different input depending on the prompt.       2. The program is expected to prompt for input and support          "normal input editing".       3. READ-CHAR might hang waiting for the user to type something          instead of quickly returning a character or EOF.    *TERMINAL-IO* might or might not be interactive.Examples:  (when (> measured limit)    (let ((error (round (* (- measured limit) 100)                        limit)))      (unless (if (interactive-stream-p *query-io*)                  (yes-or-no-p "The frammis is out of tolerance by ~D%.~@                                Is it safe to proceed? " error)                  (< error 15))  ;15% is acceptable        (error "The frammis is out of tolerance by ~D%." error))))Rationale:  INTERACTIVE-STREAM-P has been proposed several times and is clearly  needed by any program that alters its behavior depending on whether  it is interacting with a user or running in a "batch" mode.Current practice:  Most implementations have this feature already, often under a  different name.Cost to Implementors:  Implementations will have to support this new function.  Correct support  will require some thought for each operating system supported.Cost to Users:  None, this is an upward-compatible extension.Cost of non-adoption:  Less featureful language. Performance impact:  None.Benefits:  More featureful language.Esthetics:  More featureful language.Discussion:  Note that some proposed features for telling whether two streams are  connected to the same source or sink of information have been removed  from this version of the proposal.  These were the functions  STREAM-SAME-SOURCE-P, STREAM-SAME-DESTINATION-P, STREAM-SOURCE-ID-LIST,  and STREAM-DESTINATION-ID-LIST.  These could be revived in another  proposal if desired, but Moon thought INTERACTIVE-STREAM-P was  important and didn't want it to be lost due to controversy over these   unrelated functions.*start*01090 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 24-May-89 10:11:20 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 24 MAY 89 09:29:58 PDTReceived: from lucid.com by SAIL.Stanford.EDU with TCP; 24 May 89  08:10:42 PDTReceived: from bhopal ([192.43.178.13]) by heavens-gate id AA06685g; Wed, 24 May 89 08:09:35 PDTReceived: by bhopal id AA13071g; Wed, 24 May 89 08:09:16 PDTDate: Wed, 24 May 89 08:09:16 PDTFrom: Jon L White <jonl@lucid.com>Message-Id: <8905241509.AA13071@bhopal>To: Moon@STONY-BROOK.SCRC.Symbolics.COMCc: CL-Cleanup@sail.stanford.eduIn-Reply-To: David A. Moon's message of Tue, 23 May 89 14:46 EDT <19890523184654.3.MOON@KENNETH-WILLIAMS.SCRC.Symbolics.COM>Subject: Issue: STREAM-CAPABILITIES (version 3)Looks simple enough.  The evidence would be compelling if the guyswho argued so long about fixing the sequence functions to have "re-usable" versions would lend their support as to the utilityof this thing.-- JonL --*start*02887 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 24-May-89 11:31:45 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 24 MAY 89 11:19:40 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 24 May 89  11:18:00 PDTReceived: from KENNETH-WILLIAMS.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via INTERNET with SMTP id 600016; 24 May 89 13:28:33 EDTDate: Wed, 24 May 89 13:32 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: STREAM-CAPABILITIESTo: chapman%aitg.DEC@decwrl.dec.comcc: CL-Cleanup@sail.stanford.eduIn-Reply-To: <8905241309.AA12009@decwrl.dec.com>Message-ID: <19890524173228.3.MOON@KENNETH-WILLIAMS.SCRC.Symbolics.COM>[Added back the CL-Cleanup mailing list]    Date: 24 May 89 06:28    From: chapman%aitg.DEC@decwrl.dec.com    >  Add the following function:    >     >    INTERACTIVE-STREAM-P stream    >     >    Returns T if the stream is interactive, otherwise NIL.  Signals    >    an error of type TYPE-ERROR if the argument is not a stream.    I thought that in most cases, if the argument to a function is not    of the right type, the results are unspecified, but if the implementation    were to signal an error, it would be of type TYPE-ERROR. Why is this    one different?I was under the impression that most functions "signal an error" forwrong type arguments, except for some that "should signal an error" forefficiency reasons, and some that "might signal an error" for implementationflexibility reasons.  Clearly neither of those reasons applies toINTERACTIVE-STREAM-P, which need not be extra fast and is not tightlycoupled to implementation data or control structures.  Hence I proposedit in the "signals an error" category.    Also, I think the "definition" of interactive later in this proposal is    too vague to be portably useful, unless, in the spec, we change the    wording from "Some examples of..." to "If a stream is... then it is     interactive" or something like that.It's not possible to make a specific definition of "interactive" thatapplies to all operating systems, I concluded from earlier discussion.However, "everyone knows" appoximately what it means.  Hence the ideaof describing it by example rather than defining it.Would it be better to take this alternate, minimalist approach:    INTERACTIVE-STREAM-P stream    If the argument is a stream, returns T or NIL at the discretion of the    implementation and its underlying operating system.  The general intent    is to distinguish between interactive and batch (or background or    command-file) operations.    Signals an error of type TYPE-ERROR if the argument is not a stream.    *TERMINAL-IO* might or might not be interactive.*start*01532 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 24-May-89 11:29:55 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 24 MAY 89 11:18:54 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 24 May 89  11:17:34 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 600032; 24 May 89 13:49:16 EDTDate: Wed, 24 May 89 13:49 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: STREAM-CAPABILITIES (version 3), or Issue: MAP-INTO (version 1)To: jonl@lucid.comcc: Moon@STONY-BROOK.SCRC.Symbolics.COM, CL-Cleanup@sail.stanford.eduIn-Reply-To: <8905241509.AA13071@bhopal>Message-ID: <19890524174912.1.KMP@BOBOLINK.SCRC.Symbolics.COM>    Date: Wed, 24 May 89 08:09:16 PDT    From: Jon L White <jonl@lucid.com>    To: Moon@STONY-BROOK.SCRC.Symbolics.COM    Cc: CL-Cleanup@sail.stanford.edu    In-Reply-To: David A. Moon's message of Tue, 23 May 89 14:46 EDT 		 <19890523184654.3.MOON@KENNETH-WILLIAMS.SCRC.Symbolics.COM>    Subject: Issue: STREAM-CAPABILITIES (version 3)    Looks simple enough.  The evidence would be compelling if the guys    who argued so long about fixing the sequence functions to have     "re-usable" versions would lend their support as to the utility    of this thing.    -- JonL --This is really a reply to Moon's MAP-INTO proposal in disguise, right?*start*01046 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 25-May-89 13:08:38 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 25 MAY 89 13:05:55 PDTReceived: from lucid.com by SAIL.Stanford.EDU with TCP; 25 May 89  13:03:49 PDTReceived: from bhopal ([192.43.178.13]) by heavens-gate id AA01143g; Thu, 25 May 89 13:01:17 PDTReceived: by bhopal id AA16119g; Thu, 25 May 89 13:00:59 PDTDate: Thu, 25 May 89 13:00:59 PDTFrom: Jon L White <jonl@lucid.com>Message-Id: <8905252000.AA16119@bhopal>To: KMP@STONY-BROOK.SCRC.Symbolics.COMCc: Moon@STONY-BROOK.SCRC.Symbolics.COM, CL-Cleanup@sail.stanford.eduIn-Reply-To: Kent M Pitman's message of Wed, 24 May 89 13:49 EDT <19890524174912.1.KMP@BOBOLINK.SCRC.Symbolics.COM>Subject: Issue: STREAM-CAPABILITIES (version 3), or Issue: MAP-INTO (version 1)re: This is really a reply to Moon's MAP-INTO proposal in disguise, right?Oh, gleep, yes.  My apologies.-- JonL --*start*00848 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 13-Jun-89 15:35:06 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 13 JUN 89 15:34:51 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 13 Jun 89  15:24:59 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 610829; 13 Jun 89 18:26:49 EDTDate: Tue, 13 Jun 89 18:26 EDTFrom: Kim Barrett <IIM@ECLA.USC.EDU>Sender: KMP@STONY-BROOK.SCRC.Symbolics.COMSubject: Issue: STREAM-CAPABILITIES (Version 3)To: CL-Cleanup@SAIL.Stanford.EDUComments: Received from Kim Barrett by KMP on MSDOS floppy disk via US MailMessage-ID: <19890613222639.2.KMP@BOBOLINK.SCRC.Symbolics.COM>Ok.*start*04602 00024 US GV-Info: X3J13-mailer@SAIL.Stanford.EDU at 19-Jun-89 09:34:42 from AGReturn-Path: <X3J13-mailer@SAIL.Stanford.EDU>Received: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 19 JUN 89 09:34:47 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 19 Jun 89  09:21:57 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 612966; 19 Jun 89 12:23:35 EDTDate: Mon, 19 Jun 89 12:24 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Reply-To: CL-Cleanup@sail.stanford.eduSubject: Issue: STREAM-CAPABILITIES (version 3)To: X3J13@sail.stanford.eduMessage-ID: <19890619162413.5.MOON@EUPHRATES.SCRC.Symbolics.COM>This is an old issue.  KMP and I have prepared a revised writeup whichwe think is ready for release.Issue:         STREAM-CAPABILITIESReferences:    Standard streams (pp. 327-329)Category:      ADDITIONEdit history:  Version 1 by Pierson 5-Jul-88, add redesign per Pitman               Version 2 by Moon, 10-May-89, remove controversial parts               Version 3 by Moon, 12-May-89, improve wording and examplesProblem description:  Programs cannot currently distinguish between interactive use and batch  (or background) use without using implementation-dependent extensions.  For example, there is currently no way to tell whether it is useful to  ask a question when an unexpected situation is encountered.  Note: earlier versions of this issue tried to solve another problem  as well.  See discussion section.Proposal (STREAM-CAPABILITIES:INTERACTIVE-STREAM-P):  Add the following function:    INTERACTIVE-STREAM-P stream    Returns T if the stream is interactive, otherwise NIL.  Signals    an error of type TYPE-ERROR if the argument is not a stream.    The precise meaning of INTERACTIVE-STREAM-P is implementation    dependent, and may depend on the underlying operating system.  However    the general intent is to distinguish between interactive and batch (or    background or command-file) operations.    Some examples of the things that might identify a stream as interactive    include:       1. The stream is connected to a person (or equivalent) in          such a way that the program can prompt for information and          expect to receive different input depending on the prompt.       2. The program is expected to prompt for input and support          "normal input editing".       3. READ-CHAR might hang waiting for the user to type something          instead of quickly returning a character or EOF.    *TERMINAL-IO* might or might not be interactive.Examples:  (when (> measured limit)    (let ((error (round (* (- measured limit) 100)                        limit)))      (unless (if (interactive-stream-p *query-io*)                  (yes-or-no-p "The frammis is out of tolerance by ~D%.~@                                Is it safe to proceed? " error)                  (< error 15))  ;15% is acceptable        (error "The frammis is out of tolerance by ~D%." error))))Rationale:  INTERACTIVE-STREAM-P has been proposed several times and is clearly  needed by any program that alters its behavior depending on whether  it is interacting with a user or running in a "batch" mode.Current practice:  Most implementations have this feature already, often under a  different name.Cost to Implementors:  Implementations will have to support this new function.  Correct support  will require some thought for each operating system supported.Cost to Users:  None, this is an upward-compatible extension.Cost of non-adoption:  Less featureful language. Performance impact:  None.Benefits:  More featureful language.Esthetics:  More featureful language.Discussion:  It's not possible to make a specific definition of "interactive" that  applies to all operating systems, we concluded from earlier discussion.  However, "everyone knows" appoximately what it means.  Hence the idea  of describing it by example rather than defining it.  Note that some proposed features for telling whether two streams are  connected to the same source or sink of information have been removed  from this version of the proposal.  These were the functions  STREAM-SAME-SOURCE-P, STREAM-SAME-DESTINATION-P, STREAM-SOURCE-ID-LIST,  and STREAM-DESTINATION-ID-LIST.  These could be revived in another  proposal if desired, but Moon thought INTERACTIVE-STREAM-P was  important and didn't want it to be lost due to controversy over these   unrelated functions.