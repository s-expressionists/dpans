*start*02200 00024 USaReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 31 AUG 88 21:12:46 PDTReceived: from XX.LCS.MIT.EDU by SAIL.Stanford.EDU with TCP; 31 Aug 88  21:12:49 PDTDate: Wed, 31 Aug 88 15:25:52 EDTFrom: Michael J. Beckerle <BECKERLE@XX.LCS.MIT.EDU>Subject: list type cleanupTo: cl-cleanup@sail.stanford.educc: beckerle@XX.LCS.MIT.EDUMessage-ID: <12426886415.53.BECKERLE@XX.LCS.MIT.EDU>Issue:		LIST-TYPE-SPECIFIERReferences:     CLtL, pg 26, 27, 43.Category: 	Compatible ChangeEdit History:   v0 28june88  mike beckerleProblem Description:There is a need in common lisp for more accurate type specifiersfor lists. In particular, there is no way to expressthe type of a list having particular element types.Resolving this issue will help resolve FUNCTION-TYPE-REST-LIST-ELEMENT.Proposal: LIST-TYPE-EXTENDED(1) The LIST type specifier would be extended to allow specification of arguments. e.g.,(typep x 'list)  => unchanged from current meaning(typep x '(list <subtype>)) == (and (typep x 'list)                                    (typep (car x) <subtype>))(typep x '(list <s1> <s2> ... <sN>)) ==        (and (typep x 'list)             (typep (car x) <s1>)             (typep (cadr x) <s2>)             ...             (typep (car (last x)) <sN>))Hence, the LIST type specifier is extended to allow specification of thetypes of the arguments.(2) A new type specifier is added: LIST-OF.(typep x 'LIST-OF) = error.(typep x '(list-of <elttype>)) == (and (typep x 'list)	                               (dolist (elem x T)				         (unless (typep x <elttype>)                                            (return nil))))Discussion:The addition of these type specifiers allows resolution of theFUNCTION-TYPE-REST-LIST-ELEMENT proposal in a way which will allowtype-specifiers to still be highly specific about the types of elements passed in &rest arguments.In particular, (function (&rest (list-of number)) number), can bedistinguished from (function (&rest (list complex fixnum bignum))number).					       -------*start*01230 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 13 SEP 88 07:03:36 PDTReceived: from decwrl.dec.com by SAIL.Stanford.EDU with TCP; 13 Sep 88  07:03:08 PDTReceived: by decwrl.dec.com (5.54.5/4.7.34)	id AA24506; Tue, 13 Sep 88 07:01:53 PDTDate: Tue, 13 Sep 88 07:01:53 PDTMessage-Id: <8809131401.AA24506@decwrl.dec.com>From: vanroggen%aitg.DEC@decwrl.dec.comTo: cl-cleanup@sail.stanford.eduSubject: Issue: LIST-TYPE-SPECIFIERActually, I'd prefer exchanging the proposed type names, so that(LIST *) could be abbreviated as (LIST) could be abbreviated as LIST,just as for arrays, and with the same meaning regarding element types.There's still the issue of what specialized list or array type specifiersmeans.  Assuming the proposal regarding array element type upgrading(what's the latest on this, btw?) I could see specialized LIST typespecifiers in the same way, with the automatic upgrading of the elementtype to T in all (!?) current implementations.Do we need another cleanup issue on whether (ARRAY foo) implies(TYPEP (AREF x i) 'foo), just as this issue specifies?			---Walter*start*02244 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 17 SEP 88 15:19:26 PDTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 17 Sep 88  15:19:18 PDTReceived: from Cabernet.ms by ArpaGateway.ms ; 17 SEP 88 15:17:31 PDTDate: 17 Sep 88 15:17 PDTFrom: masinter.paSubject: Issue: LIST-TYPE-SPECIFIER (Version 1)In-reply-to: Michael J. Beckerle <BECKERLE@XX.LCS.MIT.EDU>'s message of Wed, 31  Aug 88 15:25:52 EDTTo: Michael J. Beckerle <BECKERLE@XX.LCS.MIT.EDU>cc: cl-cleanup@sail.stanford.eduSupercedes: <880917-151119-2438@Xerox>Message-ID: <880917-151731-2443@Xerox><change message subject to be consistent with the way that I've asked people to send them....>While this seems to be useful functionality, there is a difference between theLIST type specifiers and the ARRAY type specifiers in that the type of a LISTobject is mutable, e.g.,(typep x '(list number))(setf (car y) t)(typep x '(list number))is false, while normally, for built in type designators that do not involveSATISFIES, no side effect operation (other than changing the direct binding ofX) can affect the value of TYPEP for that binding.Given the mutability of the type designators, I question your assertion "Thereis a need in common lisp for more accurate type specifiersfor lists."I can believe there is a need for a general database interface, and also for aportable window system.However, I'm not sure I can admit to knowing what the need here is without someexamples of how it might be used, and where the proposed use is more reasonable,efficient than the alternative  (would you advocate programers say(typep x '(list number symbol)) instead of (and (listp x) (numberp (car x)) (symbolp (cadr x)))?Should it check (null (cddr x))?Should it be written(and (consp x) (numberp (car x)) (consp (cdr x)) (symbolp (cadr x)) (null (cddrx))) ?I guess I would call it ADDITION instead of COMPATIBLE CHANGE. The distinctionbetween a CHANGE and an ADDITION in my mind is whether it makes the language(its description and its implementation) smaller or larger.     ----- End Forwarded Messages -----*start*01599 00024 US Return-Path: <eb@lucid.com>Received: from lucid.com ([192.26.25.1]) by Xerox.COM ; 17 SEP 88 16:47:35 PDTReceived: from blacksox ([192.9.201.39]) by heavens-gate.lucid.com id AA02713g; Sat, 17 Sep 88 15:46:53 PSTReceived: by blacksox id AA00896g; Sat, 17 Sep 88 16:44:31 pdtDate: Sat, 17 Sep 88 16:44:31 pdtFrom: Eric Benson <eb@lucid.com>Message-Id: <8809172344.AA00896@blacksox>To: masinter.paCc: BECKERLE@XX.LCS.MIT.EDU, cl-cleanup@sail.stanford.eduIn-Reply-To: masinter.pa@Xerox.COM's message of 17 Sep 88 15:17 PDT <880917-151731-2443@Xerox>Subject: Issue: LIST-TYPE-SPECIFIER (Version 1)   Date: 17 Sep 88 15:17 PDT   From: masinter.pa@Xerox.COM   While this seems to be useful functionality, there is a difference between the   LIST type specifiers and the ARRAY type specifiers in that the type of a LIST   object is mutable, e.g.,   (typep x '(list number))   (setf (car y) t)   (typep x '(list number))   is false, while normally, for built in type designators that do not involve   SATISFIES, no side effect operation (other than changing the direct binding of   X) can affect the value of TYPEP for that binding.If there is going to be an element-type-specialized LIST typespecifier, it should be handled in the same way aselement-type-specialized ARRAY type specifiers.  Conceivably, animplementation could have a special CONS type whose CARs could onlycontain elements of a certain type, if such list type specifiersexisted.  Isn't there an outstanding cleanup issue regarding arraytypes?  Can you send out the latest version?*start*01426 00024 USaReturn-Path: <Rob.MacLachlan@fred.slisp.cs.cmu.edu>Received: from FRED.SLISP.CS.CMU.EDU ([128.2.250.114]) by Xerox.COM ; 18 SEP 88 08:10:26 PDTReceived: from FRED.SLISP.CS.CMU.EDU by FRED.SLISP.CS.CMU.EDU; 18 Sep 88 11:09:40 EDTTo: Eric Benson <eb@lucid.com>cc: masinter.pa, BECKERLE@XX.LCS.MIT.EDU, cl-cleanup@sail.stanford.eduSubject: Re: Issue: LIST-TYPE-SPECIFIER (Version 1) In-reply-to: Your message of Sat, 17 Sep 88 16:44:31 -0700.             <8809172344.AA00896@blacksox> Date: Sun, 18 Sep 88 11:09:11 EDTFrom: Rob.MacLachlan@WB1.CS.CMU.EDUI agree that it makes sense for a specialized LIST type specifier to beanalogous to ARRAY type specifiers.  But this would imply a dramaticallydifferent semantics for LIST type discrimination than the one suggested inthe original proposal.With array types, only the specalized types chosen by the implementationare distinct.  TYPEP cannot distinguish (on the basis of element type)between two arrays that were made with different types, but that specializeto the same type.  If (as is probably the case) there is only onespecialized list type, then lists cannot be discriminated at all.But (if you choose the right array type cleanup) specialized list typeswould be useful for declaration, since an implementation *might* havearbitrary specialized list types:    (typep (elt (the (list number) foo) 3) 'number)  <=>  T  Rob*start*01303 00024 US Date:  5 Oct 88 01:06 PDTFrom: masinter.paSubject: Re: Issue: LIST-TYPE-SPECIFIER (Version 1) In-reply-to: Rob.MacLachlan@WB1.CS.CMU.EDU's message of Sun, 18 Sep 88 11:09:11 EDTTo: Rob.MacLachlan@WB1.CS.CMU.EDUcc: Eric Benson <eb@lucid.com>, masinter.pa, BECKERLE@XX.LCS.MIT.EDU, cl-cleanup@sail.stanford.eduI'm confident that Michael had no intention of proposing that there be a new type (LIST NUMBER)  of CONS whose CAR could only point to FIXNUM and whose CDR could only point to NIL or (LIST NUMBER).This is evident from the examples:(typep x '(list <subtype>)) == (and (typep x 'list)                                    (typep (car x) <subtype>))From a purist point of view, it might be deplorable that (LIST NUMBER) mean something radically different than (VECTOR NUMBER). From a practical point of view, this might be a minor inconsistency, especially in the context of the rest of Common Lisp. Lists are mutable and can hold any type; vectors are only mutable in fixed ways and can hold restricted types.While I'm mildly opposed to such a proposal on the grounds that it is not a useful addition, I would be even more strongly opposed to a proposal to add a LIST type designator that made LIST have the same awkward subtype semantics that ARRAY does.*start*02062 00024 USaReturn-Path: <KMP@STONY-BROOK.SCRC.Symbolics.COM>Received: from STONY-BROOK.SCRC.Symbolics.COM ([128.81.41.144]) by Xerox.COM ; 06 OCT 88 00:17:33 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 471553; Thu 6-Oct-88 03:16:48 EDTDate: Thu, 6 Oct 88 03:16 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: LIST-TYPE-SPECIFIER (Version 1)To: Beckerle@XX.LCS.MIT.EDU, Masinter.PAcc: eb@Lucid.COM, CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <12426886415.53.BECKERLE@XX.LCS.MIT.EDU>,             <8809172344.AA00896@blacksox>Message-ID: <881006031630.0.KMP@BOBOLINK.SCRC.Symbolics.COM>Count me as wanting the LIST type specifier to treat its arguments likethe ARRAY type specifier.Although it's true the ARRAY type specifier is a mess, it would onlybe emphasized by something so syntactically similar as this behaving soradically differently.Strange as it sounds, I might be susceptible to a proposal for (LIST-OFFIXNUM FLOAT) to mean what (LIST FIXNUM FLOAT) is proposed to mean andvice versa. I don't think there's anything about LIST-OF which reallyforces the suggested interpretation. That way, the same functionalitywould be available and things would be more consistent. ... or maybeLIST-CONTAINING.If this feature of enumerated types is going to be added for lists, though,perhaps it would be useful for vectors and arrays, too. Just as we canspecify array values using #(...) and #A notation, maybe we should be ableto type them that way as well. There are two possible approaches: (LIST-CONTAINING   (FIXNUM FLOAT)) (VECTOR-CONTAINING (FIXNUM SYMBOL)) (ARRAY-CONTAINING  ((FIXNUM FLOAT) (T SYMBOL)))or (CONTAINER (FIXNUM FLOAT)) (CONTAINER #(FIXNUM SYMBOL)) (CONTAINER #2A((FIXNUM FLOAT) (T SYMBOL)))Unfortunately, this whole topic is so hard to think about, I don't claimI can keep it all in my head. I might have other criticisms if I saw aproposal drafted that way ... but I'd think we were making progress.*start*01117 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 07 OCT 88 16:43:34 PDTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 7 Oct 88  16:42:57 PDTReceived: from Semillon.ms by ArpaGateway.ms ; 07 OCT 88 16:30:38 PDTDate: 7 Oct 88 16:28 PDTFrom: masinter.paSubject: Re: Issue: LIST-TYPE-SPECIFIER (Version 1)In-reply-to: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>'s message of Thu, 6 Oct 88 03:16 EDTTo: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: Beckerle@XX.LCS.MIT.EDU, Masinter.PA, eb@Lucid.COM, CL-Cleanup@SAIL.Stanford.EDUMessage-ID: <881007-163038-1367@Xerox>I don't this can be released with such divergent views on what it does. It would help to talk about the generic capabilities of the type specifiersindependently of their names. I'm not sure that either of the kinds of typespecifiers people want to add make sense, whether you have to have a newkind of CONS cell or whether it really talks about the old kind.For discussion on Monday.*start*01161 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 13 OCT 88 19:22:16 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 13 Oct 88  15:36:14 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 476042; Thu 13-Oct-88 18:33:50 EDTDate: Thu, 13 Oct 88 18:33 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: LIST-TYPE-SPECIFIER (Version 1)To: CL-Cleanup@SAIL.Stanford.EDUMessage-ID: <881013183340.1.KMP@BOBOLINK.SCRC.Symbolics.COM>My notes from Fairfax meeting...Cleanup meeting: Needs work. Masinter sees two orthogonal issues: functionality to provide, names to use. To be returned to author (Beckerle) for re-draft. [I expect Masinter to take care of the reminding. -kmp]X3J13 meeting: Beckerle: The idea was to have a way of using lists like record structures --   	   structures with a fixed number of slots with known types. RWK: Related to FUNCTION-TYPE-REST-LIST-ELEMENT.*start*02395 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 23 NOV 88 11:03:34 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 23 Nov 88  11:02:18 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 23 NOV 88 10:55:54 PSTDate: 23 Nov 88 10:55 PSTFrom: masinter.paSubject: Issue: LIST-TYPE-SPECIFIER (Version 1)In-reply-to: Michael J. Beckerle <BECKERLE@XX.LCS.MIT.EDU>'s message of Wed, 31 Aug 88 15:25:52 EDTTo: Michael J. Beckerle <BECKERLE@XX.LCS.MIT.EDU>cc: cl-cleanup@sail.stanford.eduMessage-ID: <881123-105554-12679@Xerox>Michael J. Beckerle:Please reply if you get this... If you want to pursue this, can you producea new draft of the proposal quickly? Please let us know what your scheduleis.The summary so far is that there are possibly two kinds of type specifiersyntax:(<list-consisting-of-all> NUMBER)	for example, (1 2 12323)(<list-with-explicit-elements> NUMBER SYMBOL)	for example, (1 A)For the second type of description, there are some design choices aboutwhether "extra" arguments are legal, e.g., is(typep '(1 A 3) '(<list-with-explicit-elements> NUMBER SYMBOL)) valid? There might be a possibility of using the function argument listnotation, e.g.,(<list-with-explicit-elements> NUMBER SYMBOL &KEY (:FROB NUMBER)&ALLOW-OTHER-KEYS)which would lead to the recursive ambiguity of (<list-with-explicit-elements> &REST (<list-with-explicit-elements>NUMBER))(:->)- - - - - - - -For whatever additional type descriptors one might add, the question couldbe whether an implementation which had a new kind of LIST which was notread-only and not completely writable, but for which it would be an errorto modify the structure of the list so that it no longer conformed to apredefined type specification.This proposal would interact with TYPE-OF-UNDERSPECIFIED (would (TYPE-OF'(1 2)) be allowed to return (<list-with-explicit-elements> (MEMBER 1)(MEMBER 2))?)Given the desired semantics, there is then some debate about what the*name* of the type specifiers might be; the proposed names LIST and LIST-OFcould arguably be applied to either kind of specifier.I not personally  inclined to pursue this issue. The fact that there is afeature that several people want is not one of the more serious ones.*start*00441 00024 USfReturn-Path: <mikeb@boston.goldhill.com>Received: from goldhill.com ([128.168.1.211]) by Xerox.COM ; 29 NOV 88 08:05:42 PSTReceived: from BOSTON.GOLDHILL.COM by goldhill.com; Tue, 29 Nov 88 10:49:54 ESTMessage-Id: <8811291549.AA12760@goldhill.com>Date: Tue, 29 Nov 88 10:49:17From: mikeb@boston.goldhill.comTo: masinter.PALarry,  I am not inclined to pursue list-type-specifier further....mike beckerle*start*01170 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 29 NOV 88 10:50:14 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 29 Nov 88  10:49:41 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 29 NOV 88 10:45:32 PSTDate: 29 Nov 88 10:44 PSTFrom: masinter.paSubject: Issue: LIST-TYPE-SPECIFIER (version 1)To: cl-cleanup@sail.stanford.eduMessage-ID: <881129-104532-5426@Xerox>Since Mike Beckerle has declined to pursue this issue, it will need anothervolunteer to produce a new version; otherwise I will mark it as"withdrawn".     ----- Begin Forwarded Messages -----Return-Path: <mikeb@boston.goldhill.com>Received: from goldhill.com ([128.168.1.211]) by Xerox.COM ; 29 NOV 8808:05:42 PSTReceived: from BOSTON.GOLDHILL.COM by goldhill.com; Tue, 29 Nov 88 10:49:54ESTMessage-Id: <8811291549.AA12760@goldhill.com>Date: Tue, 29 Nov 88 10:49:17From: mikeb@boston.goldhill.comTo: masinter.PALarry,  I am not inclined to pursue list-type-specifier further....mike beckerle     ----- End Forwarded Messages -----