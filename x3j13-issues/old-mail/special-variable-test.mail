*start*03994 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU by Xerox.COM ; 07 MAR 88 10:33:17 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 7 Mar 88  10:30:03 PSTReceived: from RIO-DE-JANEIRO.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 357557; Mon 7-Mar-88 13:30:18 ESTDate: Mon, 7 Mar 88 13:29 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: SPECIAL-VARIABLE-TEST (Version 1)To: CL-Cleanup@SAIL.Stanford.EDUMessage-ID: <880307132956.0.KMP@RIO-DE-JANEIRO.SCRC.Symbolics.COM>Issue:        SPECIAL-VARIABLE-TESTReferences:   Declaring Global Variables and Named Constants (pp68-69),	      Declaration Specifiers (p157)Category:     ADDITIONEdit history: 07-Mar-88, Version 1 by PitmanStatus:	      For Internal DiscussionProblem Description:  CLtL does not define a way to test to see if a variable has been  proclaimed special.  Programs such as macros, code-walkers, and program-generating programs  may need such information from time to time in order to do certain kinds  of reasoning about code-motion, unused variables, etc.Proposal (SPECIAL-VARIABLE-TEST:SPECIALP)  Add a function SPECIAL-VARIABLE-P by analogy with SPECIAL-FORM-P  which is defined as:  SPECIAL-VARIABLE-P symbol &optional environment	[Function]  Returns T iff -symbol- names a variable which is SPECIAL in the  indicated lexical -environment-. Otherwise, it returns NIL.  It is an error if -symbol- is not a symbol. If not supplied, the  -environment- defaults to NIL, meaning the null lexical environment.Test Case:  (PROCLAIM '(SPECIAL SPECIAL-FOO))  (MACROLET ((TEST (NAME &ENVIRONMENT ENV)               `(,NAME ',(SPECIAL-VARIABLE-P NAME ENV))))    (LIST* (TEST SPECIAL-FOO)				        ;0	   (TEST FOO)	   (LET ((SPECIAL-FOO 1) (FOO 1))	     (LIST* (TEST SPECIAL-FOO)				;1		    (TEST FOO)		    (LET ((SPECIAL-FOO 2) (FOO 2))		      (DECLARE (SPECIAL FOO))		      (LIST* (TEST SPECIAL-FOO)			;2			     (TEST FOO)			     (LET ((SPECIAL-FOO 3) (FOO 3))			       (LIST (TEST SPECIAL-FOO)		;3				     (TEST FOO)))))))))  => ((SPECIAL-FOO T) (FOO NIL)			;0      (SPECIAL-FOO T) (FOO NIL)			;1      (SPECIAL-FOO T) (FOO T)			;2      (SPECIAL-FOO T) (FOO NIL))		;3Rationale:  This would allow programs that reason about other programs to obtain  important information about SPECIAL declarations and proclamations.Current Practice:  Interpreters and compilers must, of necessity, have a way to do this  internally.  In some implementations, information about special variable proclamations  is kept on a symbol's plist, and users eventually "figure out" how to take  advantage of that.  In most implementations, getting information about special declarations  is neither documented nor easy to "figure out".Cost to Implementors:  By necessity, compilers and interpreters must have a way to get the  information returned by this facility. In general, it should just be  a matter of providing a program interface to that facility.Cost to Users:  None. This is an upward-compatible extension.Cost of Non-Adoption:  Some code-walkers, macros, etc. would continue be hard to write in a  portable way.Benefits:  The cost of non-adoption would be avoided.Aesthetics:  Although SPECIAL variables provide some benefit to Common Lisp, that   benefit has not been without price. It's difficult to do proper code  analysis if lexical and special variables look the same. The presence  of this operator makes it easier to write code which reasons clearly  and correctly about other programs, and so will probably tend to  improve the aesthetics of such programs.Discussion:  This proposal came to the Cleanup committee from the Japanese community.  Pitman wrote it up formally and supports SPECIAL-VARIABLE-TEST:SPECIALP.*start*02345 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU by Xerox.COM ; 07 MAR 88 11:02:31 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 7 Mar 88  10:59:49 PSTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 357594; Mon 7-Mar-88 14:00:08 ESTDate: Mon, 7 Mar 88 13:59 ESTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: SPECIAL-VARIABLE-TEST (Version 1)To: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: CL-Cleanup@SAIL.STANFORD.EDUIn-Reply-To: <880307132956.0.KMP@RIO-DE-JANEIRO.SCRC.Symbolics.COM>Supersedes: <19880307184333.9.MOON@EUPHRATES.SCRC.Symbolics.COM>Comments: I noticed an overlooked issue after sending this message the first time.Message-ID: <19880307185953.0.MOON@EUPHRATES.SCRC.Symbolics.COM>I approve of SPECIAL-VARIABLE-TEST:SPECIALP (except why isn'tthe proposal named SPECIAL-VARIABLE-TEST:SPECIAL-VARIABLE-P ?)For the current practice section: Symbolics Genera has a functionnamed SYS:SPECIAL-VARIABLE-P that does this.  The function is notdocumented, currently, probably because we've been waiting to seeif Common Lisp standardizes on a different name.After looking at our SYS:SPECIAL-VARIABLE-P, I note a possible oversightin this proposal.  With Common Lisp, as opposed to Zetalisp, scopingrules for SPECIAL declarations, there are two distinct questions one canask about the declaration of a variable.  One is, "would a reference tothis variable in this environment be special?".  The second is, "would abinding of this variable in this environment be special?".  The proposalonly answers the first question.The second question is a little harder because you need to figure outhow to feed local declarations attached to the binding to the predicate.I suggest a very simple solution: to ask the second question, onesupplies NIL as the environment, which accesses the proclamationswithout the declarations, and then one handles manually any localdeclarations attached to the binding.  This is minimalist but shoulddo the job.  The proposal doesn't need any technical changes for this,but should include a brief mention of this issue and the solution.*start*01014 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU by Xerox.COM ; 07 MAR 88 10:42:32 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 7 Mar 88  10:40:34 PSTReceived: from RIO-DE-JANEIRO.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via INTERNET with SMTP id 357573; 7 Mar 88 13:40:46 ESTDate: Mon, 7 Mar 88 13:40 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: SPECIAL-VARIABLE-TEST (Version 1)To: KMP@STONY-BROOK.SCRC.Symbolics.COMcc: CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <880307132956.0.KMP@RIO-DE-JANEIRO.SCRC.Symbolics.COM>Message-ID: <880307134024.1.KMP@RIO-DE-JANEIRO.SCRC.Symbolics.COM>That should have been `'(,NAME ,(SPECIAL-VARIABLE-P NAME ENV))	  rather than `(,NAME ',(SPECIAL-VARIABLE-P NAME ENV))in the test case, of course. Sorry about that. Whoever does the nextdraft should make that correction.*start*01181 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU by Xerox.COM ; 07 MAR 88 10:46:12 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 7 Mar 88  10:43:42 PSTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 357577; Mon 7-Mar-88 13:44:05 ESTDate: Mon, 7 Mar 88 13:43 ESTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: SPECIAL-VARIABLE-TEST (Version 1)To: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: CL-Cleanup@SAIL.STANFORD.EDUIn-Reply-To: <880307132956.0.KMP@RIO-DE-JANEIRO.SCRC.Symbolics.COM>Message-ID: <19880307184333.9.MOON@EUPHRATES.SCRC.Symbolics.COM>I approve of SPECIAL-VARIABLE-TEST:SPECIALP (except why isn'tthe proposal named SPECIAL-VARIABLE-TEST:SPECIAL-VARIABLE-P ?)For the current practice section: Symbolics Genera has a functionnamed SYS:SPECIAL-VARIABLE-P that does this.  The function is notdocumented, currently, probably because we've been waiting to seeif Common Lisp standardizes on a different name.*start*04209 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU by Xerox.COM ; 07 MAR 88 12:35:25 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 7 Mar 88  12:32:39 PSTReceived: from RIO-DE-JANEIRO.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 357713; Mon 7-Mar-88 15:33:00 ESTDate: Mon, 7 Mar 88 15:32 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: SPECIAL-VARIABLE-TEST (Version 1)To: Moon@STONY-BROOK.SCRC.Symbolics.COMcc: KMP@STONY-BROOK.SCRC.Symbolics.COM, CL-Cleanup@SAIL.STANFORD.EDUIn-Reply-To: <19880307185953.0.MOON@EUPHRATES.SCRC.Symbolics.COM>Message-ID: <880307153239.3.KMP@RIO-DE-JANEIRO.SCRC.Symbolics.COM>    Date: Mon, 7 Mar 88 13:59 EST    From: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>    ... why isn't the proposal named SPECIAL-VARIABLE-TEST:SPECIAL-VARIABLE-P ...Editing error. I changed the name from SPECIALP to SPECIAL-VARIABLE-Pwhile evolving the proposal and didn't make the change completely enough.For clarity, someone should change it in the next draft.    For the current practice section: Symbolics Genera has a function    named SYS:SPECIAL-VARIABLE-P that does this.  The function is not    documented, currently, probably because we've been waiting to see    if Common Lisp standardizes on a different name.    After looking at our SYS:SPECIAL-VARIABLE-P, I note a possible oversight    in this proposal.  With Common Lisp, as opposed to Zetalisp, scoping    rules for SPECIAL declarations, there are two distinct questions one can    ask about the declaration of a variable.  One is, "would a reference to    this variable in this environment be special?".  The second is, "would a    binding of this variable in this environment be special?".  The proposal    only answers the first question.    The second question is a little harder because you need to figure out    how to feed local declarations attached to the binding to the predicate.    I suggest a very simple solution: to ask the second question, one    supplies NIL as the environment, which accesses the proclamations    without the declarations, and then one handles manually any local    declarations attached to the binding.  This is minimalist but should    do the job.  The proposal doesn't need any technical changes for this,    but should include a brief mention of this issue and the solution.This sounds mostly ok, though we'd need to be clear about which of thesean appropriate type-2 call to SPECIAL-VARIABLE-P looked like: 1. (SPECIAL-VARIABLE-P 'FOO '((DECLARE (SPECIAL X) (FIXNUM X))			       (DECLARE (SPECIAL Y)))) 2. (SPECIAL-VARIABLE-P 'FOO '(DECLARE (SPECIAL X) (FIXNUM X) (SPECIAL Y))) 3. (SPECIAL-VARIABLE-P 'FOO '(((SPECIAL X) (FIXNUM X)) ((SPECIAL Y)))) 4. (SPECIAL-VARIABLE-P 'FOO '((SPECIAL X) (FIXNUM X) (SPECIAL Y))) 5. (SPECIAL-VARIABLE-P 'FOO '(X Y))1, 4, and 5 look ok to me. 1 seems like it would be easiest to arrangefor in practice, and hence perhaps the best choice.I note also that this only works because special bindings are notpervasive. If they were not, you'd have to have the environment argumentalso. In philosophy courses I've taken, we'd say it is "true" that theenvironment is not needed, but it is not "necessarily true" (i.e., thereexist consistent, possible universes in which it is not true). Forimplementational flexibility in case anyone -wants- pervasive bindings(as an, arguably incompatible, extension) or in case we later want tochange the language, it might be cleaner to say (SPECIAL-VARIABLE-P 'FOO ENV '(...decls...))and to mention to implementors that in fact the ENV may be ignored if thedecls are passed. It's especially interesting in the case of   (SPECIAL-VARIABLE-P 'FOO NIL) ;null environmentvs (SPECIAL-VARIABLE-P 'FOO '()) ;no declsbecause these both do the same thing but for completely different reasons.It really stretches the pun to unreasonable lengths. I'd be content torewrite the proposal to accomodate this additional issue if othersconcurred.*start*01192 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU by Xerox.COM ; 07 MAR 88 13:28:59 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 7 Mar 88  13:26:32 PSTReceived: from RIO-DE-JANEIRO.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 357786; Mon 7-Mar-88 16:26:49 ESTDate: Mon, 7 Mar 88 16:26 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: SPECIAL-VARIABLE-TEST (Version 1)To: Moon@STONY-BROOK.SCRC.Symbolics.COMcc: KMP@STONY-BROOK.SCRC.Symbolics.COM, CL-Cleanup@SAIL.STANFORD.EDUIn-Reply-To: <19880307205356.5.MOON@EUPHRATES.SCRC.Symbolics.COM>Message-ID: <880307162627.6.KMP@RIO-DE-JANEIRO.SCRC.Symbolics.COM>    Date: Mon, 7 Mar 88 15:53 EST    From: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>    ...    Huh?  I was proposing that the second argument to SPECIAL-VARIABLE-P    would be NIL and the caller would have to do his own declaration parsing.    Thus (OR (SPECIAL-VARIABLE-P var NIL) (MEMBER var parsed-special-dcls)).Oh, I see. This is fine.*start*03136 00024 USaReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU by Xerox.COM ; 07 MAR 88 12:56:21 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 7 Mar 88  12:53:42 PSTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 357734; Mon 7-Mar-88 15:54:07 ESTDate: Mon, 7 Mar 88 15:53 ESTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: SPECIAL-VARIABLE-TEST (Version 1)To: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: CL-Cleanup@SAIL.STANFORD.EDUIn-Reply-To: <880307153239.3.KMP@RIO-DE-JANEIRO.SCRC.Symbolics.COM>Message-ID: <19880307205356.5.MOON@EUPHRATES.SCRC.Symbolics.COM>    Date: Mon, 7 Mar 88 15:32 EST    From: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>	Date: Mon, 7 Mar 88 13:59 EST	From: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>	After looking at our SYS:SPECIAL-VARIABLE-P, I note a possible oversight	in this proposal.  With Common Lisp, as opposed to Zetalisp, scoping	rules for SPECIAL declarations, there are two distinct questions one can	ask about the declaration of a variable.  One is, "would a reference to	this variable in this environment be special?".  The second is, "would a	binding of this variable in this environment be special?".  The proposal	only answers the first question.	The second question is a little harder because you need to figure out	how to feed local declarations attached to the binding to the predicate.	I suggest a very simple solution: to ask the second question, one	supplies NIL as the environment, which accesses the proclamations	without the declarations, and then one handles manually any local	declarations attached to the binding.  This is minimalist but should	do the job.  The proposal doesn't need any technical changes for this,	but should include a brief mention of this issue and the solution.    This sounds mostly ok, though we'd need to be clear about which of these    an appropriate type-2 call to SPECIAL-VARIABLE-P looked like:     1. (SPECIAL-VARIABLE-P 'FOO '((DECLARE (SPECIAL X) (FIXNUM X))				   (DECLARE (SPECIAL Y))))     2. (SPECIAL-VARIABLE-P 'FOO '(DECLARE (SPECIAL X) (FIXNUM X) (SPECIAL Y)))     3. (SPECIAL-VARIABLE-P 'FOO '(((SPECIAL X) (FIXNUM X)) ((SPECIAL Y))))     4. (SPECIAL-VARIABLE-P 'FOO '((SPECIAL X) (FIXNUM X) (SPECIAL Y)))     5. (SPECIAL-VARIABLE-P 'FOO '(X Y))Huh?  I was proposing that the second argument to SPECIAL-VARIABLE-Pwould be NIL and the caller would have to do his own declaration parsing.Thus (OR (SPECIAL-VARIABLE-P var NIL) (MEMBER var parsed-special-dcls)).If we wanted a function to help compute parsed-special-dcls, that wouldbe a separate function.  I'm not sure we need one as part of the CommonLisp standard.    I note also that this only works because special bindings are not    pervasive.Yes, in Zetalisp they are pervasive and the issue does not arise, sincethe two questions yield the same answer.[philosophy deleted]*start*05469 00024 USfReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU by Xerox.COM ; 31 MAY 88 08:16:32 PDTReceived: from ELEPHANT-BUTTE.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 31 May 88  08:13:42 PDTReceived: from PEWEE.SCRC.Symbolics.COM by ELEPHANT-BUTTE.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 297362; Tue 31-May-88 11:12:59 EDTDate: Tue, 31 May 88 11:13 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: SPECIAL-VARIABLE-TEST (Version 2)To: CL-Cleanup@SAIL.STANFORD.EDUMessage-ID: <880531111336.6.KMP@PEWEE.SCRC.Symbolics.COM>The only mail that was generated on this issue on the last pass was a notefrom myself pointing out a bug in the test case and a short dialog betweenme and Moon about the distinction between binding and referencing a specialvariable. Two new paragraphs have been added to the end of the Proposal section toaccomodate Moon's observations, the Test Case has been fixed, and theDiscussion and Edit History sections have been modified slightly. Therest of the proposal remains unchanged.-----Issue:        SPECIAL-VARIABLE-TESTReferences:   Declaring Global Variables and Named Constants (pp68-69),	      Declaration Specifiers (p157)Category:     ADDITIONEdit history: 07-Mar-88, Version 1 by Pitman	      21-May-88, Version 2 by Pitman (correct test case, add discussion)Status:	      For Internal DiscussionProblem Description:  CLtL does not define a way to test to see if a variable has been  proclaimed special (for the purposes of either binding or reference).  Programs such as macros, code-walkers, and program-generating programs  may need such information from time to time in order to do certain kinds  of reasoning about code-motion, unused variables, etc.Proposal (SPECIAL-VARIABLE-TEST:SPECIAL-VARIABLE-P)  Add a function SPECIAL-VARIABLE-P by analogy with SPECIAL-FORM-P  which is defined as:  SPECIAL-VARIABLE-P symbol &optional environment	[Function]  Returns T iff -symbol- names a variable which is SPECIAL in the  indicated lexical -environment-. Otherwise, it returns NIL.  It is an error if -symbol- is not a symbol. If not supplied, the  -environment- defaults to NIL, meaning the null lexical environment.  This function will be useful in determining whether a reference to  the variable named by SYMBOL in the indicated ENVIRONMENT will be  a special reference.  Note: Since special variable proclamations are pervasive and  declarations are not, the technique for determining whether binding  the variable named by SYMBOL is not dependent on the surrounding  lexical environment. It is instead dependent only on the global  environment and on the declarations of the form which would accomplish  the binding. Whether the variable has been globally proclaimed special  can be determined by doing (SPECIAL-VARIABLE-P 'symbol). Whether the  variable is locally declared SPECIAL can be checked only by parsing  the declarations looking for (DECLARE ... (SPECIAL ... symbol ...)).Test Case:  (PROCLAIM '(SPECIAL SPECIAL-FOO))  (MACROLET ((TEST (NAME &ENVIRONMENT ENV)	       `'(,NAME ,(SPECIAL-VARIABLE-P NAME ENV)) ))    (LIST* (TEST SPECIAL-FOO)				        ;0	   (TEST FOO)	   (LET ((SPECIAL-FOO 1) (FOO 1))	     (LIST* (TEST SPECIAL-FOO)				;1		    (TEST FOO)		    (LET ((SPECIAL-FOO 2) (FOO 2))		      (DECLARE (SPECIAL FOO))		      (LIST* (TEST SPECIAL-FOO)			;2			     (TEST FOO)			     (LET ((SPECIAL-FOO 3) (FOO 3))			       (LIST (TEST SPECIAL-FOO)		;3				     (TEST FOO)))))))))  => ((SPECIAL-FOO T) (FOO NIL)			;0      (SPECIAL-FOO T) (FOO NIL)			;1      (SPECIAL-FOO T) (FOO T)			;2      (SPECIAL-FOO T) (FOO NIL))		;3Rationale:  This would allow programs that reason about other programs to obtain  important information about SPECIAL declarations and proclamations.Current Practice:  Interpreters and compilers must, of necessity, have a way to do this  internally.  In some implementations, information about special variable proclamations  is kept on a symbol's plist, and users eventually "figure out" how to take  advantage of that.  In most implementations, getting information about special declarations  is neither documented nor easy to "figure out".  Symbolics Genera has undocumented internal function which does this.Cost to Implementors:  By necessity, compilers and interpreters must have a way to get the  information returned by this facility. In general, it should just be  a matter of providing a program interface to that facility.Cost to Users:  None. This is an upward-compatible extension.Cost of Non-Adoption:  Some code-walkers, macros, etc. would continue be hard to write in a  portable way.Benefits:  The cost of non-adoption would be avoided.Aesthetics:  Although SPECIAL variables provide some benefit to Common Lisp, that   benefit has not been without price. It's difficult to do proper code  analysis if lexical and special variables look the same. The presence  of this operator makes it easier to write code which reasons clearly  and correctly about other programs, and so will probably tend to  improve the aesthetics of such programs.Discussion:  This proposal came to the Cleanup committee from the Japanese community.  Pitman wrote it up formally.  Pitman and Moon support SPECIAL-VARIABLE-TEST:SPECIAL-VARIABLE-P.*start*00759 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU by Xerox.COM ; 23 MAY 88 17:30:12 PDTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 23 May 88  17:27:18 PDTReceived: from Cabernet.ms by ArpaGateway.ms ; 23 MAY 88 17:27:34 PDTDate: 23 May 88 17:27 PDTFrom: masinter.paSubject: Re: Issue: SPECIAL-VARIABLE-TEST (Version 1)In-reply-to: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>'s message of Mon, 7 Mar 88 15:53 ESTTo: KMP@STONY-BROOK.SCRC.Symbolics.COMcc: CL-Cleanup@SAIL.STANFORD.EDUMessage-ID: <880523-172734-5781@Xerox>I like this proposal too, and I think it just needs  a few edits before it isready for release. Wanna make 'em?*start*01185 00024 USaReturn-Path: <CL-Compiler-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 02 OCT 88 12:26:45 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 2 Oct 88  12:23:41 PDTReceived: from GRYPHON.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 469078; Sun 2-Oct-88 15:21:37 EDTDate: Sun, 2 Oct 88 15:21 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Re: Issue: SYNTACTIC-ENVIRONMENT-ACCESS (Version 1)To: masinter.pacc: eb@lucid.com, cl-compiler@sail.stanford.edu, cl-cleanup@sail.stanford.eduIn-Reply-To: <881002-115755-2604@Xerox>Message-ID: <881002152101.4.KMP@GRYPHON.SCRC.Symbolics.COM>    Date: 2 Oct 88 11:57 PDT    From: masinter.pa@Xerox.COM    would you say this supercedes:"supersedes"    Issue:        SPECIAL-VARIABLE-TESTSince EB's proposal is more elaborate and might not get past X3J13, Iwould prefer if both were presented and the committee could decide.I don't want to see the failure of this proposal to pass leave us withnothing to show.*start*00880 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 13 OCT 88 18:11:09 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 13 Oct 88  18:06:00 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 476121; Thu 13-Oct-88 19:17:46 EDTDate: Thu, 13 Oct 88 19:17 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: SPECIAL-VARIABLE-TEST (Version 2)To: CL-Cleanup@SAIL.Stanford.EDUMessage-ID: <881013191738.0.KMP@BOBOLINK.SCRC.Symbolics.COM>My notes from Fairfax meeting...Cleanup meeting: This might get put on hold pending outcome of SYNTACTIC-ENVIRONMENT-ACCESS issue. If that doesn't fly, this would get revived.