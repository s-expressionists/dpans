*start*03311 00024 USfReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 04 NOV 88 16:21:08 PSTReceived: from ti.com by SAIL.Stanford.EDU with TCP; 4 Nov 88  16:19:26 PSTReceived: by ti.com id AA07547; Fri, 4 Nov 88 18:19:48 CSTReceived: from Kelvin by tilde id AA15412; Fri, 4 Nov 88 18:03:33 CSTMessage-Id: <2803680321-5692691@Kelvin>Sender: GRAY@Kelvin.csc.ti.comDate: Fri, 4 Nov 88 18:05:21 CSTFrom: David N Gray <Gray@DSG.csc.ti.com>To: cl-cleanup@sail.stanford.eduSubject: Issue SPECIAL-TYPE-SHADOWING (V1)In-Reply-To: Msg of 28 Sep 88 20:44 PDT from masinter.pa@Xerox.COMIssue:         SPECIAL-TYPE-SHADOWINGReferences:    CLtL pages 156, 158Related issues: DECLARE-TYPE-FREECategory:      CLARIFICATIONEdit history:  Version 1, 04-Nov-88 by David GrayProblem description:  A Common Lisp user raised the question of whether something like the  following is legal:    (PROCLAIM '(TYPE NUMBER *X*))    (DEFVAR *X*)    (DEFUN FOO ()      (LET ((*X* T))        (DECLARE (TYPE SYMBOL *X*))        (BAR)))  Page 156 of CLtL says that a proclamation is "always in force unless  locally shadowed" and page 158 says type declarations "only affect  variable bindings", which might be interpreted to mean that the DECLARE  locally shadows the PROCLAIM.  However, that interpretation would make  the global type proclamation useless because it could not be relied on  when compiling a function such as BAR. Proposal SPECIAL-TYPE-SHADOWING:CLARIFY    Clarify that if there is a local type declaration for a special  variable, and there is also a global type proclamation for that same  variable, then the value of the variable within the scope of the local  declaration must be a member of the intersection of the two declared  types.Rationale:  Some restriction on local type declarations for special variables is  needed in order for type proclamations to be meaningful.  The wording  used here was chosen for consistency with proposal DECLARE-TYPE-FREE.Current practice:  The TI, Symbolics, and Lucid implementations do not report any error  on the example above, but it isn't clear that they really do anything  with type declarations for special variables anyway.Cost to Implementors:  This is unlikely to require a change in any current implementation.Cost to Users:  Anyone who has written code like the example above would have to  modify it if compilers started enforcing this restriction.Cost of non-adoption:  A minor ambiguity in the language specification that could confuse  users.Performance impact:  None.Benefits:  A clearer definition of the meaning of type declarations for special  variables.Discussion:  This is obviously very closely related to issue DECLARE-TYPE-FREE, but  this is an ambiguity in the existing language that should be resolved  even if the language extension of proposal DECLARE-TYPE-FREE is not  accepted.  Note also that DECLARE-TYPE-FREE makes no mention of type  proclamations.  Other possible resolutions of the ambiguity would be to either rule  out use of local type declarations for special variables, or to say  that the local type must be a subtype of the global type.*start*00895 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 30 DEC 88 14:32:49 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 30 Dec 88  14:32:35 PSTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 513671; Fri 30-Dec-88 17:31:08 ESTDate: Fri, 30 Dec 88 17:30 ESTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue SPECIAL-TYPE-SHADOWING (V1)To: David N Gray <Gray@DSG.csc.ti.com>cc: cl-cleanup@sail.stanford.eduIn-Reply-To: <2803680321-5692691@Kelvin>Message-ID: <19881230223036.9.MOON@EUPHRATES.SCRC.Symbolics.COM>SPECIAL-TYPE-SHADOWING:CLARIFY seems right (i.e. the most consistentwith the rest of Common Lisp as it is emerging).*start*01824 00024 US Return-Path: <jonl@lucid.com>Received: from lucid.com ([192.26.25.1]) by Xerox.COM ; 10 JAN 89 22:47:08 PSTReceived: from bhopal ([192.9.200.13]) by heavens-gate.lucid.com id AA03151g; Tue, 10 Jan 89 22:44:06 PSTReceived: by bhopal id AA03335g; Tue, 10 Jan 89 22:46:24 PSTDate: Tue, 10 Jan 89 22:46:24 PSTFrom: Jon L White <jonl@lucid.com>Message-Id: <8901110646.AA03335@bhopal>To: Gray@DSG.csc.ti.comCc: masinter.pa, CL-Cleanup@sail.stanford.eduIn-Reply-To: David N Gray's message of Tue, 10 Jan 89  10:57:15 CST <2809443435-15097074@Kelvin>Subject: Issue: DECLARE-TYPE-FREE (Version 9)Well, one of two things needs to be done (and fast!).  Either:  1. merge SPECIAL-TYPE-SHADOWING:CLARIFY into DECLARE-TYPE-FREE,      enlarging the latter to cover PROCLAIM as well as DECLARE.  2. keep two separate issues, but reconcile the semantics of     nested, non-identical declarations.Either way, the "reconcilation" will have to be done [I tend tofavor two separate issues at this point.]I think you are right that the matter of semantics for nested declarationsisn't adequately treated in the DECLARE-TYPE-FREE proposal.  Sigh.  Inorder to accommodate those who argued that mechanical code productionmight not be able to guarantee a true SUBTYPE relation for the innerdeclarations, I would go for a version that treated an inner declarationas if it were the intersection of the outter one.  How about you?  Inthe example:   (proclaim '(type some-var (or symbol integer)))   (let ((x (mumble)))     (declare (type x number))     ...     (locally (declare (type x (or bit character)))       ;; 'x' is effectively declared to be of type BIT here     ))the inner declarations are not subtypes of the outter ones, but atleast the intersections are non-null.-- JonL --*start*03212 00024 UU?Date: 11 Jan 89 22:35 PSTSender: masinter.paSubject: Issue: SPECIAL-TYPE-SHADOWING (Version 1)To: X3J13@Sail.Stanford.EduReply-to: cl-cleanup@sail.stanford.eduFrom: cl-cleanup@sail.stanford.educc: masinterline-fold: NoIssue:         SPECIAL-TYPE-SHADOWINGReferences:    CLtL pages 156, 158Related issues: DECLARE-TYPE-FREECategory:      CLARIFICATIONEdit history:  Version 1, 04-Nov-88 by David GrayProblem description:  A Common Lisp user raised the question of whether something like the  following is legal:    (PROCLAIM '(TYPE NUMBER *X*))    (DEFVAR *X*)    (DEFUN FOO ()      (LET ((*X* T))        (DECLARE (TYPE SYMBOL *X*))        (BAR)))  Page 156 of CLtL says that a proclamation is "always in force unless  locally shadowed" and page 158 says type declarations "only affect  variable bindings", which might be interpreted to mean that the DECLARE  locally shadows the PROCLAIM.  However, that interpretation would make  the global type proclamation useless because it could not be relied on  when compiling a function such as BAR. Proposal SPECIAL-TYPE-SHADOWING:CLARIFY    Clarify that if there is a local type declaration for a special  variable, and there is also a global type proclamation for that same  variable, then the value of the variable within the scope of the local  declaration must be a member of the intersection of the two declared  types.Rationale:  Some restriction on local type declarations for special variables is  needed in order for type proclamations to be meaningful.  The wording  used here was chosen for consistency with proposal DECLARE-TYPE-FREE.Current practice:  The TI, Symbolics, and Lucid implementations do not report any error  on the example above, but it isn't clear that they really do anything  with type declarations for special variables anyway.Cost to Implementors:  This is unlikely to require a change in any current implementation.Cost to Users:  Anyone who has written code like the example above would have to  modify it if compilers started enforcing this restriction.Cost of non-adoption:  A minor ambiguity in the language specification that could confuse  users.Performance impact:  None.Benefits:  A clearer definition of the meaning of type declarations for special  variables.Discussion:  This is obviously very closely related to issue DECLARE-TYPE-FREE, but  this is an ambiguity in the existing language that should be resolved  even if the language extension of proposal DECLARE-TYPE-FREE is not  accepted.  Note also that DECLARE-TYPE-FREE makes no mention of type  proclamations.  Other possible resolutions of the ambiguity would be to either rule  out use of local type declarations for special variables, or to say  that the local type must be a subtype of the global type.        TITAN 
         TITAN 
           >              †                                                               $             Å       (      &              Ÿ              »              H              Ç              P              
       
       V             ˘        z∫*start*03197 00024 UU?Return-Path: <X3J13-mailer@SAIL.Stanford.EDU>Received: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 11 JAN 89 22:50:19 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 11 Jan 89  22:37:36 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 11 JAN 89 22:36:27 PSTDate: 11 Jan 89 22:35 PSTSender: masinter.paSubject: Issue: SPECIAL-TYPE-SHADOWING (Version 1)To: X3J13@Sail.Stanford.EduReply-to: cl-cleanup@sail.stanford.eduFrom: cl-cleanup@sail.stanford.educc: masinter.paline-fold: NoMessage-ID: <890111-223627-11614@Xerox>!Issue:         SPECIAL-TYPE-SHADOWINGReferences:    CLtL pages 156, 158Related issues: DECLARE-TYPE-FREECategory:      CLARIFICATIONEdit history:  Version 1, 04-Nov-88 by David GrayProblem description:  A Common Lisp user raised the question of whether something like the  following is legal:    (PROCLAIM '(TYPE NUMBER *X*))    (DEFVAR *X*)    (DEFUN FOO ()      (LET ((*X* T))        (DECLARE (TYPE SYMBOL *X*))        (BAR)))  Page 156 of CLtL says that a proclamation is "always in force unless  locally shadowed" and page 158 says type declarations "only affect  variable bindings", which might be interpreted to mean that the DECLARE  locally shadows the PROCLAIM.  However, that interpretation would make  the global type proclamation useless because it could not be relied on  when compiling a function such as BAR. Proposal SPECIAL-TYPE-SHADOWING:CLARIFY    Clarify that if there is a local type declaration for a special  variable, and there is also a global type proclamation for that same  variable, then the value of the variable within the scope of the local  declaration must be a member of the intersection of the two declared  types.Rationale:  Some restriction on local type declarations for special variables is  needed in order for type proclamations to be meaningful.  The wording  used here was chosen for consistency with proposal DECLARE-TYPE-FREE.Current practice:  The TI, Symbolics, and Lucid implementations do not report any error  on the example above, but it isn't clear that they really do anything  with type declarations for special variables anyway.Cost to Implementors:  This is unlikely to require a change in any current implementation.Cost to Users:  Anyone who has written code like the example above would have to  modify it if compilers started enforcing this restriction.Cost of non-adoption:  A minor ambiguity in the language specification that could confuse  users.Performance impact:  None.Benefits:  A clearer definition of the meaning of type declarations for special  variables.Discussion:  This is obviously very closely related to issue DECLARE-TYPE-FREE, but  this is an ambiguity in the existing language that should be resolved  even if the language extension of proposal DECLARE-TYPE-FREE is not  accepted.  Note also that DECLARE-TYPE-FREE makes no mention of type  proclamations.  Other possible resolutions of the ambiguity would be to either rule  out use of local type declarations for special variables, or to say  that the local type must be a subtype of the global type.