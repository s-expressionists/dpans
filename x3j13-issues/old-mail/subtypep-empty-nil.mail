*start*02826 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 07 FEB 89 13:03:03 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 7 Feb 89  13:01:56 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 535083; Tue 7-Feb-89 15:59:55 ESTDate: Tue, 7 Feb 89 15:59 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: SUBTYPEP-EMPTY-NIL (Version 1)To: CL-Cleanup@SAIL.Stanford.EDUMessage-ID: <890207155926.7.KMP@BOBOLINK.SCRC.Symbolics.COM>Issue:        SUBTYPEP-EMPTY-NILForum:	      CleanupReferences:   2.15 Overlap, Inclusion, and Disjointness of Types (p33-35),	      SUBTYPEP (p72), Category:     CLARIFICATIONEdit history: 07-Feb-89, Version 1 by PitmanStatus:	      For Internal DiscussionProblem Description:  When a type description is restricted by range or enumeration, and the  restricted type turns out to be empty, is the type a subtype of NIL?Test Cases:  #1: (SUBTYPEP '(INTEGER (0) (0)) 'NIL) => ??  #2: (SUBTYPEP '(MEMBER) NIL)           => ??Proposal (SUBTYPEP-EMPTY-NIL:NIL-T):  Specify that empty ranges are not a subtype of NIL.  The test cases would then have to return either {NIL, T},  or {NIL, NIL}.  Rationale: The two types are different in intention.Proposal (SUBTYPEP-EMPTY-NIL:T-T):  Specify that empty ranges are a subtype of NIL.  The test cases would then have to return either {T, T},  or {NIL, NIL}.  Rationale: The two types are not distinguishable in practice.Proposal (SUBTYPEP-EMPTY-NIL:EXPLICITLY-VAGUE):  Explicitly acknowledge that the relationship between empty range or  enumeration types and the type named NIL is unspecified.  The test cases could then return any of {T, T}, {NIL, T},  or {NIL, NIL}.  Rationale: This is a fall-back in case no agreement is reached.Current Practice:  For test case #1,   Symbolics Genera 7.1 returns {NIL, T}.  For test case #2,   Symbolics Genera 7.1 returns {NIL, T}.Cost To Implementors:  There is no cost to EXPLICITLY-VAGUE.  The cost to the other options for implementations which don't already  conform is probably fairly small.Cost To Users:  Probably most users don't depend on this. Those users who do depend on it,  can't rely on it in portable code because the spec is too vague.Cost of Non-Adoption:  Unnecesary ambiguity.Benefits:  Users will know what to expect.Aesthetics:  No aesthetic impact yet identified.Discussion:  Pitman mildly supports NIL-T. Steele mildly supports T-T.  Probably the answer is not as important as making sure implementations  agree and that users know what to expect.*start*01215 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 08 FEB 89 09:23:16 PSTReceived: from ti.com by SAIL.Stanford.EDU with TCP; 8 Feb 89  09:20:59 PSTReceived: by ti.com id AA01508; Wed, 8 Feb 89 11:19:35 CSTReceived: from Kelvin by tilde id AA13765; Wed, 8 Feb 89 11:07:11 CSTMessage-Id: <2811949593-5086377@Kelvin>Sender: GRAY@Kelvin.csc.ti.comDate: Wed, 8 Feb 89 11:06:33 CSTFrom: David N Gray <Gray@DSG.csc.ti.com>To: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Cc: CL-Cleanup@SAIL.Stanford.EDUSubject: Re: Issue: SUBTYPEP-EMPTY-NIL (Version 1)In-Reply-To: Msg of Tue, 7 Feb 89 15:59 EST from Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>> Proposal (SUBTYPEP-EMPTY-NIL:T-T):> >   Specify that empty ranges are a subtype of NIL.> >   The test cases would then have to return either {T, T},>   or {NIL, NIL}.Sounds good; this seems like a reasonable interpretation of an otherwisemeaningless situation.> Current Practice:The Explorer currently returns {NIL, T} for #1 but {T, T} for #2,although the latter may have been more by accident than by design.*start*01723 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 08 FEB 89 10:11:23 PSTReceived: from FRED.SLISP.CS.CMU.EDU by SAIL.Stanford.EDU with TCP; 8 Feb 89  10:10:49 PSTReceived: from FRED.SLISP.CS.CMU.EDU by FRED.SLISP.CS.CMU.EDU;  8 Feb 89 13:08:15 ESTTo: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: gz@spt.entity.com, CL-Cleanup@SAIL.Stanford.EDUSubject: Re: Issue: SUBTYPEP-EMPTY-NIL (Version 1) In-reply-to: Your message of Wed, 08 Feb 89 09:37:00 -0500.             <890208093740.1.KMP@BOBOLINK.SCRC.Symbolics.COM> Date: Wed, 08 Feb 89 13:07:42 ESTFrom: Rob.MacLachlan@WB1.CS.CMU.EDUThe NIL T proposal isn't adequate as currently presented.  If an emptynumeric range or member type isn't equivalent to NIL, what is it equivalentto.  Is (integer (0) (0)) == (float (0.0) (0.0))?  Is an empty member typeequivalent to an empty numeric type?If these types are placed somewhere in the hierarchy other than at thebottom, then we must say where.  Presumably each of these new empty typesis a lower bound on some existing collection of types, and we need to saywhich.I am personally in favor of making all of these types == NIL, since itseems simpler.  This seems also to be more compatible with the "typesare sets" view stated in CLtL.  All type specifiers that designate theempty set should be equivalent.I think that your example is pretty contrived.  Regardless of the typesystem, the compiler can't do much with type specifiers that areconstructed at load time.  The right way to do this would be with aDEFTYPE, which could be expanded at compile time.  Rob*start*01083 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 08 FEB 89 11:12:15 PSTReceived: from EDDIE.MIT.EDU by SAIL.Stanford.EDU with TCP; 8 Feb 89  11:12:03 PSTReceived: by EDDIE.MIT.EDU with UUCP with smail2.5 with sendmail-5.45/4.7 id <AA12987@EDDIE.MIT.EDU>; Wed, 8 Feb 89 14:10:07 ESTReceived: by spt.entity.com (smail2.5); 8 Feb 89 14:02:52 EST (Wed)To: KMP@STONY-BROOK.SCRC.Symbolics.COMCc: CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: Kent M Pitman's message of Wed, 8 Feb 89 09:37 EST <890208093740.1.KMP@BOBOLINK.SCRC.Symbolics.COM>Subject: Issue: SUBTYPEP-EMPTY-NIL (Version 1)Message-Id: <8902081402.AA21888@spt.entity.com>Date: 8 Feb 89 14:02:52 EST (Wed)From: gz@spt.entity.com (Gail Zacharias)   If CLtL is clear and I've just missed the passage, by all means cite it.  CLtL p72: "If a data type is viewed as the set of all objects belonging to thetype, then the TYPEP function is a set membership test, while SUBTYPEP is asubset test."*start*02619 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 08 FEB 89 06:39:25 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 8 Feb 89  06:39:47 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via INTERNET with SMTP id 535631; 8 Feb 89 09:37:44 ESTDate: Wed, 8 Feb 89 09:37 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: SUBTYPEP-EMPTY-NIL (Version 1)To: gz@spt.entity.comcc: KMP@STONY-BROOK.SCRC.Symbolics.COM, CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <8902080110.AA21055@spt.entity.com>Message-ID: <890208093740.1.KMP@BOBOLINK.SCRC.Symbolics.COM>Sorry, but this is a serious attempt to get a clarification.I don't see that any criterion has been advanced by CLtL for believingNIL T is any better or worse than T T.  If CLtL is clear and I've justmissed the passage, by all means cite it.  Alternatively, you may have somepersonal criterion which you'd like us to buy into. If you propose thatcriterion and no one contests, I'll be quite happy to see the issueturn out to resolved by a non-controversial vote.Here's some extra data on the problem as I see it...Btw, another pair of test cases which has occurred to me since then are: (SUBTYPEP '(INTEGER (1.0) (#,(+ 1.0 SINGLE-FLOAT-EPSILON))) '()) (SUBTYPEP '(INTEGER (1.0) (#.(+ 1.0 SINGLE-FLOAT-EPSILON))) '())The integer range denoted in both cases is empty. If we assume that thecompiler works by calling READ, then a compiler can in principle recognizethe first as portable code so would not want to complain about it, but hecannot recognize the second as portable as portable. An implementator wholikes to build in lots of checking to promote portability might be botheredby this disparity. It is this kind of issue I meant of when I referred toprogrammer "intention".Note that in recent discussions of array types, we have acknowledgedany notion of programmer intention in permitting (SUBTYPEP '(ARRAY FIXNUM) '(ARRAY T))and (SUBTYPEP '(ARRAY T) '(ARRAY FIXNUM))to both return T. We did this not because we wanted these particularoperations to return T -- since I would assume it's clear that in anideal world that would be undesirable -- but because it was possible to better optimize a now-win situation by permitting this behavior inorder to achieve some other, more important, relationships. Perhapsthe same has to be true of SUBTYPEP for the new situation this issue addresses.*start*00956 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 07 FEB 89 22:52:33 PSTReceived: from EDDIE.MIT.EDU by SAIL.Stanford.EDU with TCP; 7 Feb 89  22:52:29 PSTReceived: by EDDIE.MIT.EDU with UUCP with smail2.5 with sendmail-5.45/4.7 id <AA26202@EDDIE.MIT.EDU>; Wed, 8 Feb 89 01:50:36 ESTReceived: by spt.entity.com (smail2.5); 8 Feb 89 01:10:18 EST (Wed)To: KMP@STONY-BROOK.SCRC.Symbolics.COMCc: CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: Kent M Pitman's message of Tue, 7 Feb 89 15:59 EST <890207155926.7.KMP@BOBOLINK.SCRC.Symbolics.COM>Subject: Issue: SUBTYPEP-EMPTY-NIL (Version 1)Message-Id: <8902080110.AA21055@spt.entity.com>Date: 8 Feb 89 01:10:18 EST (Wed)From: gz@spt.entity.com (Gail Zacharias)This is a joke, right?  You're not seriously suggesting that(SUBTYPEP <empty set> NIL) =>  NIL T is anything but a bug?*start*02361 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 08 FEB 89 12:30:55 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 8 Feb 89  12:30:27 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 535926; Wed 8-Feb-89 15:28:12 ESTDate: Wed, 8 Feb 89 15:28 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: SUBTYPEP-EMPTY-NIL (Version 1)To: gz@spt.entity.comcc: KMP@STONY-BROOK.SCRC.Symbolics.COM, CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <8902081402.AA21888@spt.entity.com>Message-ID: <890208152811.0.KMP@BOBOLINK.SCRC.Symbolics.COM>    Date: 8 Feb 89 14:02:52 EST (Wed)    From: gz@spt.entity.com (Gail Zacharias)       If CLtL is clear and I've just missed the passage, by all means cite it.      CLtL p72: "If a data type is viewed as the set of all objects belonging to the    type, then the TYPEP function is a set membership test, while SUBTYPEP is a    subset test."Hmmm. I'd missed that little paragraph up there. It does seem to supportyour claim (though it still makes me a little queasy). The wording isobviously informal since I might just as easily expect the term "subsettest" to imply something like (subtypep '(3 4 5) 'number) => t, butlater examples seem to fix that up ok.  Also, whenever very informaldescriptions like this occur, I'm a bit leary of drawing too manyconclusions from them because I'm not certain that the speaker (Steele in this case) had intended the wording to hold up under toomuch heavy inferencing...Still, if no one disagrees that this is the apparent intent (and no one but mehas spoken up so far), then I'm content to declare this issue resolved by sendingmail to Kathy identifying the issue, and asking her to resolve it by makingthe point clearer [per option T-T, which permits results T T or NIL NIL] andincluding the examples from the writeup. The simple presence of those examplesin the draft to be approved will make it apparent to reviewers that we believethis to be a consequence of the wording, and that if they disagree they shouldobject [as they would object to anything else that they noticed to be incongruous].*start*01652 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 08 FEB 89 20:16:55 PSTReceived: from ALDERAAN.SCRC.Symbolics.COM ([128.81.41.109]) by SAIL.Stanford.EDU with TCP; 8 Feb 89  20:17:07 PSTReceived: from GANG-GANG.SCRC.Symbolics.COM by ALDERAAN.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 269332; Wed 8-Feb-89 23:14:52 ESTDate: Wed, 8 Feb 89 23:14 ESTFrom: Glenn S. Burke <gsb@ALDERAAN.SCRC.Symbolics.COM>Subject: Issue: SUBTYPEP-EMPTY-NIL (Version 1)To: KMP@STONY-BROOK.SCRC.Symbolics.COM, gz@spt.entity.comcc: CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <890208093740.1.KMP@BOBOLINK.SCRC.Symbolics.COM>Message-ID: <19890209041431.0.GSB@GANG-GANG.SCRC.Symbolics.COM>    Date: Wed, 8 Feb 89 09:37 EST    From: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>    Sorry, but this is a serious attempt to get a clarification.    I don't see that any criterion has been advanced by CLtL for believing    NIL T is any better or worse than T T.  If CLtL is clear and I've just    missed the passage, by all means cite it.  Alternatively, you may have some    personal criterion which you'd like us to buy into. If you propose that    criterion and no one contests, I'll be quite happy to see the issue    turn out to resolved by a non-controversial vote.NIL T leads to a situation of functionally equivalent forms of the "empty"type set not being equivalent under (and (subtypep x y) (subtypep y x)).I believe that to be a good argument for T T, whether or not CLtL evenhints that this should be the case.*start*02418 00024 US Return-Path: <KMP@STONY-BROOK.SCRC.Symbolics.COM>Received: from STONY-BROOK.SCRC.Symbolics.COM ([128.81.41.144]) by Xerox.COM ; 14 FEB 89 15:36:33 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 539148; Tue 14-Feb-89 18:35:45 ESTDate: Tue, 14 Feb 89 18:35 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: SUBTYPEP-EMPTY-NIL (Version 1)To: chapman%aitg.dec@decwrl.dec.comcc: kmp@STONY-BROOK.SCRC.Symbolics.COM, Masinter.PAReferences: <19890209041431.0.GSB@GANG-GANG.SCRC.Symbolics.COM>,            <890208152811.0.KMP@BOBOLINK.SCRC.Symbolics.COM>,            <8902081402.AA21888@spt.entity.com>,            The message of 8 Feb 89 13:07 EST from Rob.MacLachlan@WB1.CS.CMU.EDU,            <2811949593-5086377@Kelvin>,            <890208093740.1.KMP@BOBOLINK.SCRC.Symbolics.COM>,            <8902080110.AA21055@spt.entity.com>,            <890207155926.7.KMP@BOBOLINK.SCRC.Symbolics.COM>Message-ID: <890214183525.7.KMP@BOBOLINK.SCRC.Symbolics.COM>Fyi, the following problem came up and was agreed by the Cleanupcommittee to be pretty much forced by existing constraints and therefore not in need of a full X3J13 vote. As such, CL-Cleanupis not going to pursue it, but you may find the information usefulfor editorial purposes. I've edited the writeup and discussion tospare you a lot of boring reading... Problem Description:  When a type description is restricted by range or enumeration, and the  restricted type turns out to be empty, is the type a subtype of NIL? Test Cases:  #1: (SUBTYPEP '(INTEGER (0) (0)) 'NIL) => ??  #2: (SUBTYPEP '(MEMBER) NIL)           => ??The proposal which we agreed was a non-controversial of CLtL was:  Specify that empty ranges are a subtype of NIL.  The test cases would then have to return either {T, T},  or {NIL, NIL}.Support for this position included: GSB: NIL T leads to a situation of functionally equivalent forms of      the "empty" type set not being equivalent under      (and (subtypep x y) (subtypep y x)).      I believe that to be a good argument for T T, whether or not      CLtL even hints that this should be the case. GZ:  CLtL p72: "If a data type is viewed as the set of all objects      belonging to the type, then the TYPEP function is a set membership      test, while SUBTYPEP is a subset test."