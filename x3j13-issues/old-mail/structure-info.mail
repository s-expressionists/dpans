*start*03615 00024 USaReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU by Xerox.COM ; 24 JUN 88 11:01:38 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 24 Jun 88  11:00:21 PDTReceived: from RIO-DE-JANEIRO.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 424268; Fri 24-Jun-88 14:00:04 EDTDate: Fri, 24 Jun 88 13:59 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: STRUCTURE-INFO (Version 1)To: CL-Cleanup@SAIL.STANFORD.EDUcc: DICK@WHEATIES.AI.MIT.EDUMessage-ID: <880624135946.8.KMP@RIO-DE-JANEIRO.SCRC.Symbolics.COM>Please be sure to cc Dick@WHEATIES.AI.MIT.EDU in any correspondenceon this issue since he's not on CL-Cleanup. -kmp----------Issue:        STRUCTURE-INFOReferences:   Structures (pp305-320)Category:     ADDITIONEdit history: 24-Jun-88, Version 1 by Pitman and WatersStatus:	      For Internal DiscussionProblem Description:  There is no portable way to determine whether something is a structure  and no portable way to ask abstractly what the contents of a structure  are without understanding that particular structure.Proposal (STRUCTURE-INFO:NEW-FUNCTIONS):  Introduce these new functions:   STRUCTUREP thing					[Function]    Predicate returns true if the given object is represented as    a structure (without the use of DEFSTRUCT's :TYPE option).    Otherwise, returns false.   STRUCTURE-CONTENTS structure 			[Function]    Returns an alist of field names (as keywords) and field values showing    the contents of the STRUCTURE. The STRUCTURE may be any object    for which STRUCTUREP returns true.Test Case:  (DEFSTRUCT (FRED (:TYPE VECTOR)) (A 1) (B 2) (C 3))  (SETQ FRED (MAKE-FRED))  (STRUCTUREP FRED) => NIL  (VECTORP FRED) => T  (STRUCTURE-CONTENTS FRED) is undefined  (DEFSTRUCT WILMA (A 1) (B 2) (C 3))  (SETQ WILMA (MAKE-WILMA))  (STRUCTUREP WILMA) => T  (STRUCTURE-CONTENTS WILMA) => ((:A . 1) (:B . 2) (:C . 3))Rationale:  STRUCTUREP is important for implementing a portable pretty printer in  a number of ways.  STRUCTURE-CONTENTS is less important, but is necessary  if a portable pretty printer is to print structures in #S notation.Current Practice:  Some implementations, such as Symbolics Genera, provide   (TYPEP x 'STRUCTURE).  Most implementations do not go so far as to provide STRUCTUREP, however.  Probably no implementations offer STRUCTURE-CONTENTS in any exported form.Cost to Implementors:  Since the standard printer must access this same information when   printing structures, it must be very trivial to provide this functionality.Cost to Users:  None. This is an upward compatible change.Cost of Non-Adoption:  Portable pretty printers would not be able to pretty-print structure  objects in #S notation.Benefits:  In addition to pretty printers, this might be of some use to programmers  customizing the generic function DESCRIBE, or to people writing  DESCRIBE-like facilities.Aesthetics:  No major aesthetic impact.Discussion:  Dick Waters submitted a request for changes of this kind in a letter to  X3J13 dated June 14, 1988. Pitman wrote up the request formally.  If the CLOS meta-object protocol becomes a standard part of CL, this  facility would not be necessary.  However, if that protocol is in any way  optional, it would be useful to have this interface since it can be  implemented using considerably less powerful primitives than that  protocol offers.*start*00711 00024 US Date: Tue, 20 Sep 88 19:46 PDTFrom: Gregor.paSubject: Re: [Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>: Issue: STRUCTURE-INFO (Version 1)]To: masinter.paFcc: BD:>Gregor>mail>outgoing-mail-4.text.newestIn-Reply-To: The message of 20 Sep 88 17:42 PDT from masinter.paMessage-ID: <19880921024606.6.GREGOR@PORTNOY.parc.xerox.com>Line-fold: noI don't have time to write this up.  But here is some code:(defun structurep (x)  (typep (class-of x) 'structure-class))(defun structure-contents (x)  (mapcar #'(lambda (slot-description)	      (let ((name (slot-description-name slot-description)))		(list name (slot-value x name))))	  (class-slots (class-of x))))-------*start*00639 00024 US Return-Path: <dick@wheaties.ai.mit.edu>Received: from rice-chex.ai.mit.edu ([128.52.38.46]) by Xerox.COM ; 06 OCT 88 17:08:48 PDTReceived: by rice-chex.ai.mit.edu; Thu, 6 Oct 88 20:09:35 EDTDate: Thu, 6 Oct 88 20:09:35 EDTFrom: dick@wheaties.ai.mit.edu (Richard C. Waters)Message-Id: <8810070009.AA20226@rice-chex.ai.mit.edu>To: masinter.paIn-Reply-To: masinter.pa@xerox.com's message of 6 Oct 88 16:19 PDT <881006-161913-1642@Xerox>Subject: Issue: STRUCTURE-INFO (Version 1)Given CLOS, I should hope that the proposal is no longer necessary.If it is necessary, then there is something missing in CLOS.*start*01418 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 06 OCT 88 16:23:22 PDTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 6 Oct 88  16:23:14 PDTReceived: from Semillon.ms by ArpaGateway.ms ; 06 OCT 88 16:19:13 PDTDate: 6 Oct 88 16:19 PDTFrom: masinter.paSubject: Re: Issue: STRUCTURE-INFO (Version 1)In-reply-to: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>'s message of Fri, 24 Jun 88 13:59 EDTTo: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: CL-Cleanup@SAIL.STANFORD.EDU, DICK@WHEATIES.AI.MIT.EDUMessage-ID: <881006-161913-1642@Xerox>Is this proposal still necessary?Date: Tue, 20 Sep 88 19:46 PDTFrom: Gregor.paSubject: Re: [Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>: Issue:STRUCTURE-INFO (Version 1)]To: masinter.paFcc: BD:>Gregor>mail>outgoing-mail-4.text.newestIn-Reply-To: The message of 20 Sep 88 17:42 PDT from masinter.paMessage-ID: <19880921024606.6.GREGOR@PORTNOY.parc.xerox.com>Line-fold: noI don't have time to write this up.  But here is some code:(defun structurep (x)  (typep (class-of x) 'structure-class))(defun structure-contents (x)  (mapcar #'(lambda (slot-description)	      (let ((name (slot-description-name slot-description)))		(list name (slot-value x name))))	  (class-slots (class-of x))))-------