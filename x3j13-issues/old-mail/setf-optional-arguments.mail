*start*04808 00024 USaReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 01 FEB 89 11:40:06 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 1 Feb 89  11:40:03 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 531729; Wed 1-Feb-89 14:38:03 ESTDate: Wed, 1 Feb 89 14:37 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: SETF-OPTIONAL-ARGUMENTS (Version 1)To: CL-Cleanup@SAIL.Stanford.EDUMessage-ID: <890201143749.0.KMP@BOBOLINK.SCRC.Symbolics.COM>Issue:        SETF-OPTIONAL-ARGUMENTSForum:	      CleanupReferences:   SETF (CLtL pp94-97)Category:     CLARIFICATION/CHANGEEdit history: 01-Feb-89, Version 1 by PitmanStatus:	      For Internal DiscussionProblem Description:  The description of SETF is silent on the question of how to treat  place forms for functions which permit optional arguments. For  example, it says that you can SETF a GETHASH expression, but it  doesn't say what that means when the optional argument is provided.  A consequence of any outcome of this clarification should be to   advise users about how they should write SETF methods of their own,  since enforcing any chosen protocol requires programmer cooperation.Test Case:  (DEFVAR *HT* (MAKE-HASH-TABLE))		;Line 1  (GETHASH 'A *HT*) => NIL, NIL, NIL		;Line 2  (SETF (GETHASH 'A *HT* 0) 0) => 0		;Line 3  (GETHASH 'A *HT* 0) => 0, T, A		;Line 4  (GETHASH 'A *HT*) => ??			;Line 5Proposal (SETF-OPTIONAL-ARGUMENTS:DISALLOW-OPTIONALS):  Define that when SETF is called on a place which permits optionals,  it is an error to specify the optionals.  This makes line 3 of the test case have "undefined consequences".Proposal (SETF-OPTIONAL-ARGUMENTS:IGNORE-OPTIONALS):  Define that when SETF is called on a place which permits optionals,  the optional arguments are ignored.  This makes the result on line 5 of the test case be 0, T, A.Proposal (SETF-OPTIONAL-ARGUMENTS:INVERT-EXACTLY):  Define that when SETF is called on a place which permits optionals,  only the effect of that particular pattern of optionals needs be updated.  This makes the result on line 5 of the test case be NIL, NIL, NIL.Proposal (SETF-OPTIONAL-ARGUMENTS:EXPLICITLY-VAGUE):  Define that when SETF is called on a place which permits optionals,  the implementation is free to either ignore the optional arguments  or to exactly invert the expression.  This makes the result on line 5 of the test case be either   NIL, NIL, NIL or 0, T, A.Rationale:  For that programmers of portable code will know what to expect,  implementations should either explicitly agree on this, or they  should explicitly agree to disagree...  DISALLOW-OPTIONALS avoids what some might see as a questionable  situation.  IGNORE-OPTIONALS makes the behavior of later accesses without the  optional more reliable in some cases. It also eliminates the need  to guard against an optional creeping in when a macro is   constructing a SETF form from other code.   INVERT-EXACTLY permits the implementation to optimize storage usage  in some cases. It also gives what some feel is a cleaner `conceptual'  description of the overall intent of SETF.  EXPLICITLY-VAGUE is a fall-back in case of committee deadlock.Current Practice:  Symbolics Genera and Symbolics Cloe implement IGNORE-OPTIONALS.Cost to Implementors:  Numerous highly localized changes.  If a particular implementation has documented its behavior on this point  and is forced to change, some documentation impact might occur.Cost to Users:  The situation is currently vague enough that correct code should probably  not be relying on the behavior in question. However, in practice, some  implementation-specific code could be broken, depending on the outcome.Cost of Non-Adoption:  A gratuitously vague specification.Benefits:  Defining this clearly would allow both for portable programs to know  what to expect, and some of the possible options would increase the  space of possible constructs available for use.Aesthetics:  Each proposal has an angle on aesthetic appeal which is closely coupled  with the rationale for choosing it.Discussion:  Pitman's feelings on this will differ depending on what turns out to  be current practice. His preference leans toward IGNORE-OPTIONALS because  he guesses that's current practice in most implementations, and hence  offers greatest linguistic stability. If it turns out that implementations  vary widely in current practice, though, his preference might lean more  toward INVERT-EXACTLY due to aesthetic appeal.*start*04808 00024 USaReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 01 FEB 89 11:40:06 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 1 Feb 89  11:40:03 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 531729; Wed 1-Feb-89 14:38:03 ESTDate: Wed, 1 Feb 89 14:37 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: SETF-OPTIONAL-ARGUMENTS (Version 1)To: CL-Cleanup@SAIL.Stanford.EDUMessage-ID: <890201143749.0.KMP@BOBOLINK.SCRC.Symbolics.COM>Issue:        SETF-OPTIONAL-ARGUMENTSForum:	      CleanupReferences:   SETF (CLtL pp94-97)Category:     CLARIFICATION/CHANGEEdit history: 01-Feb-89, Version 1 by PitmanStatus:	      For Internal DiscussionProblem Description:  The description of SETF is silent on the question of how to treat  place forms for functions which permit optional arguments. For  example, it says that you can SETF a GETHASH expression, but it  doesn't say what that means when the optional argument is provided.  A consequence of any outcome of this clarification should be to   advise users about how they should write SETF methods of their own,  since enforcing any chosen protocol requires programmer cooperation.Test Case:  (DEFVAR *HT* (MAKE-HASH-TABLE))		;Line 1  (GETHASH 'A *HT*) => NIL, NIL, NIL		;Line 2  (SETF (GETHASH 'A *HT* 0) 0) => 0		;Line 3  (GETHASH 'A *HT* 0) => 0, T, A		;Line 4  (GETHASH 'A *HT*) => ??			;Line 5Proposal (SETF-OPTIONAL-ARGUMENTS:DISALLOW-OPTIONALS):  Define that when SETF is called on a place which permits optionals,  it is an error to specify the optionals.  This makes line 3 of the test case have "undefined consequences".Proposal (SETF-OPTIONAL-ARGUMENTS:IGNORE-OPTIONALS):  Define that when SETF is called on a place which permits optionals,  the optional arguments are ignored.  This makes the result on line 5 of the test case be 0, T, A.Proposal (SETF-OPTIONAL-ARGUMENTS:INVERT-EXACTLY):  Define that when SETF is called on a place which permits optionals,  only the effect of that particular pattern of optionals needs be updated.  This makes the result on line 5 of the test case be NIL, NIL, NIL.Proposal (SETF-OPTIONAL-ARGUMENTS:EXPLICITLY-VAGUE):  Define that when SETF is called on a place which permits optionals,  the implementation is free to either ignore the optional arguments  or to exactly invert the expression.  This makes the result on line 5 of the test case be either   NIL, NIL, NIL or 0, T, A.Rationale:  For that programmers of portable code will know what to expect,  implementations should either explicitly agree on this, or they  should explicitly agree to disagree...  DISALLOW-OPTIONALS avoids what some might see as a questionable  situation.  IGNORE-OPTIONALS makes the behavior of later accesses without the  optional more reliable in some cases. It also eliminates the need  to guard against an optional creeping in when a macro is   constructing a SETF form from other code.   INVERT-EXACTLY permits the implementation to optimize storage usage  in some cases. It also gives what some feel is a cleaner `conceptual'  description of the overall intent of SETF.  EXPLICITLY-VAGUE is a fall-back in case of committee deadlock.Current Practice:  Symbolics Genera and Symbolics Cloe implement IGNORE-OPTIONALS.Cost to Implementors:  Numerous highly localized changes.  If a particular implementation has documented its behavior on this point  and is forced to change, some documentation impact might occur.Cost to Users:  The situation is currently vague enough that correct code should probably  not be relying on the behavior in question. However, in practice, some  implementation-specific code could be broken, depending on the outcome.Cost of Non-Adoption:  A gratuitously vague specification.Benefits:  Defining this clearly would allow both for portable programs to know  what to expect, and some of the possible options would increase the  space of possible constructs available for use.Aesthetics:  Each proposal has an angle on aesthetic appeal which is closely coupled  with the rationale for choosing it.Discussion:  Pitman's feelings on this will differ depending on what turns out to  be current practice. His preference leans toward IGNORE-OPTIONALS because  he guesses that's current practice in most implementations, and hence  offers greatest linguistic stability. If it turns out that implementations  vary widely in current practice, though, his preference might lean more  toward INVERT-EXACTLY due to aesthetic appeal.*start*01136 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 01 FEB 89 12:05:48 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 1 Feb 89  12:06:02 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 01 FEB 89 11:50:27 PSTDate: 1 Feb 89 11:48 PSTFrom: masinter.paSubject: Re: Issue: SETF-OPTIONAL-ARGUMENTS (Version 1)In-reply-to: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>'s message of Wed, 1 Feb 89 14:37 ESTTo: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: CL-Cleanup@SAIL.Stanford.EDUMessage-ID: <890201-115027-10967@Xerox>??? GETHASH returns two values, yet your examples has it returning 3. I'm baffled by this issue, however. "SETF may be used with GETHASH to makenew entries in a hash table. ... The default argument may be specified toGETHASH in this context; it is ignored by SETF, but may be useful in suchmacros as INCF that are related to SETF." This seems perfectly clear to me. I don't think that this is a SETF policyat all. I think you should withdraw this. *start*01231 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 01 FEB 89 12:09:49 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 1 Feb 89  12:08:24 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 531777; Wed 1-Feb-89 15:06:26 ESTDate: Wed, 1 Feb 89 15:06 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: SETF-OPTIONAL-ARGUMENTS (Version 1)To: CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <890201143749.0.KMP@BOBOLINK.SCRC.Symbolics.COM>Message-ID: <890201150608.1.KMP@BOBOLINK.SCRC.Symbolics.COM>Someone here just pointed me at p165 for GET and p167 for GETF.Also, it came up that the 2nd to nth return value in my testcase were wrong, making this a non-issue for GETHASH, sincethe found-p information reveals whether you've cheated.Nevertheless, the issue remains for user-defined functionsand we should probably offer general advice with SETF ratherthan point by point advice on consumers like GET and GETF,so that users will know what the general rule is.*start*02358 00024 USaReturn-Path: <KMP@STONY-BROOK.SCRC.Symbolics.COM>Received: from STONY-BROOK.SCRC.Symbolics.COM ([128.81.41.144]) by Xerox.COM ; 01 FEB 89 12:22:25 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 531794; Wed 1-Feb-89 15:21:34 ESTDate: Wed, 1 Feb 89 15:21 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Re: Issue: SETF-OPTIONAL-ARGUMENTS (Version 1)To: masinter.pacc: KMP@STONY-BROOK.SCRC.Symbolics.COM, CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <890201-115027-10967@Xerox>Message-ID: <890201152120.2.KMP@BOBOLINK.SCRC.Symbolics.COM>    Date: 1 Feb 89 11:48 PST    From: masinter.pa@Xerox.COM    ??? GETHASH returns two values, yet your examples has it returning 3. Sorry. That was a Genera extension creeping in. Normally Cloe protectsme from such things, but I guess I missed that one.    I'm baffled by this issue, however. "SETF may be used with GETHASH to make    new entries in a hash table. ... The default argument may be specified to    GETHASH in this context; it is ignored by SETF, but may be useful in such    macros as INCF that are related to SETF." I have to say that this case-by-case treatment upsets my sensibilities.For example, consider SUBSEQ. Its treatment of optionals is not spelled outin its description, but is apparently spelled out in the description ofDEFSETF.However, as you observe, it is apparently the status quo, and it's latein the cycle, so...    This seems perfectly clear to me. I don't think that this is a SETF policy    at all. I think you should withdraw this. Would anyone object if I instructed Kathy to make the following changes inpresentation: - For GET, GETF, and GETHASH (and any others where it occurs), change   "ignored by SETF" to "ignored by the SETF expander function for <fn>". - In the description of SETF, add wording saying:   Some place forms involve uses of accessors which take optional arguments.    Whether those optional arguments are permitted by SETF, or what their use   will be, is up to the SETF expander function and is not under the control   of SETF. The documentation for any function which accepts optional, rest,   or keyword arguments and which claims to be usable with SETF must specify   how those arguments will be treated.*start*02504 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 01 FEB 89 12:24:23 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 1 Feb 89  12:24:05 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 531794; Wed 1-Feb-89 15:21:34 ESTDate: Wed, 1 Feb 89 15:21 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Re: Issue: SETF-OPTIONAL-ARGUMENTS (Version 1)To: masinter.pacc: KMP@STONY-BROOK.SCRC.Symbolics.COM, CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <890201-115027-10967@Xerox>Message-ID: <890201152120.2.KMP@BOBOLINK.SCRC.Symbolics.COM>    Date: 1 Feb 89 11:48 PST    From: masinter.pa@Xerox.COM    ??? GETHASH returns two values, yet your examples has it returning 3. Sorry. That was a Genera extension creeping in. Normally Cloe protectsme from such things, but I guess I missed that one.    I'm baffled by this issue, however. "SETF may be used with GETHASH to make    new entries in a hash table. ... The default argument may be specified to    GETHASH in this context; it is ignored by SETF, but may be useful in such    macros as INCF that are related to SETF." I have to say that this case-by-case treatment upsets my sensibilities.For example, consider SUBSEQ. Its treatment of optionals is not spelled outin its description, but is apparently spelled out in the description ofDEFSETF.However, as you observe, it is apparently the status quo, and it's latein the cycle, so...    This seems perfectly clear to me. I don't think that this is a SETF policy    at all. I think you should withdraw this. Would anyone object if I instructed Kathy to make the following changes inpresentation: - For GET, GETF, and GETHASH (and any others where it occurs), change   "ignored by SETF" to "ignored by the SETF expander function for <fn>". - In the description of SETF, add wording saying:   Some place forms involve uses of accessors which take optional arguments.    Whether those optional arguments are permitted by SETF, or what their use   will be, is up to the SETF expander function and is not under the control   of SETF. The documentation for any function which accepts optional, rest,   or keyword arguments and which claims to be usable with SETF must specify   how those arguments will be treated.*start*00447 00024 US Date:  1 Feb 89 13:50 PSTFrom: masinter.paSubject: Re: Issue: SETF-OPTIONAL-ARGUMENTS (Version 1)In-reply-to: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>'s message of Wed, 1 Feb 89 15:21 ESTTo: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: masinterWell, I'd feel more confortable if you asked Kathy to make the change rather than if you instructed her to do so. But other than that, its OK with me.