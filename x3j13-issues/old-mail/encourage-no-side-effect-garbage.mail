*start*00769 00024 US Return-Path: <KMP@STONY-BROOK.SCRC.Symbolics.COM>Received: from STONY-BROOK.SCRC.Symbolics.COM ([128.81.41.144]) by Xerox.COM ; 21 JUL 88 12:12:13 PDTReceived: from PEWEE.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 436669; Thu 21-Jul-88 15:12:19 EDTDate: Thu, 21 Jul 88 15:11 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: proposal: encourage no side-effect garbageTo: Masinter.PAcc: KMP@STONY-BROOK.SCRC.Symbolics.COMIn-Reply-To: <8807202200.AA15969@trwrb.TRW.COM>Message-ID: <880721151146.9.KMP@PEWEE.SCRC.Symbolics.COM>[Others removed.]The obvious name would be ENCOURAGE-NO-SIDE-EFFECT-GARBAGE.That's a little tedious. If you're going to rename it, please do it soon.*start*01404 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 21 JUL 88 06:24:02 PDTReceived: from SEF1.SLISP.CS.CMU.EDU ([128.2.218.13]) by SAIL.Stanford.EDU with TCP; 21 Jul 88  06:22:28 PDTReceived: from SEF1.SLISP.CS.CMU.EDU by SEF1.SLISP.CS.CMU.EDU; 20 Jul 88 22:59:15 EDTTo: trwrb!smpvax1!jrg@ucbvax.berkeley.educc: cl-cleanup@sail.stanford.eduSubject: Re: proposal: encourage no side-effect garbage In-reply-to: Your message of Wed, 20 Jul 88 15:00:40 -0700.             <8807202200.AA15969@trwrb.TRW.COM> Date: Wed, 20 Jul 88 22:58:48 EDTFrom: Scott.Fahlman@B.GP.CS.CMU.EDUI share Joe Ginder's view that we ought to encourage Common Lispimplementors not to cons promiscuously, but I don't think that suchnon-binding encouragements belong in the standard, and I don't think weought to make cons-avoidance a requirement.  Users, and particularly largevendors like Inference, should consider consing behavior as an importantcriterion in choosing a Lisp, and should let vendors know that this isat least as important to them as shaving a few microseconds off TAK.If the standard is going to contain such encouragements, we should alsoencourage implementors to be fast, stick to the standard, produce excellentdocumentation, and fix bugs within ten days...-- Scott*start*01054 00024 USaReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 20 JUL 88 17:12:57 PDTReceived: from ucbvax.berkeley.edu by SAIL.Stanford.EDU with TCP; 20 Jul 88  17:11:58 PDTReceived: by ucbvax.berkeley.edu (5.59/1.28)	id AA01259; Wed, 20 Jul 88 17:09:09 PDTFrom: trwrb!smpvax1!jrg@ucbvax.Berkeley.EDUReceived: by trwrb.TRW.COM (5.51/1.36)	id AA17562; Wed, 20 Jul 88 15:48:35 PDTDate: Wed, 20 Jul 88 15:48:35 PDTMessage-Id: <8807202248.AA17562@trwrb.TRW.COM>To: cl-cleanup@sail.stanford.eduSubject: re: encourage no side-effect garbageMy last comment in my proposal should be amended to say that what Ifind distasteful is storage allocated in executing a Common Lispfunction that not returned to me as part of the return value ANDbecomes garbage immediately upon return of the function.  ObviouslyLisp maintains internal state that includes allocated storage notavailable to the user; this is not the object of my "distaste".*start*02602 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 20 JUL 88 17:33:52 PDTReceived: from ucbvax.berkeley.edu by SAIL.Stanford.EDU with TCP; 20 Jul 88  17:32:42 PDTReceived: by ucbvax.berkeley.edu (5.59/1.28)	id AA09177; Wed, 20 Jul 88 15:30:24 PDTFrom: trwrb!smpvax1!jrg@ucbvax.berkeley.eduReceived: by trwrb.TRW.COM (5.51/1.36)	id AA15969; Wed, 20 Jul 88 15:00:40 PDTDate: Wed, 20 Jul 88 15:00:40 PDTMessage-Id: <8807202200.AA15969@trwrb.TRW.COM>To: cl-cleanup@sail.stanford.eduSubject: proposal: encourage no side-effect garbageIssue:         ENCOURAGE NO SIDE-EFFECT GARBAGEReferences:    CLtLCategory:      ADDITIONEdit history:  Version 1, 20-Jul-88, GinderProblem description:Many Common Lisp implementation create garbage as a side effect ofexecuting standard Common Lisp functions.  Under some circumstances,this renders an Common Lisp "primitive" provided according to CLtLunusable by applications under serious performance requirements orvirtual or physical memory space limitations.Proposal:Strongly encourage (not require) Common Lisp implementations to manageinternally-allocated storage in a manner so as not to generate garbage.Explicitly point out that the quality of a Common Lisp implementation isdirectly related to how well it solves this problem.Rationale:Some Common Lisp programmers need to write programs that react inreal-time to monitor physical processes or react to crisis situations.It is imperative that some programs not be interrupted by a GC nor growso large by deferring GC that performance degrades.  It should bepossible to write programs with static memory requirements in CommonLisp.Current practice:Programmers replace Common Lisp functions with private versions thatdo not create garbage as necessary.Cost to Users:No cost, this is upward compatible.  (Users may get to throw away somecode, though!)Cost of non-adoption:Those programmers needing to avoid garbage creation can't or mustre-write parts of Common Lisp.Benefits:Unnecessary GC's will be avoided.  Common Lisp programs will work in amore predictable manner.  Side-effect generation of garbage by animplementation will become a more visible criterion for judging thequality of an implementation.Esthetics:Neutral to vastly improved, depending on your orientation.  It isextremely distasteful to me for a Common Lisp function to allocate morestorage than it returns to me as a value.--Joe Ginder, Inference*start*01153 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 14 SEP 88 22:22:58 PDTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 14 Sep 88  22:22:00 PDTReceived: from Cabernet.ms by ArpaGateway.ms ; 14 SEP 88 22:19:39 PDTDate: 14 Sep 88 22:19 PDTFrom: masinter.paSubject: re: encourage no side-effect garbageIn-reply-to: trwrb!smpvax1!jrg@ucbvax.Berkeley.EDU's message of Wed, 20 Jul 88 15:48:35 PDTTo: trwrb!smpvax1!jrg@ucbvax.Berkeley.EDUcc: cl-cleanup@sail.stanford.eduMessage-ID: <880914-221939-1901@Xerox>I'd like to withdraw this issue from discussion.The cleanup committee is constituted to consider changes to the Language thatthe standard describes.  Whether the standard should have a (non-binding)section on implementation notes is really up to the editor and the editorialcommittee. I think it should, but it doesn't belong as a "cleanup" to the language.I think this is the sentiment that was expressed by others, but I wanted to givefinal notice before moving it to the "withdrawn" category.