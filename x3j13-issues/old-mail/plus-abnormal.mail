*start*01422 00024 US Return-Path: <X3J13-mailer@SAIL.Stanford.EDU>Received: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 08 MAR 89 05:40:05 PSTReceived: from decwrl.dec.com by SAIL.Stanford.EDU with TCP; 8 Mar 89  05:20:36 PSTReceived: by decwrl.dec.com (5.54.5/4.7.34)	id AA27193; Wed, 8 Mar 89 05:18:36 PSTMessage-Id: <8903081318.AA27193@decwrl.dec.com>Received: by decwrl.dec.com (5.54.5/4.7.34)	for x3j13@sail.stanford.edu; id AA27193; Wed, 8 Mar 89 05:18:36 PSTFrom: chapman%aitg.DEC@decwrl.dec.comDate: 8 Mar 89 08:18To: x3j13@sail.stanford.edu, skona%csilvax@hub.ucsb.eduSubject: Issue: PLUS-ABNORMALIssue:        PLUS-ABNORMALReferences:   +, ++, +++ (p. 325)Category:     CLARIFICATIONEdit history: 1-MAR-89, Version 1 by ChapmanProblem Description:The description of +, ++, and +++does not mention the possibility of abnornal termination ofthe evaluation of the variable {\tt +}.Are the values associated with {\tt ++}, and {\tt +++} are updated?Proposal (PLUS-ABNORMAL:UPDATE)If the evaluation of the variable {\tt +} is aborted for some reason,then the values associated with {\tt ++}, and {\tt +++} are updated.Rationale:This clarification is primarily to establish the contents of thesevariables in all cases.Current Practice:VAX Lisp updates the values.Adoption Cost:?Benefits:Disambiguity.Conversion Cost:?Aesthetics:None.Discussion:*start*03452 00024 USaReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 08 MAR 89 11:17:12 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 8 Mar 89  11:17:44 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 552995; Wed 8-Mar-89 14:14:38 ESTDate: Wed, 8 Mar 89 14:14 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PLUS-ABNORMALTo: chapman%aitg.DEC@decwrl.dec.comcc: CL-Cleanup@SAIL.Stanford.EDU, skona%csilvax@hub.ucsb.eduIn-Reply-To: <8903081318.AA27193@decwrl.dec.com>Message-ID: <890308141430.3.KMP@BOBOLINK.SCRC.Symbolics.COM>Personally, I think it follows as a logical inductive consequence of thedescription on p325 that this is already true. However, if someonethinks it needs to be stated explicitly, that's fine.The proposal is poorly worded in a few places because it talks aboutthe evaluation of + when it should refer to the evaluation of the `input expression' or some such.(The proposal is possibly incomplete in that if you're going to specifythis, you might also want to specify the same thing for the variable -.Within a use of #. the variable - is usually bound to the same as + . :-)I wonder if it's a good idea to be so specific about all this though.There are other gray areas that we might want to specify as well, andwe may quickly end up infringing on `the environment.' Other problems I've had with these variables are: - Some implementations do not update * and company when the result   was generated by (VALUES).   Symbolics does this. It's in violation of CLtL, but I happen to   think that it's a good idea anyway since it can't break programs   and since it's what makes it really useful to have DESCRIBE and   PPRINT return that. Otherwise, they might as well return NIL.   I really think CL made a mistake on this one. - Some debuggers do not maintain +, *, etc. while you're debugging,   while others do.   I think it's correct to make them available. When I used to use   Vaxlisp, they were not made available, for example. - Some debuggers that make +, *, etc. available in the debugger   do so by binding. Others continue to SETQ the same variables.   I think continuing to SETQ the same variables is most useful,   because it means you can still get back to the values you made   in the debugger after you return.  However, I think others   could legitimately disagree. - Of the debuggers which make +, *, etc. available by binding, not   all initialize the values to the same values from the outer   context.   I happen to think that if you do it this way, the initial values   should be the values of the `outer' variables.This list is probably not exhaustive.If any of these issues were to be raised, I think they should be raisedwithin the bounds of this proposal and not in a separate one, tominimize paperwork.I kind of think that if we want to do anything with +, ++, etc.  it maybe to say that they are reserved for the implementation to assign as itsees fit, and to give only vague guidelines beyond that -- referringpeople to the implementation's manual for specifics.If further revisions of the proposal are submitted, the few occurrencesof {\tt ...} should be dropped as unnecessary.*start*02139 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 15-Mar-89 07:41:35 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 15 MAR 89 07:41:36 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 15 Mar 89  07:41:36 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 15 MAR 89 07:33:42 PSTDate: 15 Mar 89 07:33 PSTFrom: masinter.paSubject: Re: Issue: PLUS-ABNORMAL (Version 1)In-reply-to: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>'s message of Wed, 8 Mar 89 14:14 ESTTo: CL-Cleanup@SAIL.Stanford.EDU, skona%csilvax@hub.ucsb.eduMessage-ID: <890315-073342-3688@Xerox>I agree with KMP's "... if we want to do anything with +, ++, etc.  it maybe to say that they are reserved for the implementation to assign as itsees fit, and to give only vague guidelines beyond that -- referringpeople to the implementation's manual for specifics."I'm uncomfortable "pinning" down +, ++ and +++, since they cannot be usedreasonably by any portable code. The notion of "evaluation" and "aborting" is fairly complex when there areseparate read-eval-print loops, debuggers, etc.  For example, it seemedreasonable to update *, ** once the values had been computed but beforethey had been printed, in the case that the printing was aborted. The"input" variables (-, +, ++, ...) are updated immediately after READ,however.In fact, the situation was more complicated because of the addition ofinterleaved history lists; the history list itself maintains a corrolatedinput-output history in "prompt" order, while there's a global ("lastvalue") IT that is shared by all Execs. ("Prompt" order is different than"input" order, since the event number in the history list is allocated atthe time the prompt is generated, rather than when the input is complete.)At one time I wanted to push for removing +, ++, +++, - from the standardcompletely for what might be called 'aesthetic' grounds. I think they arethe only symbols in CL with unrelated value & function interpretations, forexample.*start*00712 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 17-Mar-89 23:19:09 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 17 MAR 89 23:19:08 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 17 Mar 89  23:20:10 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 17 MAR 89 23:17:01 PSTDate: 17 Mar 89 23:16 PSTFrom: masinter.paSubject: Re: Issue: PLUS-ABNORMAL (Version 1)In-reply-to: masinter.pa's message of 15 Mar 89 07:33 PSTTo: CL-Cleanup@SAIL.Stanford.EDU, skona%csilvax@hub.ucsb.eduMessage-ID: <890317-231701-3536@Xerox>Can we drop this one? Complaints only.