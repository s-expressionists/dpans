*start*03621 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 23 FEB 89 14:12:28 PSTReceived: from NSS.Cs.Ucl.AC.UK by SAIL.Stanford.EDU with TCP; 23 Feb 89  14:10:39 PSTReceived: from aiai.edinburgh.ac.uk by NSS.Cs.Ucl.AC.UK   via Janet with NIFTP           id aa11723; 23 Feb 89 22:00 GMTDate: Thu, 23 Feb 89 22:00:42 GMTMessage-Id: <25126.8902232200@subnode.aiai.ed.ac.uk>From: Jeff Dalton <jeff%aiai.edinburgh.ac.uk@NSS.Cs.Ucl.AC.UK>Subject: Potential issue: MACRO-SPECIAL-FORMSTo: cl-compiler@sail.stanford.edu, cl-cleanup@sail.stanford.eduThere's a problem that's been bothering me from time-to-time, andI would like to have it cleared up one way or another.  I've actuallymentioned it several times in the context of other issues, but itnever caught on.I won't put it in official issue format yet, but I am certainlywilling to do so.  One problem is that I'm not sure whether the rightforum is Cleanup or Compiler.Problem:  On page 57, CLtL explains that the list of special forms is kept small  "because any program-analyzing program must have special knowledge  about every type of special form."  It goes on to say "Such a program  needs no special knowledge about macros because it is simple to expand  the macro and operate on the resulting expansion."  Indeed, although an implementation is permitted to implement as a  special form any construct described by CLtL as a macro, it is  required to provide "an equivalent macro definition" [also p 57].  However, the implementation note on page 58 explicitly allows the  macro definition to produce an expansion that contains implementation-  dependent special forms, thus making the requirement for an equivalent  macro an empty one.  Consequently, program-analyzing programs are not promised anything of  value.Proposal:  Remove the permission granted by the implementation note on page 57.  Require that the macro expansion of any construct described as a macro  in Common Lisp not contain any implementation-specific special forms.A secondary problem:  The implementation note on page 58 claims "there is no problem  with a macro expansion containing calls to implementation-dependent  functions."  Unfortunately, that is not quite true.  For example, a special form  (sf . args) might expand to (do-an-sf '(sf . args)), where do-an-sf  is an implementation-dependent function.  Such functions are  essentially special forms in disguise.  A program-analyzing program learns nothing of value from such an  expansion. Not quite a Proposal:  This one is harder, because it is difficult (and perhaps impossible?)  to precisely characterize the class of acceptable functions.    The basic goal is that the intent of the macro definition should be  evident in the expansion.  Subexpressions of the macro call that are  identified syntactically as forms should appear as forms in the  expansion, variables should appear as variables, and so on.  But we  can't say they must appear only as forms, variables, and so on; so  it's not clear that the goal is an attainable one.  There are  presumably other problems as well.Consequences of non-adoption:  We would have to say that program-analyzing programs potentially  require (and therefore, to be portable, require) special knowledge  about every construct described as a special form or as a macro  in the definition of Common Lisp.I would like to eliminate the first problem even if we can'thandle the second.-- Jeff*start*02967 00024 US Return-Path: <CL-Compiler-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 23 FEB 89 15:31:27 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 23 Feb 89  15:25:25 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 544794; Thu 23-Feb-89 18:22:53 ESTDate: Thu, 23 Feb 89 18:22 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Re: Potential issue: MACRO-SPECIAL-FORMSTo: sandra%defun@cs.utah.educc: jeff%aiai.edinburgh.ac.uk@NSS.Cs.Ucl.AC.UK, cl-compiler@sail.stanford.edu, cl-cleanup@sail.stanford.eduIn-Reply-To: <8902232300.AA10426@defun.utah.edu>Message-ID: <890223182235.1.KMP@BOBOLINK.SCRC.Symbolics.COM>    Date: Thu, 23 Feb 89 16:00:17 MST    From: sandra%defun@cs.utah.edu (Sandra J Loosemore)    ...    Once I ran into a problem in VaxLisp where one of the multiple value    macros was treated as a special form by the compiler.  It    macroexpanded into some really terrible code and I was getting a    noticible performance hit by having my codewalker just blindly    expanding it.  Even though the macro definition was semantically    correct, I ended up adding a whole bunch of macros to the list of    things my codewalker treated as "special forms".  I suspect that other    implementations do similar things -- I know my A-Lisp compiler also    treated some of the multiple value macros specially as well.Just for the record, this is something that I had worried about with theCloe Flavors code walker running under Symbolics Genera, but I foundthat the Genera compiler had optimizers for many of the scary-lookingidioms that these macros produced, so the compiled code was identicalregardless of whether I compiled the expanded or unexpanded expression.I have to say that this is as it should be from a `reasonable compiler'anyway since if there are two seemingly equivalent ways to do somethingand the language spec itself does not suggest that one is likely to bemore efficient than the other, the programmer should not have to fear thatjust because he didn't say the right incantation, he won't get efficientcode.    ...    It ought to be OK for things that are documented as special forms to be    implemented as macros that expand into other implementation-dependent    special forms, since code analyzers are expected to have special    knowledge about them instead of using the macro expansion.    This is a very good point.  However, if it were to become acceptedtheory, though, it should be explicitly stated.  It affects whether I doa MACROEXPAND-1 or a MACROEXPAND after the call to SPECIAL-FORM-P.Normally I consider it safe to do either -- and slightly less cumbersometo do the latter. However, your remark suggests that I might be saferdoing the former.*start*03870 00024 US Return-Path: <CL-Compiler-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 23 FEB 89 14:53:16 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 23 Feb 89  14:45:51 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 544726; Thu 23-Feb-89 17:43:20 ESTDate: Thu, 23 Feb 89 17:43 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Potential issue: MACRO-SPECIAL-FORMSTo: jeff%aiai.edinburgh.ac.uk@NSS.Cs.Ucl.AC.UKcc: cl-compiler@sail.stanford.edu, cl-cleanup@sail.stanford.eduIn-Reply-To: <25126.8902232200@subnode.aiai.ed.ac.uk>Message-ID: <890223174301.9.KMP@BOBOLINK.SCRC.Symbolics.COM>    Date: Thu, 23 Feb 89 22:00:42 GMT    From: Jeff Dalton <jeff%aiai.edinburgh.ac.uk@NSS.Cs.Ucl.AC.UK>    ...      The implementation note on page 58 claims "there is no problem      with a macro expansion containing calls to implementation-dependent      functions."      Unfortunately, that is not quite true.  For example, a special form      (sf . args) might expand to (do-an-sf '(sf . args)), where do-an-sf      is an implementation-dependent function.  Such functions are      essentially special forms in disguise.      A program-analyzing program learns nothing of value from such an      expansion.     ...This part is not true and weakens your earlier point (which I think iswell-taken).  For example, the implementation of Flavors used by Cloeuses a code-walker to implement SYMBOL-MACROLET and that code-walker iswritten entirely in portable Common Lisp.  What is important to thatcode walker (and a whole class of code walkers like it) is that it knowwhat parts of something are `evaluated normally,' what parts are`evaluated specially,' and what parts are `not evaluated.' For example,if UNWIND-PROTECT were not a standard special form but was added by someimplementation with a macroexpander that turned  (UNWIND-PROTECT (FOO) (BAR))into   (SI::UNWIND-PROTECT-FUNCTION #'(LAMBDA () (FOO))				#'(LAMBDA () (BAR)))this would be fine. While you're right when you say I don't "learn" anythingfrom examining the latter form, you're wrong when you fail to observe thatI can `walk' the latter form reliably, while I cannot walk the former.The reason this is so is because no function in Common Lisp is prohibitedfrom doing magic things that no user could ever possibly hope to write.That shouldn't be so surprising. After all, it's not just my function abovethat has this property, but also other usually-seen-as-ordinary functionslike OPEN or CAR. I can't write them in Common Lisp either, after all.Certainly there are applications that need to have a deeper understandingof what special forms do, but there's really no hope for such applications.Indeed, such applications probably have to have specialized knowledge aboutDO as well -- and cannot even depend on its macro expander to provide "insight".    ...    I would like to eliminate the first problem even if we can't    handle the second.    ...I suggest that to do this you should drop the second cause so that argumentsagainst it don't end up detracting from the first.By the way, in considering the alternatives, please keep in mind that anotherpossible solution (besides disallowing macros expanding into implementation-specificspecial forms) is to define a code-walker interface and facility for extending sameso that extending the language to have new special forms doesn't cause a breakdownin the ability to do code-walking. I think it's reasonable to describe this asbeyond the scope of what we have time or resources to do at this point, but Iwouldn't want mention of the option to be omitted altogether.*start*02264 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 23 FEB 89 15:01:39 PSTReceived: from cs.utah.edu by SAIL.Stanford.EDU with TCP; 23 Feb 89  15:02:16 PSTReceived: from defun.utah.edu by cs.utah.edu (5.61/utah-2.1-cs)	id AA27356; Thu, 23 Feb 89 16:00:20 -0700Received: by defun.utah.edu (5.61/utah-2.0-leaf)	id AA10426; Thu, 23 Feb 89 16:00:18 -0700From: sandra%defun@cs.utah.edu (Sandra J Loosemore)Message-Id: <8902232300.AA10426@defun.utah.edu>Date: Thu, 23 Feb 89 16:00:17 MSTSubject: Re: Potential issue: MACRO-SPECIAL-FORMSTo: Jeff Dalton <jeff%aiai.edinburgh.ac.uk@NSS.Cs.Ucl.AC.UK>Cc: cl-compiler@sail.stanford.edu, cl-cleanup@sail.stanford.eduIn-Reply-To: Jeff Dalton <jeff%aiai.edinburgh.ac.uk@NSS.Cs.Ucl.AC.UK>, Thu, 23 Feb 89 22:00:42 GMTI've been burned by this problem more than once myself.  A fewadditional observations:I just recently ran into a problem with Lucid Lisp expanding thingslike DEFUN into something that included (FUNCTION (NAMED-LAMBDA ...)).In other words, it's a valid Common Lisp special form but not validCommon Lisp syntax for that form.  Perhaps a better restriction than"macros must not expand into implementation-dependent special forms"would be "macros must expand into code which has Common Lisp syntax".Once I ran into a problem in VaxLisp where one of the multiple valuemacros was treated as a special form by the compiler.  Itmacroexpanded into some really terrible code and I was getting anoticible performance hit by having my codewalker just blindlyexpanding it.  Even though the macro definition was semanticallycorrect, I ended up adding a whole bunch of macros to the list ofthings my codewalker treated as "special forms".  I suspect that otherimplementations do similar things -- I know my A-Lisp compiler alsotreated some of the multiple value macros specially as well.It ought to be OK for things that are documented as special forms to beimplemented as macros that expand into other implementation-dependentspecial forms, since code analyzers are expected to have specialknowledge about them instead of using the macro expansion.-Sandra-------*start*04248 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 27 FEB 89 09:39:06 PSTReceived: from NSS.Cs.Ucl.AC.UK by SAIL.Stanford.EDU with TCP; 27 Feb 89  09:37:15 PSTReceived: from aiai.edinburgh.ac.uk by NSS.Cs.Ucl.AC.UK   via Janet with NIFTP           id aa07069; 27 Feb 89 17:20 GMTDate: Mon, 27 Feb 89 17:23:28 GMTMessage-Id: <3256.8902271723@subnode.aiai.ed.ac.uk>From: Jeff Dalton <jeff%aiai.edinburgh.ac.uk@NSS.Cs.Ucl.AC.UK>Subject: Re: Potential issue: MACRO-SPECIAL-FORMSTo: Kent M Pitman <KMP@scrc-stony-brook.arpa>In-Reply-To: Kent M Pitman's message of Thu, 23 Feb 89 17:43 ESTCc: cl-compiler@sail.stanford.edu, cl-cleanup@sail.stanford.eduKent --Either you misunderstood what I said, or I failed to state it withsufficient clarity.  I was not trying to say that *all* implementation-dependent functions in macro expansions (of constructs documented asmacros in CLtL) are bad, but rather that *certain kinds of functions*are.  So the CltL claim that "there is no problem" with functions iswrong, and I was hoping that we might be able to rule out the badfunctions while keeping the good ones.It was not my goal to eliminate calls to all functions that do "magicthings that no user could ever possibly hope to write", because, asyou point out, many "usually-seen-as-ordinary" functions have thatproperty.  Rather, I wanted to deal with the possibility that animplementation might satisfy the letter of the law but nonetheless, byusing functions and quoted arguments instead of out-and-out specialforms, still make it impossible for code-walkers and the like toreliably find all the forms in an expression.	>    Date: Thu, 23 Feb 89 22:00:42 GMT>    From: Jeff Dalton <jeff%aiai.edinburgh.ac.uk@NSS.Cs.Ucl.AC.UK>>      For example, a special form (sf . args) might expand to>      (do-an-sf '(sf . args)), where do-an-sf is an implementation>      -dependent function.  >      A program-analyzing program learns nothing of value from such>      an expansion.> This part is not true and weakens your earlier point (which I think is> well-taken).Well, consider my example with 'sf' instantiated to UNWIND-PROTECT(which isn't defined as a macro and so isn't really a proper instanceof the problem), and 'args' to ((FOO) (BAR)).  You write:> For example, if UNWIND-PROTECT were not a standard special form but> was added by some implementation with a macroexpander that turned>>   (UNWIND-PROTECT (FOO) (BAR))> into>    (SI::UNWIND-PROTECT-FUNCTION #'(LAMBDA () (FOO))>                                 #'(LAMBDA () (BAR)))> this would be fine.I agree that this is fine.  But suppose it expanded (as in my example)to:    (DO-AN-UNWIND-PROTECT      '(UNWIND-PROTECT (FOO) (BAR)))That is not fine.  I don't think anything in CLtL rules it out,and I have seen things like it in at least one implementation.> While you're right when you say I don't "learn" anything from> examining the latter form, you're wrong when you fail to observe that> I can `walk' the latter form reliably, while I cannot walk the former.I meant "learn" to be interpreted rather loosely.  The result is nota useful one, because everything is hidden inside the QUOTE and sowould be ignored by a code-walker.> For example, the implementation of Flavors used by Cloe uses a> code-walker [...]  What is important to that code walker (and a whole> class of code walkers like it) is that it know what parts of something> are `evaluated normally,' what parts are `evaluated specially,' and> what parts are `not evaluated.'I agree about what is important.  I was trying to say somethingsimilar in the "not quite a proposal":  The basic goal is that the intent of the macro definition should be  evident in the expansion.  Subexpressions of the macro call that are  identified syntactically as forms should appear as forms in the  expansion, variables should appear as variables, and so on.  But we  can't say they must appear only as forms, variables, and so on; so  it's not clear that the goal is an attainable one.  There are  presumably other problems as well.-- Jeff*start*01003 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 08 MAR 89 08:05:32 PSTReceived: from RELAY.CS.NET by SAIL.Stanford.EDU with TCP; 8 Mar 89  08:06:31 PSTReceived: from relay2.cs.net by RELAY.CS.NET id ab09969; 8 Mar 89 9:16 ESTReceived: from draper.com by RELAY.CS.NET id ab28425; 8 Mar 89 9:10 ESTDate: Wed, 8 Mar 89 08:02 ESTFrom: "Steve Bacher (Batchman)" <SEB1525@draper.com>Subject: Re: Potential issue: MACRO-SPECIAL-FORMSTo: cl-cleanup@SAIL.STANFORD.EDUX-VMS-To: CL-CLEANUP,SEB1525I'd agree with turning macros back into special forms provided that CLdefines a code-walker as part of the language.  Such a code-walker shouldaccept functions as user-provided arguments to do things to each evaluableform, each occurrence of a variable, etc., etc. - in other words, all thepoints at which interesting stuff is done by real code-walkers.  Proposal, anybody?*start*02665 00024 US Return-Path: <CL-Compiler-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 07 MAR 89 18:33:36 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 7 Mar 89  18:24:55 PSTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 552620; Tue 7-Mar-89 21:21:40 ESTDate: Tue, 7 Mar 89 21:21 ESTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Re: Potential issue: MACRO-SPECIAL-FORMSTo: Jeff Dalton <jeff%aiai.edinburgh.ac.uk@NSS.Cs.Ucl.AC.UK>cc: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>, cl-compiler@sail.stanford.edu, cl-cleanup@sail.stanford.eduIn-Reply-To: <3256.8902271723@subnode.aiai.ed.ac.uk>Message-ID: <19890308022127.7.MOON@EUPHRATES.SCRC.Symbolics.COM>Just a comment: I really believe that CLtL's goal of minimizing thenumber of special forms that a code-analyzer has to understand byrelying on macros is misguided and non-achievable.  Consider Sandra'sexperience, which I believe other people have had in otherimplementations, with something that CLtL says is a macro, but thecompiler does a better job of compiling the macro call than of compilingthe nominally equivalent macro expansion.  Just consider how well CLtL'sgoal has been achieved in practice:  not at all.I think Common Lisp would do better to define everything that "everybodyknows" is a special form to be a special form; this would include allthe control structures, but not SETF.  My claim is that this would notmake it any more difficult to do code analysis, because in practice codeanalyzers have to know about most of those forms anyway, and because theextra work to make a typical code analyzer know about a typical specialform, even something as complicated as DO, is usually fairly small,certainly less work than figuring out what weird macro expansions allthe implementations in the world will use for DO and making sure thecode analyzer works right for each of them.  This is even more true whenyou use a pattern-driven code analyzer, such as the one I wrote in 1983and have given to everyone who asked, or the one in InterlispMasterScope (which was my model, although I didn't look at the detailedcode).An alternative position that I'd consider would be to mandate the exactmacro expansion of a number of these forms, not allowing implementationsto deviate.  Essentially that would be moving these things into aportable library.  I suppose that might devolve into endles nitpickingdiscussions that we don't need.*start*01105 00024 USaReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 09 MAR 89 19:19:51 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 9 Mar 89  19:19:59 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 09 MAR 89 19:14:55 PSTDate: Thu, 9 Mar 89 19:14 PSTFrom: Gregor.paSubject: Re: Potential issue: MACRO-SPECIAL-FORMSTo: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>cc: Jeff Dalton <jeff%aiai.edinburgh.ac.uk@NSS.Cs.Ucl.AC.UK>, Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>, cl-compiler@sail.stanford.edu, cl-cleanup@sail.stanford.eduFcc: BD:>Gregor>mail>outgoing-mail-5.text.newestIn-Reply-To: <19890308022127.7.MOON@EUPHRATES.SCRC.Symbolics.COM>Message-ID: <19890310031441.0.GREGOR@SPIFF.parc.xerox.com>Line-fold: noI agree with Moon's position on this.I have written my own code walker for use in PCL.  I keep having to addspecial forms to it anyways, and it turns out it is much easier to dothat than deal with screwy "expansions" of "macros".-------*start*01274 00024 US GV-Info: CL-Compiler-mailer@SAIL.Stanford.EDU at 14-Mar-89 17:39:10 from AGReturn-Path: <CL-Compiler-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 14 MAR 89 17:39:11 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 14 Mar 89  17:32:00 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 14 MAR 89 16:49:34 PSTDate: 14 Mar 89 16:48 PSTFrom: masinter.paSubject: Re: Potential issue: MACRO-SPECIAL-FORMSIn-reply-to: Gregor.pa's message of Thu, 9 Mar 89 19:14 PSTTo: Gregor.pa, David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>, Jeff Dalton <jeff%aiai.edinburgh.ac.uk@NSS.Cs.Ucl.AC.UK>, Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>, cl-compiler@sail.stanford.edu, cl-cleanup@sail.stanford.eduMessage-ID: <890314-164934-2319@Xerox>a) if anything is going to happen on this at the next meeting, we need aproposal writeup. This week.b) I like the proposal (in Jeff's oiginal "potential issue"). I agree thatwe might want something stronger -- like extending the list of specialforms to include the ones that a code walker *really* has to know about,but I don't know if we can reach closure.c) I'd rather do nothing than do something wrong.