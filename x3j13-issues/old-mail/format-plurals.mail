*start*02199 00024 US Sender: Common-Lisp-mailer%SAIL.Stanford:EDU:XeroxDate: 27 Feb 89 02:01 PSTReply-to: Dave.Touretzky%cs.cmu:EDU:XeroxSubject: pluralization:  two proposalsFrom: Dave.Touretzky%B.GP.CS.CMU:EDU:XeroxTo: common-lisp%sail.stanford:EDU:XeroxReturn-Path: <Common-Lisp-mailer@SAIL.Stanford.EDU>Redistributed: Xerox-Common-Lisp^.xReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 27 FEB 89 02:01:44 PSTReceived: from DST.BOLTZ.CS.CMU.EDU ([128.2.220.61]) by SAIL.Stanford.EDU with TCP; 27 Feb 89  01:39:51 PSTReceived: from DST.BOLTZ.CS.CMU.EDU by DST.BOLTZ.CS.CMU.EDU; 27 Feb 89 04:37:12 ESTOriginal-Date: Mon, 27 Feb 89 04:37:06 ESTMessage-ID: <3127.604575426@DST.BOLTZ.CS.CMU.EDU>The ~P format directive and its : and @ variants provide only the suffixes"s" and "ies".  What about nouns whose singular forms end in "s" or"z"?  They use "es" to form their plural, e.g.   bus     -->  buses   glass   -->  glasses   buzz    -->  buzzesFirst, I propose that ~P and ~:P be modified to produce the "es" pluralform instead of "s" when given a numeric argument of -1.Second, a more ambitious proposal: how about introducing a new conditionaldirective to handle arbitrary singular/plural distinctions:  ~:@[ singular ~; plural ~]If the argument is EQL to 1, the first alternative is taken; otherwise thesecond alternative is taken.  This lets you do neat things like:  (format nil "There ~:@[is~;are~]~:* ~D~:* ~:@[wolf~;wolves~] here." 3)    ==>  "There are 3 wolves here."  (format nil "There ~:@[is~;are~]~:* ~D~:* ~:@[wolf~;wolves~] here." 1)    ==>  "There is 1 wolf here."  (format nil "Your tab comes to ~D~:* ~:@[wolfs'~;wolves'~] head~:P." -5)    ==>  "Your tab comes to -5 wolves' heads."  (format nil "Your tab comes to ~D~:* ~:@[wolf's~;wolves'~] head~:P." 1)    ==>  "Your tab comes to 1 wolf's head."Notes:1) The example with -5 shows why special plural forms can't simply behandled with an ordinary conditional by writing  ~[plural~;singular~:;plural~]2) The pluralization conditional is also useful for handling things likepossessive forms (wolf's vs. wolves') and the verb "be" (is vs. are).-- Dave*start*01306 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 27 FEB 89 15:06:10 PSTReceived: from lucid.com by SAIL.Stanford.EDU with TCP; 27 Feb 89  15:06:24 PSTReceived: from pitney-bowes ([192.9.200.50]) by heavens-gate.lucid.com id AA00328g; Mon, 27 Feb 89 14:59:55 PSTReceived: by pitney-bowes id AA02864g; Mon, 27 Feb 89 14:58:31 PSTDate: Mon, 27 Feb 89 14:58:31 PSTFrom: Jim McDonald <jlm@lucid.com>Message-Id: <8902272258.AA02864@pitney-bowes>To: gls@Think.COMCc: cl-cleanup@sail.stanford.eduIn-Reply-To: Guy Steele's message of Mon, 27 Feb 89 13:10:47 EST <8902271810.AA18268@verdi.think.com>Subject: [Dave.Touretzky@B.GP.CS.CMU.EDU: pluralization:  two proposals]Has anyone thought about what will happen to FORMAT features such as~P, ~R, ~:R (ordinals), etc. once Common Lisp finally supportsmultiple languages?   Will English retain a preferred status, or willthere be analogous options for other languages?  Touretzky's proposal would seem to make it easier to accomodateplurals for other languages, at least those that pluralize in a manner similar to the English pattern for -1, 0, 1, 2, 3 etc.  Are thereobvious languages for which it breaks down?  jlm*start*01216 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 06 MAR 89 17:18:05 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 6 Mar 89  17:17:46 PSTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 551822; Mon 6-Mar-89 20:15:04 ESTDate: Mon, 6 Mar 89 20:14 ESTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: [Dave.Touretzky@B.GP.CS.CMU.EDU: pluralization:  two proposals]To: Guy Steele <gls@Think.COM>, Dave.Touretzky@B.GP.CS.CMU.EDUcc: cl-cleanup@sail.stanford.eduIn-Reply-To: <8902271810.AA18268@verdi.think.com>Message-ID: <19890307011451.1.MOON@EUPHRATES.SCRC.Symbolics.COM>I see no reason why this can't be handled by programming in Lisprather than adding new syntax to FORMAT.Guy: I'm still pissed at you, even after more than ten years, foradding programming language features to FORMAT after we had allagreed not to do that.  OK, I admit I'm still speaking to you, andI admit that I use the features myself.  But I still think theyare wrong.*start*02005 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 07 MAR 89 10:54:22 PSTReceived: from Think.COM by SAIL.Stanford.EDU with TCP; 7 Mar 89  10:54:47 PSTReceived: from fafnir.think.com by Think.COM; Tue, 7 Mar 89 13:23:05 ESTReturn-Path: <gls@Think.COM>Received: from verdi.think.com by fafnir.think.com; Tue, 7 Mar 89 13:24:43 ESTReceived: by verdi.think.com; Tue, 7 Mar 89 13:21:27 ESTDate: Tue, 7 Mar 89 13:21:27 ESTFrom: Guy Steele <gls@Think.COM>Message-Id: <8903071821.AA02025@verdi.think.com>To: Moon@stony-brook.scrc.symbolics.comCc: dick@wheaties.ai.mit.eduCc: gls@Think.COM, Dave.Touretzky@b.gp.cs.cmu.edu, cl-cleanup@sail.stanford.eduIn-Reply-To: David A. Moon's message of Mon, 6 Mar 89 20:14 EST <19890307011451.1.MOON@EUPHRATES.SCRC.Symbolics.COM>Subject: [Dave.Touretzky@B.GP.CS.CMU.EDU: pluralization:  two proposals]   Date: Mon, 6 Mar 89 20:14 EST   From: David A. Moon <Moon@stony-brook.scrc.symbolics.com>   I see no reason why this can't be handled by programming in Lisp   rather than adding new syntax to FORMAT.   Guy: I'm still pissed at you, even after more than ten years, for   adding programming language features to FORMAT after we had all   agreed not to do that.  OK, I admit I'm still speaking to you, and   I admit that I use the features myself.  But I still think they   are wrong.Actually, on Tuesdays and Fridays I am pissed at myself for the samereason.  But I use them, too.  More to the point, I still have notseen an alternative that is more convenient.  But I would be happy tosee a cleanup proposal to nuke lots of formatting widgies.FORMAT and LOOP are both like Lay's Potato Chips: betcha can't eat just one!To Dick Waters: actually, in the pretty-printer proposal, perhapsFORMAT should not be the *only* interface to the pretty-printer?Maybe there should be functions one can call as well?--Guy*start*02137 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 07 MAR 89 11:34:46 PSTReceived: from Think.COM by SAIL.Stanford.EDU with TCP; 7 Mar 89  11:35:00 PSTReceived: from fafnir.think.com by Think.COM; Tue, 7 Mar 89 14:14:22 ESTReturn-Path: <gls@Think.COM>Received: from verdi.think.com by fafnir.think.com; Tue, 7 Mar 89 14:16:05 ESTReceived: by verdi.think.com; Tue, 7 Mar 89 14:12:53 ESTDate: Tue, 7 Mar 89 14:12:53 ESTFrom: Guy Steele <gls@Think.COM>Message-Id: <8903071912.AA02803@verdi.think.com>To: Dave.Touretzky@cs.cmu.eduCc: Moon@stony-brook.scrc.symbolics.com, gls@Think.COM, cl-cleanup@sail.stanford.eduIn-Reply-To: Dave.Touretzky@b.gp.cs.cmu.edu's message of Mon, 06 Mar 89 21:27:21 EST <5529.605240841@DST.BOLTZ.CS.CMU.EDU>Subject: [Dave.Touretzky@B.GP.CS.CMU.EDU: pluralization: two proposals] I believe that some languages have special dual forms (for the case ofexactly two things).  At the risk of hairing things up, allow me to proposethat there can be more than two clauses, and nonpositive numbers orpositive numbers that are too large use the last clause; if the firstclause ends with ~:; then that clause is for zero, and the others follow.Hence:(defun rats (x)  (format nil "I fixed ~!:@=!P[no~:;one~;both~;~*~D~] ~               ~*~@:!P[mouse~;mice~]" x))(rats -1) => "I fixed -1 mice"(rats 0) => "I fixed no mice"(rats 1) => "I fixed one mouse"(rats 2) => "I fixed both mice"     ;Note dual form in English!(rats 3) => "I fixed 3 mice"Hm.  Maybe ~@; should terminate a clause that handles just negativenumbers.(defun rodents (x)  (format nil "I fixed ~!:@=!P[~*~D~@;no~:;one~;both~;all the~] ~               ~*~@:!P[mouse~;mice~]" x))(rodents -1) => "I fixed -1 mice"(rodents 0) => "I fixed no mice"(rodents 1) => "I fixed one mouse"(rodents 2) => "I fixed both mice"     ;Note dual form in English!(rodents 3) => "I fixed all the mice"Um... Dave?  DAVE?  What are you doing with that stick?  NO, MOON, NO!AAAEIEAIAIEIIEIEIEIIIIIIEEIIEEEEEEEEEE!*start*02943 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 06 MAR 89 18:30:30 PSTReceived: from DST.BOLTZ.CS.CMU.EDU by SAIL.Stanford.EDU with TCP; 6 Mar 89  18:30:47 PSTReceived: from DST.BOLTZ.CS.CMU.EDU by DST.BOLTZ.CS.CMU.EDU;  6 Mar 89 21:27:35 ESTTo: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>cc: Guy Steele <gls@Think.COM>, cl-cleanup@sail.stanford.eduReply-To: Dave.Touretzky@cs.cmu.eduSubject: Re: [Dave.Touretzky@B.GP.CS.CMU.EDU: pluralization: two proposals] In-reply-to: Your message of Mon, 06 Mar 89 20:14:00 -0500.	     <19890307011451.1.MOON@EUPHRATES.SCRC.Symbolics.COM> Date: Mon, 06 Mar 89 21:27:21 ESTMessage-ID: <5529.605240841@DST.BOLTZ.CS.CMU.EDU>From: Dave.Touretzky@B.GP.CS.CMU.EDUOkay, let me state my proposal a different way:The current ~P format directive is lame; it should either be fixed orflushed.  It cannot even handle all the standard plural forms (thoserequiring "es" endings), not to mention the non-standard plurals(mouse/mice, etc.)  And of course, it's only useful for English.While it's true, as Moon points out, that we can flush the number-dependentconditional altogether and replace it with Lisp code, I think the resultingcode would be more verbose and cumbersome than what a properly designedformat directive offers.  Generating number-dependent strings (whichincludes things like the "is/are" distinction and possessives, as well asplural suffixes) is a pretty common operation, so it would be of somebenefit to streamline it.My proposal, which would work for many languages besides English, is toreplace ~P with a new conditional form which would select the singularcase only when the argument was EQL to 1.   ~:@[singular~;plural~] Negative numbers would thus automatically use the plural form, as iscorrect in English.  The standard ~[] conditional cannot handle negativesat all.  Compare the following code fragment using Lisp code (as Moonsuggests) vs. the proposed pluralization operator:(defun report (n)  (format t "~&There ~A ~D bad ~A to be fixed."    (if (eql n 1) "is" "are")    n    (if (eql n 1) "mouse" "mice")))(defun report (n)  (format t     "~&There ~:@[is~;are~]~:* ~D~:* bad ~:@[mouse~;mice] to be fixed." n))Of course, it would be better to use ~P to name this new operator; that waywe could use ~:P to combine it with the ~:* operation.  In fact, it wouldbe most convenient to make the : modifier back up one arg AFTER thedirective has been performed, and the @ modifier back up one arg BEFOREperforming the directive.  Then the above example would look like this:(defun report (n)  (format t    "~&There ~:P[is~;are~] ~D bad ~@P[mouse~;mice] to be fixed." n))The only reason not to usurp ~P for this number-dependent conditional wouldbe for compatibility with existing code.-- Dave*start*02077 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 06 MAR 89 19:12:14 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 6 Mar 89  18:55:00 PSTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 551880; Mon 6-Mar-89 21:52:37 ESTDate: Mon, 6 Mar 89 21:52 ESTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Re: [Dave.Touretzky@B.GP.CS.CMU.EDU: pluralization: two proposals] To: Dave.Touretzky@cs.cmu.educc: Guy Steele <gls@Think.COM>, cl-cleanup@sail.stanford.eduIn-Reply-To: <5529.605240841@DST.BOLTZ.CS.CMU.EDU>Message-ID: <19890307025214.5.MOON@EUPHRATES.SCRC.Symbolics.COM>    Date: Mon, 06 Mar 89 21:27:21 EST    From: Dave.Touretzky@B.GP.CS.CMU.EDU    My proposal, which would work for many languages besides English, is to    replace ~P with a new conditional form which would select the singular    case only when the argument was EQL to 1.       ~:@[singular~;plural~]Yes, this is a reasonable proposal.  It wasn't clear to me in the midst ofall the verbiage before that this was what you were proposing.  When I sayit's reasonable, that doesn't mean I'm enthusiastic about it, simply becauseI am not enthusiastic about doing anything to FORMAT.    Of course, it would be better to use ~P to name this new operator; that way    we could use ~:P to combine it with the ~:* operation.There are plenty of other letters available (although Dick Waters is usingsome of them in his portable pretty-printer).  On the other hand, since youneed to enclose something it's nice to use brackets.  I know, we couldsay that : and @ aren't enough modifiers and introduce a third one.  Somepossibilities (I forgot to check whether Waters has already staked a claimto any of these) are !, +, ., /, =, _, and `.  I skipped " and \ becauseof their significance in string syntax.  + looks the best to me.*start*01126 00024 USaReturn-Path: <KMP@STONY-BROOK.SCRC.Symbolics.COM>Received: from STONY-BROOK.SCRC.Symbolics.COM ([128.81.41.144]) by Xerox.COM ; 06 MAR 89 20:50:38 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 551920; Mon 6-Mar-89 23:50:15 ESTDate: Mon, 6 Mar 89 23:50 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: FORMAT-PLURALS [was "pluralization:  two proposals"]To: Masinter.PAcc: Dave.Touretzky@cs.cmu.edu, CL-Cleanup@SAIL.Stanford.EDUReferences: <8902272258.AA02864@pitney-bowes>,            <8902271810.AA18268@verdi.think.com>,            <3127.604575426@DST.BOLTZ.CS.CMU.EDU>,            <19890307011451.1.MOON@EUPHRATES.SCRC.Symbolics.COM>,            <19890307025332.6.MOON@EUPHRATES.SCRC.Symbolics.COM>,            <19890307025214.5.MOON@EUPHRATES.SCRC.Symbolics.COM>,            <5529.605240841@DST.BOLTZ.CS.CMU.EDU>Message-ID: <890306235009.9.KMP@BOBOLINK.SCRC.Symbolics.COM>Even if nothing gets written up on this, I'm filing this issue under theheading FORMAT-PLURALS for naming convenience.*start*05357 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 14-Mar-89 17:44:07 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 14 MAR 89 17:43:17 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 14 Mar 89  17:43:47 PSTReceived: from Cabernet.ms by ArpaGateway.ms ; 14 MAR 89 17:31:41 PSTDate: 14 Mar 89 17:31 PSTFrom: masinter.paSubject: Issue: FORMAT-PLURALS (not yet submitted)In-reply-to: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>'s message of Mon, 6 Mar 89 23:50 ESTTo: Dave.Touretzky@cs.cmu.educc: CL-Cleanup@SAIL.Stanford.EDUMessage-ID: <890314-173141-2452@Xerox>Is there a chance you could produce a revised version, in "standard"writeup format in the next day or two? There have been significantcomments since your original message. There seems to be willingnessin cleanup committee to pursue this.I don't know how much patience you have for our cumbersome procedures,especially given your 'hit ratio'. !  Format for proposals to the cleanup committee (Version 14)                    October 5, 1988Replace the text below in >> double inverted angle-brackets <<. Bebrief; leave testimonials and personal opinions to the discussion at theend. Be complete; do not expect someone else to fix or redesign parts.Spell out names (e.g., Masinter rather than LMM) and upper-case all Lispsymbols (DEFUN rather than Defun). I like it better if you write in thethird person rather than first.Remember that this is a proposal to a change to the standardfor Common Lisp, not recommendations to the editor, not a set of recommendations to Common Lisp implementors.Forum:	CleanupIssue:         >>A short descriptive label, which starts with a name               which occurs in the index of CLtL, and be a suitable               symbol in the Common Lisp style, e.g., CDR-TERMINATION.		When in doubt, let the cleanup committee assign the name.		The name should match the problem description, not the 		proposal.<<References:    >>The pages of CLtL which describe the feature being               discussed, and other references.<<Related issues: >> names of other cleanup issues about the same topic.<<Category:      >>One or more of:               CLARIFICATION -- proposal to resolve an ambiguity or case               of under-specified situation in CLtL, where this               ambiguity interferes with portability of code.               CHANGE -- proposal for an incompatible change.               ADDITION -- proposal for a compatible extension<<Edit history:  >>Author and date of submission (version 1), and author               and date of subsequent versions.<<Problem description:>>Describe the problem being addressed -- why is the current situationunclear or unsatisfactory? Avoid describing the proposal here or arguingfor its adoption. <<Proposal (>>issue-label:proposal-label<<): >> Describe as precisely aspossible what you are proposing.  This  can take the form oftext that could be dropped into the new specification document.Proposals should be for changes to Common Lisp, rather than changes toCLtL.  If necessary, propose a set of labelled alternatives here, ratherthan a single proposal. Each proposal must be a complete design; do notleave out details.  Avoid arguing for the proposal here, just describeit.<<Examples:>> Examples are samples of Common Lisp code that illustrates the issue.along with explanatory text. Please explain what the examples shoulddo, do in current implementations, and any special tricks.<<Test Cases:>> Test Cases are simple stand-alone expressions which are valid anddo not signal an error if the proposal is adhered to. (Use ASSERTif needed.)  Omit if you have none.<<Rationale:>> A one or two sentence summary of the arguments that follow. <<Current practice:>>Do some/many/no Common Lisp implementations already work this way?Survey independent Common Lisp implementations - preferably three ormore. What do they do on the test cases or examples?  What do currentuser programs do? Are there textbooks which describe this feature? <<Cost to Implementors:>>What is the cost to implementors of adopting the proposal?  How muchimplementation effort is required?  Is public-domain code available? Forpervasive changes, can the conversion be automated?<<Cost to Users:>>For incompatible changes, what is the cost to users of convertingexisting user code?  To what extent can the process be automated? How?<<Cost of non-adoption:>>How serious is it if nothing is done? <<Performance impact:>> what does the proposal do to better or worsen the size or speedof user programs and implementations? <<Benefits:>>What is better if the proposal is adopted? How serious is the problemif just left as it is? <<Esthetics:>>How does this proposal affect the simplicity of the language, ease oflearning, etc. You can spell it aesthetics if you like. <<Discussion:>> Additional arguments, discussions, endorsements, testimonials, etc.should go here. Testimonials are the least effective; the discussion shouldbe useful to someone not already with the issue or those discussing it.Avoid a blow-by-blow account of debates or recounting of history. <<