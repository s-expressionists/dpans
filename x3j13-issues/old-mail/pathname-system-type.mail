*start*04524 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 23-May-89 11:50:58 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 23 MAY 89 11:49:28 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 23 May 89  11:47:58 PDTReceived: from KENNETH-WILLIAMS.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via INTERNET with SMTP id 599426; 23 May 89 14:02:37 EDTDate: Tue, 23 May 89 14:06 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-SYSTEM-TYPE (version 1)To: CL-Cleanup@sail.stanford.eduMessage-ID: <19890523180657.8.MOON@KENNETH-WILLIAMS.SCRC.Symbolics.COM>This is a new issue.  It arose from an investigation of featuresthat are plausibly needed but missing from draft ANSI Common Lisp.This issue seems sufficiently simple and noncontroversial thatI would like to see it on the agenda for the June X3J13 meeting.Let's use the cleanup subcommittee to test the assertion that thisis a simple and noncontroversial issue.  If it's controversial,let's just drop it, otherwise let's give X3J13 a chance to votefor or against it.Issue:          PATHNAME-SYSTEM-TYPEReferences:     Internet RFC 1010, pages 24-25Related issues: PATHNAME-LOGICALCategory:       ADDITIONEdit history:   23-May-89, Version 1 by MoonProblem description:  It is sometimes necessary to write nonportable pathname manipulation code  that performs operations specific to individual file systems.  Sometimes  this is to get around inadequacies of the Common Lisp pathname model,  sometimes it is to take advantage of idiosyncratic features of a  particular file system.  Common Lisp does not provide any way to ask what  file system a pathname is for, so there is no good way for this type of  pathname manipulation code to be sure what file system it is dealing  with.  Sometimes it can tell by checking what Lisp implementation it is  running in, but as more and more implementations support network file  access, this is becoming less reliable.Proposal (PATHNAME-SYSTEM-TYPE:ADD-FUNCTION):  Add the following function:    PATHNAME-SYSTEM-TYPE pathname                               [Function]    Coerce the pathname argument to a pathname, signalling an error of type    TYPE-ERROR if the argument is not a pathname, string, or file stream.    Return a keyword symbol that identifies the type of file system this    pathname is for.  The names of these symbols are derived from the    system type names used by the Internet Domain Name system, listed in    the referenced document.  Implementations that use a file system listed    in that document, or superseding documents, should return a symbol in    the keyword package whose name comes from that document.  Examples:        :MSDOS          MS/DOS or PC/DOS        :TOPS10         TOPS-10        :TOPS20         TOPS-20         :ULTRIX         Ultrix        :UNIX           Unix with long file names (4.2 or newer)        :VM/370         VM/370        :VMS            VAX/VMS with long file names (version 4.4 or newer)        :XENIX          Xenix    The following additional symbols are specified by Common Lisp:        :LOGICAL        logical pathname (see issue PATHNAME-LOGICAL)        :UNIX-14        Unix with 14-character file name limit        :VMS-9          VAX/VMS with 9-character file name limit        NIL             system type cannot be determined    For file systems not named in the referenced document, implementations    should make up a name consistent with the spelling conventions defined    in that document.Examples:  ;; On a non-networked IBM PC:  (PATHNAME-SYSTEM-TYPE (USER-HOMEDIR-PATHNAME)) => :MSDOSRationale:  PATHNAME-SYSTEM-TYPE gives a nonportable pathname manipulation program  the basic information it needs to interpret namestrings and manipulate  pathname components.Current practice:  Symbolics Genera has had a similar feature under a different name  for many years.  A few of the keyword symbols returned by Genera  are spelled differently, merely for historical reasons.Cost to Implementors:  Trivial.Cost to Users:  None.Cost of non-adoption:  Implementation-dependent kludges will have to be used.Performance impact:  None.Benefits:  Improved esthetics.Esthetics:  Implementation-dependent kludges will not have to be used.Discussion:  None.*start*01338 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 25-May-89 12:46:45 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 25 MAY 89 12:46:49 PDTReceived: from cs.utah.edu by SAIL.Stanford.EDU with TCP; 25 May 89  12:45:12 PDTReceived: from defun.utah.edu by cs.utah.edu (5.61/utah-2.1-cs)	id AA21098; Thu, 25 May 89 13:45:33 -0600Received: by defun.utah.edu (5.61/utah-2.0-leaf)	id AA09195; Thu, 25 May 89 13:45:31 -0600From: sandra%defun@cs.utah.edu (Sandra J Loosemore)Message-Id: <8905251945.AA09195@defun.utah.edu>Date: Thu, 25 May 89 13:45:29 MDTSubject: Re: Issue: PATHNAME-SYSTEM-TYPE (version 1)To: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Cc: CL-Cleanup@sail.stanford.edu, sandra%defun@cs.utah.edu, gray@dsg.csc.ti.comIn-Reply-To: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>, Tue, 23 May 89 14:06 EDTI don't have any big objection to this proposal but I've never had anypressing need for anything like this either.  I guess I would probablyvote against it unless somebody can argue that it really offers necessary functionality, on the general principle of opposing adding things to thelanguage just because they seem hypothetically "plausible".-Sandra-------*start*01476 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 25-May-89 13:51:29 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 25 MAY 89 13:51:20 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 25 May 89  13:50:01 PDTReceived: from KENNETH-WILLIAMS.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via INTERNET with SMTP id 601062; 25 May 89 16:51:26 EDTDate: Thu, 25 May 89 16:55 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Re: Issue: PATHNAME-SYSTEM-TYPE (version 1)To: Sandra J Loosemore <sandra%defun@cs.utah.edu>cc: CL-Cleanup@sail.stanford.edu, gray@dsg.csc.ti.comIn-Reply-To: <8905251945.AA09195@defun.utah.edu>Message-ID: <19890525205530.1.MOON@KENNETH-WILLIAMS.SCRC.Symbolics.COM>    Date: Thu, 25 May 89 13:45:29 MDT    From: sandra%defun@cs.utah.edu (Sandra J Loosemore)    I don't have any big objection to this proposal but I've never had any    pressing need for anything like this either.Since you're the one who says that pathname manipulating programs arebest written by getting namestrings and doing string processing onthem, can you tell me how your programs know what syntax to expectin the namestrings?  That's what this proposal was intended to address,so if there is some other way to do that that's adequate, perhaps wedon't need this proposal.*start*03517 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 25-May-89 14:39:32 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 25 MAY 89 14:39:32 PDTReceived: from cs.utah.edu by SAIL.Stanford.EDU with TCP; 25 May 89  14:38:13 PDTReceived: from defun.utah.edu by cs.utah.edu (5.61/utah-2.1-cs)	id AA29401; Thu, 25 May 89 15:38:28 -0600Received: by defun.utah.edu (5.61/utah-2.0-leaf)	id AA09323; Thu, 25 May 89 15:38:25 -0600From: sandra%defun@cs.utah.edu (Sandra J Loosemore)Message-Id: <8905252138.AA09323@defun.utah.edu>Date: Thu, 25 May 89 15:38:24 MDTSubject: Re: Issue: PATHNAME-SYSTEM-TYPE (version 1)To: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Cc: Sandra J Loosemore <sandra%defun@cs.utah.edu>, CL-Cleanup@sail.stanford.edu, gray@dsg.csc.ti.comIn-Reply-To: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>, Thu, 25 May 89 16:55 EDT> Date: Thu, 25 May 89 16:55 EDT> From: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>> > Since you're the one who says that pathname manipulating programs are> best written by getting namestrings and doing string processing on> them, can you tell me how your programs know what syntax to expect> in the namestrings?I've never said anything like that and I think it's a crummy ideaanyway.  What I *have* said is that the only pathname operations thata portable program can expect to do that make sense on all filesystems are:1. Convert a (file-system specific) namestring to a pathname, and vice    versa.  The namestring need not appear as a literal in the program or   be manipulated by doing string processing -- for example, you might    ask the user of the application to type in a namestring or supply    one as an argument.  That's what applications written in other   programming languages such as C typically do, and there's really nothing   wrong with it because users of the application certainly know what    kind of file system their files live on.2. Test whether an object is a pathname.3. Merge two pathnames to fill in missing components.  This is the whole   point, in my view, of having pathnames at all, and where Common Lisp   wins over C -- there is a library function to do this instead of   programmers having to write their own, nonportable string-manipulation    code to do this. The point I've been trying to make is that any program that tries toconstruct pathnames by providing component values directly is bound torun into portability problems.  The file system may not support theconcept of a particular pathname component at all.  The file systemmay impose limitations on the length of the component or on whatcharacters may appear in it.  (The perverse example I've cited beforeis Cray's CTSS operating system, where files are limited to6-character names, and there is no concept of hosts, devices,directories, types, or versions.)  Components extracted from anotherpathname may not make sense in a new pathname being constructed for adifferent host.  That's why I think the right solution is really todeprecate MAKE-PATHNAME. Specifying what *might* appear in a pathname component does not fixthe fundamental nonportability of MAKE-PATHNAME, because programmershave no way of knowing whether an object which *might* be a validcomponent actually *will be* a valid component in the environment inwhich the application is run.-Sandra-------*start*02997 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 25-May-89 15:09:42 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 25 MAY 89 15:06:44 PDTReceived: from multimax.encore.com by SAIL.Stanford.EDU with TCP; 25 May 89  15:04:38 PDTReceived: from mist.encore.COM by multimax.encore.com with SMTP (5.61/25-eef)	id AA07438; Thu, 25 May 89 18:05:01 -0400Received: from localhost by mist. (4.0/SMI-4.0)	id AA09189; Thu, 25 May 89 18:04:49 EDTMessage-Id: <8905252204.AA09189@mist.>To: sandra%defun@cs.utah.edu (Sandra J Loosemore)Cc: CL-Cleanup@sail.stanford.eduSubject: Re: Issue: PATHNAME-SYSTEM-TYPE (version 1) In-Reply-To: Your message of Thu, 25 May 89 15:38:24 -0600.             <8905252138.AA09323@defun.utah.edu> Date: Thu, 25 May 89 18:04:46 EDTFrom: Dan L. Pierson <pierson@mist.encore.com>    From: sandra%defun@cs.utah.edu (Sandra J Loosemore)    Date: Thu, 25 May 89 15:38:24 MDT    The point I've been trying to make is that any program that tries to    construct pathnames by providing component values directly is bound to    run into portability problems.  The file system may not support the    concept of a particular pathname component at all.  The file system    may impose limitations on the length of the component or on what    characters may appear in it.  (The perverse example I've cited before    is Cray's CTSS operating system, where files are limited to    6-character names, and there is no concept of hosts, devices,    directories, types, or versions.)  Components extracted from another    pathname may not make sense in a new pathname being constructed for a    different host.  That's why I think the right solution is really to    deprecate MAKE-PATHNAME.     But if we restricted what Common Lisp supports to what is possible inthe most restrictive existing environment we wouldn't have modern Lispat all.There are a large number of widely used operating systems that shareda set of features including hierarchical directories, hosts, types,and sort of reasonable file name length limits.  These systems includeseveral Unix's, VMS, MS-DOS, OS/2, Mac OS, TOPS-20, Genera, etc.  If Ican write a program that uses these file name features in a way thatis portable across all of these systems without even having to knowthe idiosyncratic syntax of the less familiar systems, I'll be a veryhappy user.  The fact that my program will not run on CTSS, SCOPE,DOS/360, etc. won't bother me very much.I doubt that many new general purpose file systems are being designedwithout the basic feature set required by these facilities.  Since weare standardizing a language for future use, I suggest that we shouldworry more about easing portable programming in the systems that we_will_ be using than complaining that it's impossible to paper overall of the differences between obsolete systems.*start*01923 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 25-May-89 15:25:36 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 25 MAY 89 15:25:32 PDTReceived: from cs.utah.edu by SAIL.Stanford.EDU with TCP; 25 May 89  15:24:20 PDTReceived: from defun.utah.edu by cs.utah.edu (5.61/utah-2.1-cs)	id AA00850; Thu, 25 May 89 16:24:39 -0600Received: by defun.utah.edu (5.61/utah-2.0-leaf)	id AA09361; Thu, 25 May 89 16:24:37 -0600From: sandra%defun@cs.utah.edu (Sandra J Loosemore)Message-Id: <8905252224.AA09361@defun.utah.edu>Date: Thu, 25 May 89 16:24:36 MDTSubject: Re: Issue: PATHNAME-SYSTEM-TYPE (version 1) To: Dan L. Pierson <pierson@mist.encore.com>Cc: sandra%defun@cs.utah.edu (Sandra J Loosemore), CL-Cleanup@sail.stanford.eduIn-Reply-To: Dan L. Pierson <pierson@mist.encore.com>, Thu, 25 May 89 18:04:46 EDT> Date: Thu, 25 May 89 18:04:46 EDT> From: Dan L. Pierson <pierson@mist.encore.com>> > But if we restricted what Common Lisp supports to what is possible in> the most restrictive existing environment we wouldn't have modern Lisp> at all.Hey, that's my argument!  Issue PATHNAME-COMPONENT-CASE even says thatthis is the end goal -- to come up with the least common denominatorfor pathname component values.  I think it's the wrong goal, preciselybecause the least common denominator (at least as far as MAKE-PATHNAMEis concerned) isn't very useful.  I think we'd be better off sidestepping the whole issue and simplyputting some discussion in the standard about what kinds of pathnameoperations are portable, and which aren't.  In the absence of such adiscussion in CLtL, I've seen users (even experienced Lispimplementors, not just students) make assumptions in their programsthat inhibit portability without realizing they've done so.-Sandra-------*start*02329 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 29-May-89 13:14:31 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 29 MAY 89 13:14:19 PDTReceived: from NSFnet-Relay.AC.UK by SAIL.Stanford.EDU with TCP; 29 May 89  13:11:01 PDTReceived: from aiai.edinburgh.ac.uk by NSFnet-Relay.AC.UK   via Janet with NIFTP           id aa10070; 29 May 89 20:55 BSTDate: Mon, 29 May 89 21:00:15 BSTMessage-Id: <11096.8905292000@subnode.aiai.ed.ac.uk>From: Jeff Dalton <jeff%aiai.edinburgh.ac.uk@NSFnet-Relay.AC.UK>Subject: Re: Issue: PATHNAME-SYSTEM-TYPE (version 1)To: sandra (Sandra J Loosemore) <@cs.utah.edu:sandra@defun>, "David A. Moon" <Moon@stony-brook.scrc.symbolics.com>Cc: CL-Cleanup@sail.stanford.edu, gray%dsg.csc.ti.com@NSFnet-Relay.AC.UK> > Date: Thu, 25 May 89 16:55 EDT> > From: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>> > > > Since you're the one who says that pathname manipulating programs are> > best written by getting namestrings and doing string processing on> > them, can you tell me how your programs know what syntax to expect> > in the namestrings?> > I've never said anything like that and I think it's a crummy idea> anyway.  What I *have* said is that the only pathname operations that> a portable program can expect to do that make sense on all file> systems are:The only use Sandra gives for _pathnames_ (as opposed to strings)that's at all interesting is the ability to merge pathnames.  But,of course, that too could be done with strings.I have had a lot of difficulty understanding how pathnames aresupposed to be used in portable ways.  When I've thought I'veunderstood an issue, I often find my explanation is almost theopposite of one later given by, say, KMP.  Nonetheless, I amsure there are useful things that can be done with pathnames,if only because the Symbolics folk (who are not idiots) keepsaying so.But even if there are no completely portable uses of pathnames,I absolutely reject the argument that anything that is notcompletely portable should be eliminated from the language.I am also unhappy with the suggestion that pathnames mightbe allowed to exist nut without any MAKE-PATHNAME that constructsthem.*start*01002 00024 UU?GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 13-Jun-89 15:30:39 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 13 JUN 89 15:30:44 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 13 Jun 89  15:24:19 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 610827; 13 Jun 89 18:25:57 EDTDate: Tue, 13 Jun 89 18:25 EDTFrom: Kim Barrett <IIM@ECLA.USC.EDU>Sender: KMP@STONY-BROOK.SCRC.Symbolics.COMSubject: Issue: PATHNAME-SYSTEM-TYPE (Version 1)To: CL-Cleanup@SAIL.Stanford.EDUComments: Received from Kim Barrett by KMP on MSDOS floppy disk via US MailMessage-ID: <19890613222547.0.KMP@BOBOLINK.SCRC.Symbolics.COM>:ITS ?		;I think some of these are still around.:MACINTOSH ?:TENEX ?	;Do any still exist?  I briefly used BBN LISP on one.Any others people want to add?*start*00925 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 14-Jun-89 14:45:35 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 14 JUN 89 14:45:16 PDTReceived: from RELAY.CS.NET by SAIL.Stanford.EDU with TCP; 14 Jun 89  14:44:02 PDTReceived: from relay2.cs.net by RELAY.CS.NET id aa12107; 14 Jun 89 17:44 EDTReceived: from draper.com by RELAY.CS.NET id aa00341; 14 Jun 89 17:40 EDTDate: Wed, 14 Jun 89 13:14 EDTFrom: "Steve Bacher (Batchman)" <SEB1525@draper.com>Subject: Re: Issue: PATHNAME-SYSTEM-TYPE (Version 1)To: cl-cleanup@SAIL.STANFORD.EDUX-VMS-To: CL-CLEANUP,SEB1525OS's that don't have hierarchical directories:IBM's MVS and (unless I'm mistaken) VM, which are both very much alive,don't have hierarchical directories.  (Just ask somebody at Lucid.)					- Steve B. (Draper Lab)*start*01719 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 16-Jun-89 21:23:39 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 16 JUN 89 21:23:41 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 16 Jun 89  21:22:32 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 612464; 17 Jun 89 00:24:32 EDTDate: Sat, 17 Jun 89 00:24 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-SYSTEM-TYPE (Version 1)To: Kim Barrett <IIM@ECLA.USC.EDU>cc: CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: <19890613222547.0.KMP@BOBOLINK.SCRC.Symbolics.COM>Message-ID: <19890617042459.5.MOON@EUPHRATES.SCRC.Symbolics.COM>    Date: Tue, 13 Jun 89 18:25 EDT    From: Kim Barrett <IIM@ECLA.USC.EDU>    :ITS ?		;I think some of these are still around.    :MACINTOSH ?    :TENEX ?	;Do any still exist?  I briefly used BBN LISP on one.    Any others people want to add?There are at least four running ITS systems in daily use aroundthe world, and may be more.  But there are fewer than ten.  Justthought you'd like to know.ITS and TENEX are listed in the Internet RFC 1010 table of systemnames referenced by the proposal.  MACINTOSH is not.  Since Icouldn't find any alternate spelling in the RFC, I think this isjust an omission and MACINTOSH would be the preferred name.  I'lladd it to the list in the proposal.  I imagine Macintosh wasomitted because Apple has been a bit slow about getting into theInternet community (in addition to doing their own proprietarynetworking).*start*04206 00024 US GV-Info: X3J13-mailer@SAIL.Stanford.EDU at 16-Jun-89 21:39:11 from AGReturn-Path: <X3J13-mailer@SAIL.Stanford.EDU>Received: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 16 JUN 89 21:39:13 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 16 Jun 89  21:26:05 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 612467; 17 Jun 89 00:27:59 EDTDate: Sat, 17 Jun 89 00:28 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Reply-To: CL-Cleanup@sail.stanford.eduSubject: Issue: PATHNAME-SYSTEM-TYPE (version 2)To: X3J13@sail.stanford.eduMessage-ID: <19890617042828.6.MOON@EUPHRATES.SCRC.Symbolics.COM>Issue:          PATHNAME-SYSTEM-TYPEReferences:     Internet RFC 1010, pages 24-25Related issues: PATHNAME-LOGICALCategory:       ADDITIONEdit history:   23-May-89, Version 1 by Moon                17-Jun-89, Version 2 by Moon (add Macintosh, add discussion)Problem description:  It is sometimes necessary to write nonportable pathname manipulation code  that performs operations specific to individual file systems.  Sometimes  this is to get around inadequacies of the Common Lisp pathname model,  sometimes it is to take advantage of idiosyncratic features of a  particular file system.  Common Lisp does not provide any way to ask what  file system a pathname is for, so there is no good way for this type of  pathname manipulation code to be sure what file system it is dealing  with.  Sometimes it can tell by checking what Lisp implementation it is  running in, but as more and more implementations support network file  access, this is becoming less reliable.Proposal (PATHNAME-SYSTEM-TYPE:ADD-FUNCTION):  Add the following function:    PATHNAME-SYSTEM-TYPE pathname                               [Function]    Coerce the pathname argument to a pathname, signalling an error of type    TYPE-ERROR if the argument is not a pathname, string, or file stream.    Return a keyword symbol that identifies the type of file system this    pathname is for.  The names of these symbols are derived from the    system type names used by the Internet Domain Name system, listed in    the referenced document.  Implementations that use a file system listed    in that document, or superseding documents, should return a symbol in    the keyword package whose name comes from that document.  Examples:        :MSDOS          MS/DOS or PC/DOS        :TOPS10         TOPS-10        :TOPS20         TOPS-20         :ULTRIX         Ultrix        :UNIX           Unix with long file names (4.2 or newer)        :VM/370         VM/370        :VMS            VAX/VMS with long file names (version 4.4 or newer)        :XENIX          Xenix    The following additional symbols are specified by Common Lisp:        :LOGICAL        logical pathname (see issue PATHNAME-LOGICAL)        :MACINTOSH	MacOS (missing from RFC 1010 for some reason)        :UNIX-14        Unix with 14-character file name limit        :VMS-9          VAX/VMS with 9-character file name limit	NIL             system type cannot be determined    For file systems not named in the referenced document, implementations    should make up a name consistent with the spelling conventions defined    in that document.Examples:  ;; On a non-networked IBM PC:  (PATHNAME-SYSTEM-TYPE (USER-HOMEDIR-PATHNAME)) => :MSDOSRationale:  PATHNAME-SYSTEM-TYPE gives a nonportable pathname manipulation program  the basic information it needs to interpret namestrings and manipulate  pathname components.Current practice:  Symbolics Genera has had a similar feature under a different name  for many years.  A few of the keyword symbols returned by Genera  are spelled differently, merely for historical reasons.Cost to Implementors:  Trivial.Cost to Users:  None.Cost of non-adoption:  Implementation-dependent kludges will have to be used.Performance impact:  None.Benefits:  Improved esthetics.Esthetics:  Implementation-dependent kludges will not have to be used.Discussion:  Some people feel that this feature is unnecessary.