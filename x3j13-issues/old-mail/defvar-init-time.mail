*start*
03093 00024 USf
Return-Path: <@SAIL.STANFORD.EDU:KMP@STONY-BROOK.SCRC.Symbolics.COM>
Received: from SAIL.STANFORD.EDU by Xerox.COM ; 23 APR 87 16:54:53 PDT
Received: from SCRC-STONY-BROOK.ARPA by SAIL.STANFORD.EDU with TCP; 23 Apr 87  13:59:21 PDT
Received: from RIO-DE-JANEIRO.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 123216; Thu 23-Apr-87 16:59:34 EDT
Date: Thu, 23 Apr 87 16:59 EDT
From: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>
Subject: Issue DEFVAR-INIT-TIME (Version 1)
To: CL-Cleanup@SAIL.STANFORD.EDU
cc: KMP@STONY-BROOK.SCRC.Symbolics.COM
Message-ID: <870423165916.1.KMP@RIO-DE-JANEIRO.SCRC.Symbolics.COM>

Issue:        DEFVAR-INIT-TIME
References:   DEFVAR (p68)
Category:     CLARIFICATION
Edit history: 23-Apr-87, Version 1 by Pitman
Status:	      For Internal Discussion

Problem Description:

  The description of DEFVAR is not completely clear about the time at
  which the initialization occurs.

  On p68 it says ``VARIABLE is initialized to the result of evaluating
  the form INITIAL-VALUE unless it already has a value. The INITIAL-VALUE
  form is not evaluated unless it is used; this fact is useful if
  evaluation of the INITIAL-VALUE form does something expensive like 
  create a large data structure.''

  Although I think the original CL designers all knew what this wording
  was intended   to mean, I have discovered people who have misinterpreted
  the "unless it is used" to mean "unless the variable is used" rather 
  than "unless the initial-value is to be used". The problem is that the
  "it" is ambiguous.

  Having made this false assumption, the people I talked to thought -- 
  and understandably (if lamentably) so -- that they wouldn't know if 
  the variable was to be used until the code ran, so they had the model 
  that the intention was to provide a kind of lazy initialization that
  happened upon the variable's first unbound reference. This confusion
  appears to have been further supported by the additional verbiage about
  not creating expensive structures that are not needed.

Proposal (DEFVAR-INIT-TIME:NOT-DELAYED):

  Clarify that the evaluation of the initial value and the initialization
  happen at DEFVAR execution time (if at all).

Rationale:

  I think it was clear at design time that this was intended. The manual
  should therefore be clear.

Current Practice:

  Nearly all implementations implement the proposed interpretation.

Adoption Cost:

  The misinterpretation is much harder to implement than the proposed
  interpretation. Adoption of the changes should be straightforward.

Benefits:

  This clarification makes the semantics of an important primitive 
  more well-defined.

Conversion Cost:

  Most users presumably expect the behavior currently in practice in most
  dialects. There's not a lot of code where the difference comes into play
  anyway. Presumably the conversion cost is fairly trivial.

Aesthetics:

  Being a clarification, this really doesn't have much aesthetic effect.

Discussion:

  KMP thinks this clarification is important.

*start*
01258 00024 USa
Return-Path: <KMP@STONY-BROOK.SCRC.Symbolics.COM>
Received: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by Xerox.COM ; 29 APR 87 09:44:38 PDT
Received: from RIO-DE-JANEIRO.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 127180; Wed 29-Apr-87 12:43:47 EDT
Date: Wed, 29 Apr 87 12:43 EDT
From: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>
Subject: status of DEFVAR-INIT-TIME
To: Masinter.PA
cc: CL-Cleanup@SAIL.Stanford.EDU
In-Reply-To: <870427-130708-1239@Xerox>
Message-ID: <870429124341.5.KMP@RIO-DE-JANEIRO.SCRC.Symbolics.COM>

    Date: 27 Apr 87 13:15 PDT
    From: Masinter.pa@Xerox.COM

    This is my status file. Please mail any corrections you have.
    ...

    I think we are near completion on these, but they need writing work
    *SOON*: 
    DEFVAR-INIT-TIME, ...

I saw no reply at all to DEFVAR-INIT-TIME (other than your mail saying
to please hold off on new proposals until the ones we have get cleaned up).

In the absence of any comments on what might be wrong with this proposal
(which I personally think is pretty non-controversial), I'm not able to
produce an update. If anyone has objections (or just wants to second it
as-is), they should voice them.

*start*
00507 00024 US 
Date: 29 Apr 87 14:17 PDT
From: Masinter.pa
Subject: Re: status of DEFVAR-INIT-TIME
In-reply-to: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>'s message of Wed, 29 Apr 87 12:43 EDT
To: KMP@STONY-BROOK.SCRC.Symbolics.COM
cc: Masinter.PA, CL-Cleanup@SAIL.Stanford.EDU

I put DEFVAR-INIT-TIME in the "we can release this soon" because I presumed that it was so trivial there would be no objection. Usually its a mistake to make any such presumptions, but one can always hope....


*start*
00695 00024 US 
Return-Path: <@SAIL.STANFORD.EDU:Masinter.pa@Xerox.COM>
Received: from SAIL.STANFORD.EDU by Xerox.COM ; 30 APR 87 14:27:12 PDT
Received: from XEROX.COM by SAIL.STANFORD.EDU with TCP; 30 Apr 87  14:25:21 PDT
Received: from Cabernet.ms by ArpaGateway.ms ; 30 APR 87 14:26:24 PDT
Date: 30 Apr 87 14:26 PDT
From: Masinter.pa
Subject: Re: status of DEFVAR-INIT-TIME
In-reply-to: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>'s
 message of Wed, 29 Apr 87 12:43 EDT
To: KMP@STONY-BROOK.SCRC.Symbolics.COM
cc: CL-Cleanup@SAIL.Stanford.EDU
Message-ID: <870430-142624-4291@Xerox>

I support DEFVAR-INIT-TIME as submitted.

If there is no objection, we can release it as is.


*start*
01035 00024 US 
Return-Path: <@SAIL.STANFORD.EDU:FAHLMAN@C.CS.CMU.EDU>
Received: from SAIL.STANFORD.EDU by Xerox.COM ; 01 MAY 87 21:30:03 PDT
Received: from C.CS.CMU.EDU by SAIL.STANFORD.EDU with TCP; 1 May 87  21:27:55 PDT
Received: ID <FAHLMAN@C.CS.CMU.EDU>; Sat 2 May 87 00:29:01-EDT
Date: Sat, 2 May 87 00:28 EDT
Message-ID: <FAHLMAN.12299059010.BABYL@C.CS.CMU.EDU>
Sender: FAHLMAN@C.CS.CMU.EDU
From: "Scott E. Fahlman" <Fahlman@C.CS.CMU.EDU>
To: CL-Cleanup@SAIL.STANFORD.EDU
Subject: Issue DEFVAR-INIT-TIME (Version 1)
In-reply-to: Msg of 23 Apr 1987  16:59-EDT from Kent M Pitman <KMP at STONY-BROOK.SCRC.Symbolics.COM>


This looks OK to me.

I believe that the cause of the confusion is really the statement that
the initial value form is not evaluated unless "it is used".  Better to
say that INITIAL-VALUE is evaluated if and only if the variable does not
already have a value.  Then I think that there would be no confusion
about the time of evaluation, though it can't hurt to spell this out
explicitly.

-- Scott

*start*
02853 00024 USf
Date: 29 May 87 21:15 PDT
From: Masinter.pa
Subject: Issue DEFVAR-INIT-TIME (Version 2)
To: CL-Cleanup@SAIL.STANFORD.EDU
cc: Masinter

Status:	      I worked over the wording on this one a little. Ready for release?

Issue:        DEFVAR-INIT-TIME
References:   DEFVAR (p68)
Category:     CLARIFICATION
Edit history: 23-Apr-87, Version 1 by Pitman
              29-Mar-87, Revision 2 by Masinter


Problem Description:

The description of DEFVAR is not completely clear about the time at which the initialization occurs.

On p68 it says ``VARIABLE is initialized to the result of evaluating the form INITIAL-VALUE unless it already has a value. The INITIAL-VALUE form is not evaluated unless it is used; this fact is useful if evaluation of the INITIAL-VALUE form does something expensive like create a large data structure.''

At least one implementation interpreted the "unless it is used" to mean "unless the variable is used" rather than "unless the initial-value is to be used". The problem is that the "it" is ambiguous. Thus, DEFVAR was interpreted as a kind of lazy initialization that happened upon the variable's first unbound reference. (This interpretation appears to have been further supported by the additional wording in CLtL about not creating expensive structures that are not needed.)

Proposal (DEFVAR-INIT-TIME:NOT-DELAYED):

Clarify that the evaluation of the initial value and the initialization happen at DEFVAR execution time (if at all). The cause of the confusion is the statement that the initial value form is not evaluated unless "it is used".  Better to say that INITIAL-VALUE is evaluated if and only if the variable does not already have a value.  Then there would be no confusion about the time of evaluation.

Rationale:

This clarification follows the intent of the original Common Lisp designers.

Current Practice:

Nearly all implementations implement the proposed interpretation.

Adoption Cost:

None, for most implementations; very small for any the implementation that adopted delayed evaluation.

Benefits:

This clarification makes the semantics of an important primitive more well-defined.

Conversion Cost:

Most users presumably expect the behavior currently in practice in most dialects. There's not a lot of code where the difference comes into play anyway. Presumably the conversion cost is fairly trivial.

Aesthetics:

Being a clarification, this really doesn't have much aesthetic effect.

Discussion:

The cleanup committee supports this clarification.
        TITAN          TITAN           
TIMESROMAN 
           Ÿ                            
                            Q             v       )      è              O              D              i       
       V              Õ              I              4      	Ã z∫*start*
02806 00024 USm
Date: 11 Jun 87 13:33 PDT
From: Masinter.pa
Subject: Issue DEFVAR-INIT-TIME (Version 2)
To: x3j13@SAIL.STANFORD.EDU
cc: Masinter
reply-to: cl-cleanup@Sail.stanford.edu


Issue:        DEFVAR-INIT-TIME
References:   DEFVAR (p68)
Category:     CLARIFICATION
Edit history: 23-Apr-87, Version 1 by Pitman
              29-Mar-87, Version 2 by Masinter


Problem Description:

The description of DEFVAR is not completely clear about the time at which the initialization occurs.

On p68 it says ``VARIABLE is initialized to the result of evaluating the form INITIAL-VALUE unless it already has a value. The INITIAL-VALUE form is not evaluated unless it is used; this fact is useful if evaluation of the INITIAL-VALUE form does something expensive like create a large data structure.''

At least one implementation interpreted the "unless it is used" to mean "unless the variable is used" rather than "unless the initial-value is to be used". The problem is that the "it" is ambiguous. Thus, DEFVAR was interpreted as a kind of lazy initialization that happened upon the variable's first unbound reference. (This interpretation appears to have been further supported by the additional wording in CLtL about not creating expensive structures that are not needed.)

Proposal (DEFVAR-INIT-TIME:NOT-DELAYED):

Clarify that the evaluation of the initial value and the initialization happen at DEFVAR execution time (if at all). The cause of the confusion is the statement that the initial value form is not evaluated unless "it is used".  Better to say that INITIAL-VALUE is evaluated if and only if the variable does not already have a value.  Then there would be no confusion about the time of evaluation.

Rationale:

This clarification follows the intent of the original Common Lisp designers.

Current Practice:

Nearly all implementations implement the proposed interpretation.

Adoption Cost:

None, for most implementations; very small for any the implementation that adopted delayed evaluation.

Benefits:

This clarification makes the semantics of an important primitive more well-defined.

Conversion Cost:

Most users presumably expect the behavior currently in practice in most dialects. There's not a lot of code where the difference comes into play anyway. Presumably the conversion cost is fairly trivial.

Aesthetics:

Being a clarification, this really doesn't have much aesthetic effect.

Discussion:

The cleanup committee supports this clarification.
        TITAN           TITAN          
TIMESROMAN 
           ´                            
                            P             v       )      è              O              D              i       
       V              Õ              I              4      	ù z∫