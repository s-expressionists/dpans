*start*03270 00024 USaReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 27 FEB 89 16:39:47 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 27 Feb 89  16:39:44 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 546824; Mon 27-Feb-89 19:37:43 ESTDate: Mon, 27 Feb 89 19:37 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: EXPT-ZERO-ZERO (Version 1)To: CL-Cleanup@SAIL.Stanford.EDUcc: Cyphers@JASPER.SCRC.Symbolics.COMReferences: <19890228000733.1.CYPHERS@SEAR.SCRC.Symbolics.COM>Message-ID: <890227193717.1.KMP@BOBOLINK.SCRC.Symbolics.COM>Issue:        EXPT-ZERO-ZEROForum:        CleanupReferences:   EXPT (pp203-204)Category:     CHANGEEdit history: 27-Feb-89, Version 1 by Scott Cyphers (Cyphers@Symbolics.COM),              27-Feb-89, Version 2 by Pitman (signals->is an error, misc edits)Status:       For Internal DiscussionProblem Description: (expt 0 0) is mathematically undefined, but CLtL defines it as  being 1 in most cases.Proposal (EXPT-ZERO-ZERO:MAKE-UNDEFINED): Make (expt 0 0) an error for zeros of all types. That is, it has ``undefined effect.''Test Case: (EXPT 0 0) => 1                ;according to CLtL (EXPT 0 0) is undefined        ;proposedRationale:                                       0 For some examples of the behavior of 0 , consider:            X 1)  Lim  0  = 0     X->0                 ln k 2)   Y(X) = --------             c + ln X         Lim  Y(X) = 0      X->0        but                 Y(X)      Lim    X      = k      x->0   Current Practice: Symbolics Genera returns 1 for the test case.Cost to Implementors: Technically, there is no cost to implementors because this would become an ``is an error'' situation, and all implementations that already conform would continue to conform. In practice, most implementations would want to detect the error in high safety situations. In most cases, this is a straightforward change to one or two functions, and including perhaps some compiler optimizers. If any implementations have microcoded this operation, the change may be more complicated.Cost to Users: Even though some implementations might not change, users would not be able to depend on this feature in portable code.  Given the mathematical questionableness of the behavior, however, some of the affected users may treat a trend toward error detection as a `bug fix.'Cost of Non-Adoption: Some mathematical errors will not be detected because CL supplies a value which is not always appropriate.Benefits: In implementations which choose to reliably signal an error in this case, condition handling can be used to customize the behavior of (expt 0 0) in a manner appropriate to the application.Aesthetics: Cleaner mathematically.Discussion: We'd really prefer one of ``must signal'' or ``should signal,'' but since non-integer 0 powers are already ``is an error'' this is most consistent. Cyphers, Pitman, and several other Lisp developers at Symbolics think this is a good idea.*start*01400 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 27 FEB 89 16:57:53 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 27 Feb 89  16:58:12 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 27 FEB 89 16:48:42 PSTDate: 27 Feb 89 16:48 PSTFrom: masinter.paSubject: Re: Issue: EXPT-ZERO-ZERO (Version 1)In-reply-to: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>'s message of Mon, 27 Feb 89 19:37 ESTTo: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: CL-Cleanup@SAIL.Stanford.EDU, Cyphers@JASPER.SCRC.Symbolics.COMMessage-ID: <890227-164842-2963@Xerox>EXPT is a Lisp function that returns only an approximation of themathematical function that you want it to represent.For the case of (EXPT rational integer), however, the behavior is welldefined, and there are no "limit" contradictions to consider. It is nicethat the floating point case concides with the rational/integer case forarguments other than 0 0, and so there is no reason to make it differ for 00."Limit" arguments are inappropriate for reasoning about the definition offloating point functions, since the behavior of the Lisp function and thecorresponding mathematical one differs considerably as soon as you"approach" , say, least-positive-double-float, for example. *start*01742 00024 USaReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 28 FEB 89 09:49:20 PSTReceived: from Think.COM by SAIL.Stanford.EDU with TCP; 28 Feb 89  09:49:45 PSTReceived: from fafnir.think.com by Think.COM; Tue, 28 Feb 89 12:45:56 ESTReturn-Path: <gls@Think.COM>Received: from verdi.think.com by fafnir.think.com; Tue, 28 Feb 89 12:44:03 ESTReceived: by verdi.think.com; Tue, 28 Feb 89 12:44:34 ESTDate: Tue, 28 Feb 89 12:44:34 ESTFrom: Guy Steele <gls@Think.COM>Message-Id: <8902281744.AA02339@verdi.think.com>To: KMP@stony-brook.scrc.symbolics.comCc: CL-Cleanup@sail.stanford.edu, Cyphers@jasper.scrc.symbolics.comIn-Reply-To: Kent M Pitman's message of Mon, 27 Feb 89 19:37 EST <890227193717.1.KMP@BOBOLINK.SCRC.Symbolics.COM>Subject: Issue: EXPT-ZERO-ZERO (Version 1)For what it is worth, W. Kahan of Berkeley recommends that(expt 0.0 0) => 1.0  but  (expt 0.0 0.0) => error.I believe that the rationale is that in the case of an underflow,(expt 0.0 0) => 1  saves you when what you were trying to do wasraise some very tiny but non-zero number to an integer power thatturned out to be zero (as in evaluating a polynomial?).However, in the case of (expt x 0.0) the case is much less clear,and if underflow is involved in the exponent there is more likelyto be some nuemrical instability.I realize that this is a bit of a handwave, and I have probablyexceeded the limits of my own competence.To summarize: yes, there is an essential singularity in the exptfunction at (0, 0), but it is nevertheless convenient to definethe result to be 1, at least when the exponent is a rational zero.--Guy*start*00966 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 16-Mar-89 21:15:43 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 16 MAR 89 21:15:47 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 16 Mar 89  21:16:33 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 16 MAR 89 21:10:42 PSTDate: 16 Mar 89 21:10 PSTFrom: masinter.paSubject: Re: Issue: EXPT-ZERO-ZERO (Version 1)To: KMP@symbolics.com, CL-Cleanup@sail.stanford.edu, Cyphers@jasper.scrc.symbolics.comMessage-ID: <890316-211042-6708@Xerox>Kent, do you want to proceed with this one? I don't think it is necessaryor even a good idea. What do other programming languages do? If you do, I think we should leave (EXPT 0 0) = 1 and (EXPT 0.0 0) = 1 andonly deal with (EXPT 0.0 0.0) and (EXPT 0 0.0). Doesn't this fit into the ERRORS-IN-NUMBERS-CHAPTER spectrum?*start*01485 00024 US GV-Info: KMP@STONY-BROOK.SCRC.Symbolics.COM at 17-Mar-89 14:08:41 from AGReturn-Path: <KMP@STONY-BROOK.SCRC.Symbolics.COM>Received: from STONY-BROOK.SCRC.Symbolics.COM ([128.81.41.144]) by Xerox.COM ; 17 MAR 89 14:08:06 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 559948; Fri 17-Mar-89 17:07:44 ESTDate: Fri, 17 Mar 89 17:07 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Re: Issue: EXPT-ZERO-ZERO (Version 1)To: masinter.pacc: KMP@symbolics.com, CL-Cleanup@sail.stanford.edu, Cyphers@JASPER.SCRC.Symbolics.COMIn-Reply-To: <890316-211042-6708@Xerox>Message-ID: <890317170725.7.KMP@BOBOLINK.SCRC.Symbolics.COM>    Date: 16 Mar 89 21:10 PST    From: masinter.pa@Xerox.COM    Kent, do you want to proceed with this one? I don't think it is necessary    or even a good idea. What do other programming languages do?     If you do, I think we should leave (EXPT 0 0) = 1 and (EXPT 0.0 0) = 1 and    only deal with (EXPT 0.0 0.0) and (EXPT 0 0.0). Let's table it.I asked a bunch of the people here about it and they didn't really buyall the arguments advanced for why it was such a good idea to have 1come out, but they didn't really care a lot since it was pretty easy tospecial case zero before it ever got into EXPT in the first place.    Doesn't this fit into the ERRORS-IN-NUMBERS-CHAPTER spectrum?If we were going to pursue it, I guess it could.