*start*03039 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 01 SEP 88 23:10:41 PDTReceived: from lucid.com by SAIL.Stanford.EDU with TCP; 1 Sep 88  23:09:37 PDTReceived: from bhopal ([192.9.200.13]) by heavens-gate id AA05807g; Thu, 1 Sep 88 22:07:21 PSTReceived: by bhopal id AA04511g; Thu, 1 Sep 88 23:06:39 PDTDate: Thu, 1 Sep 88 23:06:39 PDTFrom: Jon L White <jonl@lucid.com>Message-Id: <8809020606.AA04511@bhopal>To: KMP@STONY-BROOK.SCRC.Symbolics.COMCc: CL-Cleanup@SAIL.Stanford.EDUIn-Reply-To: Kent M Pitman's message of Wed, 31 Aug 88 19:21 EDT <880831192150.7.KMP@GRYPHON.SCRC.Symbolics.COM>Subject: Issue: PROCLAIM-SCOPE (Version 1)re: Proposal (PROCLAIM-SCOPE:ADD-KEYWORD-PERVASIVE):      Introduce a :LOCALLY keyword parameter to PROCLAIM which controls      the scope of a proclamation.      (PROCLAIM proclamation :LOCALLY T)	In a file, this would put the PROCLAMATION into effect for the entire	rest of time during which the file was being loaded (including	recursive loads).	Interactively, it would be the same as :LOCALLY NIL.      (PROCLAIM proclamation :LOCALLY NIL)	In a file or interactively, this would put the PROCLAMATION into	effect permanently. (The declaration would not be retracted when the	file was done loading.)Although you've called this a "scoping" issue, you've really made it an"extent" issue. (See CLtL Chapter 3).  The phraseology "... would put the PROCLAMATION into effect for the entire rest of time during which the file was being loaded ..." bears this out.Lucid Common Lisp has a function called FILE-PROCLAIM, which has essentiallythe same semantics as your proposal:  It "retracts" all proclamationsmade during the loading/compilation of the file.  But we decided not torecommend its use, precisely because we thought most users would confuse the issue of dynamic extent with local scoping.In fact, one of the issues in my "private" list of things that we at Lucidare concerned about, but which have not had a satisfactory submissions to the cleanup committee yet, is just the matter of a "Lexical Proclaim".  In the hardcopy sheet I handed out to many committee members, at the Palo Altomeeting in March of this year, there should have been the paragraph: (5) Add a lexical "pervasive" declaration special form; e.g, 	   (locally (pervasive-declare (special foo))	     ...)     has syntax like 'declare, but acts more like proclaim; it pertains only     to the lexical scope indicated -- its action is not dynamically scoped.      In particular, it differs from 'declare' in that interior binding forms      "inherit" the declaration, rather than forming a "wall" against it.This is the functionality that I would support, even though wrappinga 'pervasive-declare' around a 'defun' has implementational consequencessimilar to wrapping a non-null 'let' [i.e., there may be a non-nulllexical environment].-- JonL --*start*03297 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 01 SEP 88 14:24:20 PDTReceived: from ti.com by SAIL.Stanford.EDU with TCP; 1 Sep 88  14:22:12 PDTReceived: by ti.com id AA29992; Thu, 1 Sep 88 16:19:23 CDTReceived: from Kelvin by tilde id AA11924; Thu, 1 Sep 88 16:04:07 CDTMessage-Id: <2798139957-9660596@Kelvin>Sender: GRAY@Kelvin.csc.ti.comDate: Thu, 1 Sep 88 16:05:57 CDTFrom: David N Gray <Gray@DSG.csc.ti.com>To: Kent M Pitman <KMP@SCRC-STONY-BROOK.ARPA>Cc: CL-Cleanup@SAIL.STANFORD.EDUSubject: Re: Issue: PROCLAIM-SCOPE (Version 1)In-Reply-To: Msg of Wed, 31 Aug 88 19:21 EDT from Kent M Pitman <KMP@SCRC-STONY-BROOK.ARPA>> Proposal (PROCLAIM-SCOPE:ADD-KEYWORD-PERVASIVE):> >   Introduce a :LOCALLY keyword parameter to PROCLAIM which controls>   the scope of a proclamation.> >   (PROCLAIM proclamation :LOCALLY T)>     In a file, this would put the PROCLAMATION into effect for the entire>     rest of time during which the file was being loaded (including>     recursive loads).While being loaded or while being compiled?  Most PROCLAIMs affect whathappens at compile-time, not load time.>     Interactively, it would be the same as :LOCALLY NIL.This probably should be considered an error since it isn't meaningful, butsome implementations might give it a meaning, such as being local to thecurrent process.> Proposal (PROCLAIM-SCOPE:ADD-KEYWORD-NON-PERVASIVE):> >   Introduce a :LOCALLY keyword parameter to PROCLAIM which controls>   the scope of a proclamation.> >   (PROCLAIM proclamation :LOCALLY T)>     In a file, this would put the PROCLAMATION into effect for the entire>     rest of the current file. Recursive loads or compilations would rebind>     this to the global default.> >     Interactively, this would affect interactive work but would not >     affect the default for files loaded.This approach sounds more like what the user would expect (like lexicalscoping instead of dynamic scoping), although it would be a little harderto implement.>   Macsyma has a lot of files which do (PROCLAIM '(SPECIAL ...)) at the>   top of the file and then does an implementation-specific>   (PROCLAIM '(UNSPECIAL ...)) at the bottom for implementations that>   support it. It would be both more modular and more portable to do>   something such as what is proposed here.This doesn't seem to be a very convincing example.  There shouldn't be anyneed to routinely undo SPECIAL declarations if packages are being usedcorrectly.> Current Practice:> >   Symbolics Cloe binds optimization qualities (SAFETY, SPEED, >   COMPILATION-SPEED) in file compilations and doesn't allow>   them to affect the global default.Likewise on the TI Explorer. (PROCLAIM '(OPTIMIZE ...)) affects thecompilation but is not included in the object file.  (PROCLAIM '(SPECIAL...) doesn't affect the global environment until the object file isloaded.--This issue interacts with the EVAL-WHEN problems being considered by thecompiler committee.  If EVAL-WHEN can be extended and/or clarified topermit specifying actions local to COMPILE-FILE, that might make anextension to PROCLAIM unnecessary.  -- David Gray*start*04783 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 31 AUG 88 16:32:46 PDTReceived: from JASPER.SCRC.Symbolics.COM ([128.81.41.58]) by SAIL.Stanford.EDU with TCP; 31 Aug 88  16:32:45 PDTReceived: from GRYPHON.SCRC.Symbolics.COM by JASPER.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 213776; Wed 31-Aug-88 19:22:16 EDTDate: Wed, 31 Aug 88 19:21 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PROCLAIM-SCOPE (Version 1)To: CL-Cleanup@SAIL.Stanford.EDUcc: KMP@STONY-BROOK.SCRC.Symbolics.COMMessage-ID: <880831192150.7.KMP@GRYPHON.SCRC.Symbolics.COM>As indicated in the discussion below, I think this is really a roughcut, but I think the issue it treats is a real one so I figured I'dsee what others think. -kmp-----Issue:        PROCLAIM-SCOPEReferences:   PROCLAIM (pp156-157)Category:     ADDITIONEdit history: 26-Aug-88, Version 1 by PitmanStatus:	      For Internal DiscussionProblem Description:  It would be useful to be able to do PROCLAIM without worrying about cleaning  up afterward. For example, a file containing:  In some cases, such as SPECIAL, there is no way to disable the effect of a  proclamation.  In other cases, such INLINE and SAFETY, it is possible but inconvenient to  change the declaration later. Even so, there is no way of inquiring about the  previous value in order to correctly restore it.Proposal (PROCLAIM-SCOPE:ADD-KEYWORD-PERVASIVE):  Introduce a :LOCALLY keyword parameter to PROCLAIM which controls  the scope of a proclamation.  (PROCLAIM proclamation :LOCALLY T)    In a file, this would put the PROCLAMATION into effect for the entire    rest of time during which the file was being loaded (including    recursive loads).    Interactively, it would be the same as :LOCALLY NIL.  (PROCLAIM proclamation :LOCALLY NIL)    In a file or interactively, this would put the PROCLAMATION into    effect permanently. (The declaration would not be retracted when the    file was done loading.)Proposal (PROCLAIM-SCOPE:ADD-KEYWORD-NON-PERVASIVE):  Introduce a :LOCALLY keyword parameter to PROCLAIM which controls  the scope of a proclamation.  (PROCLAIM proclamation :LOCALLY T)    In a file, this would put the PROCLAMATION into effect for the entire    rest of the current file. Recursive loads or compilations would rebind    this to the global default.    Interactively, this would affect interactive work but would not     affect the default for files loaded.  (PROCLAIM proclamation :LOCALLY NIL)    In a file or interactively, this would put the PROCLAMATION into    effect permanently, affecting the default for files in which no    local proclamation overrode it. (The declaration would not be retracted    when the file was done loading.)Test Case:  Given a file "FOO" containing:   (PROCLAIM '(OPTIMIZE (SPEED 0) (SAFETY 3)) :LOCALLY T)   ...  Doing   (LOAD "FOO")  would not clobber the global default for SPEED/SAFETY.Rationale:  This would address several existing problems with CL...    - Declarations of optimize qualities such as speed/safety    - Absence of UNSPECIAL declaration  Macsyma has a lot of files which do (PROCLAIM '(SPECIAL ...)) at the  top of the file and then does an implementation-specific  (PROCLAIM '(UNSPECIAL ...)) at the bottom for implementations that  support it. It would be both more modular and more portable to do  something such as what is proposed here.Current Practice:  Symbolics Cloe binds optimization qualities (SAFETY, SPEED,   COMPILATION-SPEED) in file compilations and doesn't allow  them to affect the global default.Cost to Implementors:  [I imagine the level of difficulty in providing this feature is in the   low to intermediate difficulty range. It's not likely to be trivial for   anyone, but I doubt anyone is going to claim that it is prohibitively   expensive if we can get the details right and show that it satisfies a   real need. -kmp]Cost to Users:  None. This is a compatible change.Cost of Non-Adoption:  Programmers would continue to clobber each others environments with pervasive  SPEED and SAFETY proclamations.Benefits:  It would be possible to proclaim SPEED/SAFETY information locally in a file  without worrying about the pervasive effect on other code compiled/loaded  subsequently in the same environment.Aesthetics:  Probably people would find that this kind of flexibility had a beneficial  effect on program aesthetics.Discussion:  Pitman has no firm opinion on this issue at this time, but believes that  something like this might be quite useful if we could iron out the details.*start*00917 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 07 SEP 88 20:31:45 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 7 Sep 88  19:56:03 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 455983; Wed 7-Sep-88 22:52:31 EDTDate: Wed, 7 Sep 88 22:52 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PROCLAIM-SCOPE (Version 1)To: CL-Cleanup@SAIL.STANFORD.EDUIn-Reply-To: <880831192150.7.KMP@GRYPHON.SCRC.Symbolics.COM>Message-ID: <19880908025215.0.MOON@EUPHRATES.SCRC.Symbolics.COM>This is too complicated for me.  I think it's better to do nothinguntil/unless the compiler committee comes up with a better frameworkin which to deal with this.*start*01378 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 08 SEP 88 13:39:33 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 8 Sep 88  11:47:01 PDTReceived: from GRYPHON.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via INTERNET with SMTP id 456361; 8 Sep 88 14:46:09 EDTDate: Thu, 8 Sep 88 14:45 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PROCLAIM-SCOPE (Version 1)To: Moon@STONY-BROOK.SCRC.Symbolics.COMcc: CL-Cleanup@SAIL.STANFORD.EDUIn-Reply-To: <19880908025215.0.MOON@EUPHRATES.SCRC.Symbolics.COM>Message-ID: <880908144549.3.KMP@GRYPHON.SCRC.Symbolics.COM>    Date: Wed, 7 Sep 88 22:52 EDT    From: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>    This is too complicated for me.  I think it's better to do nothing    until/unless the compiler committee comes up with a better framework    in which to deal with this.This is a reasonable position. Fyi, I do not plan to push this issueunless someone else gets on the bandwagon with me. I did think itimportant to raise it, though, and I think it should at least be oneof the items mentioned in the new manual's list of "things that shouldbe expected to vary between implementations".*start*01348 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 02 SEP 88 18:47:08 PDTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 2 Sep 88  18:45:19 PDTReceived: from Semillon.ms by ArpaGateway.ms ; 02 SEP 88 17:45:42 PDTDate: 2 Sep 88 17:45 PDTFrom: Masinter.paSubject: Re: Issue: PROCLAIM-SCOPE (Version 1)In-reply-to: Jon L White <jonl@lucid.com>'s message of Thu, 1 Sep 88 23:06:39 PDTTo: Jon L White <jonl@lucid.com>cc: KMP@STONY-BROOK.SCRC.Symbolics.COMcc: cl-cleanup@sail.stanford.eduMessage-ID: <880902-174542-7687@Xerox>A major concern is that any additions that talk about "file" should have somereasonable semantic model; currently, the semantics of Common Lisp are describedin terms of expressions, without regard to file boundaries. I've thought that itmight be possible to talk about special "file" forms, that have translationsinto things that can be typed in interactively. Some possible models for "file" are Assume each file is wrapped with an implicit "progn".Assume each expression in a file is actually preceded with an implicit "(locally" ...Otherwise, we're left with an operational semantics that describes what things*mean* only in terms of what LOAD or COMPILE *does*....*start*01196 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 13 SEP 88 06:49:27 PDTReceived: from decwrl.dec.com by SAIL.Stanford.EDU with TCP; 13 Sep 88  06:49:04 PDTReceived: by decwrl.dec.com (5.54.5/4.7.34)	id AA23595; Tue, 13 Sep 88 06:47:49 PDTDate: Tue, 13 Sep 88 06:47:49 PDTMessage-Id: <8809131347.AA23595@decwrl.dec.com>From: vanroggen%aitg.DEC@decwrl.dec.comTo: cl-cleanup@sail.stanford.eduSubject: Issue PROCLAIM-SCOPEI believe adding an option controlling the scope/extent of PROCLAIM wouldbe confusing--it's simpler to think of PROCLAIM as only being global.  Itwould be better to have a separate, specific mechanism to handle "file-local"things, unless a more general mechanism could be devised.It's probably worth noting that some things are already "file-local", suchas the binding of *PACKAGE*.Also, VAX LISP has added some keywords to COMPILE-FILE which are file local,such as :OPTIMIZE.A last comment: adding a way of querying for PROCLAIMed information mightavoid the issue by leaving it to the user to manipulate explicitly.			---Walter