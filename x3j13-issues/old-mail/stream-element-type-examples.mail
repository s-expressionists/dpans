*start*03005 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 27 OCT 88 10:10:26 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 27 Oct 88  10:08:34 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 483002; Thu 27-Oct-88 13:07:35 EDTDate: Thu, 27 Oct 88 13:07 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Re: Issue: STREAM-ELEMENT-TYPE-EXAMPLESTo: ROSENKING@A.ISI.EDUcc: CL-Cleanup@sail.stanford.eduIn-Reply-To: <[A.ISI.EDU]27-Oct-88 09:47:10.ROSENKING>Message-ID: <19881027170710.2.MOON@EUPHRATES.SCRC.Symbolics.COM>[added CL-Cleanup back, I think the whole subcommittee ought tosee these discussions]    Date: 27 Oct 1988 09:47-EDT    From: ROSENKING@A.ISI.EDU    Thank you for your comments and recommendations. I wrote this issue    based on reviewing the examples in the STREAMs chapter of the draft.    I agree that there is an inconsistency among implementations, as I have    found via several trials, over which type specifier(s) should be returned.    BUT, is it not our task to correct this by at least stating what the generic    type specifier, and possible subtype specifiers, should be returned in the    standard ? If this is so then I would appreciate some feedback on what the    general consensus is as to what type specifiers, and appropriate subtypes if    necessary, should be returned. Yes and no.  Certainly, tightening up the standard to eliminate unwantedinconsistencies among implementations is legitimate business of thecleanup committee.  Since there is ten or more times as much suchbusiness available as there is time to do, things have to be prioritized,and I'd rate stream-element-type low on the scale of importance.  However,the more important issue is that perhaps the differences among implementationsin what stream-element-type returns are not unwanted inconsistencies at all,but are intentionally provided implementation freedom.  CLtL doesn'tappear to address the specific issue of stream-element-types, but mybelief is that the intention of the original design was that the :element-typeargument to OPEN says the minimum type required, and an implementation isfree to return a more capable stream whose element-type is a superset.Your testing is also finding bugs in individual implementations, which iscertainly valuable.  Sometimes the bug indicates an unclarity in the CommonLisp language definition, sometimes it just means the implementation was sloppy.  If several implementations have bugs in a particular area, it mightmean that in practice no one cares about that area and so bugs have goneunnoticed.    As per your note about examples, I will pass this on to the rest of the    editorial committee since I believe that it may apply elsewhere.Thanks.*start*02554 00024 USaReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 26 OCT 88 13:51:54 PDTReceived: from A.ISI.EDU by SAIL.Stanford.EDU with TCP; 26 Oct 88  13:50:18 PDTDate: 26 Oct 88 16:49 EDTSender: ROSENKING@A.ISI.EDUSubject: Issue: STREAM-ELEMENT-TYPE-EXAMPLESFrom: ROSENKING@A.ISI.EDUTo: CL-CLEANUP@SAIL.STANFORD.EDUMessage-ID: <[A.ISI.EDU]26-Oct-88 16:49:53.ROSENKING>Status:	Initial ProposalIssue:			STREAM-ELEMENT-TYPE-EXAMPLESReferences:		STREAM-ELEMENT=TYPE (CLtL, page 332, ANSI Draft, 								page 6-38)Category:		CLARIFICATIONEdit History:		26 -Oct-88, Version 1 by RosenkingRelated Issues:Problem Description:Below is a list of the examples and specified outputs which are used in theANSI draft standard.(stream-element-type *debug-io*)   --->   STRING-CHAR(stream-element-type (make-concatenated-stream))   -->   T(setq s (open "tempfile.temp"		:element-type 'bit		:if-does-not-exist :create))   -->   <stream identifier>(stream-element-type s)   -->   (INTEGER 0 1)The following describes the inconsistencies with the above examples.  The first expression returns the value STRING-CHAR when executed on the Mac, but when executed on the Symbolics it returns the value CHARACTER (Note: STRING-CHAR is a subtype of CHARACTER). The second expression returns the value T when executed on the Symbolics, though it returns the value STRING-CHAR when executed on the Mac, and it then returns the value NIL when executed on the VAX.The third expression does not evaluate correctly on the Symbolics and VAXimplementations where the :direction keyword default value is :input, thoughit does evaluate correctly on the MAC implementation where the default valuefor :direction is :output.The fourth expression also returns different values. On the MAC and VAXimplementations the value BIT is returned for this expression, whileSymbolics returns the value (UNSIGNED-BYTE 16). The :direction :output specification had to be made to the third expression in order for the VAXand Symbolics implementations to evaluate the last expression.Proposal:Clarify what the appropriate outputs for each of these expressions should beover all implementations.Rationale:For validity and conformance.Current Practice:As stated in problem description for each expression and implementation.Adoption Cost:Benefits:Standardization and portability.Conversion Cost:Aesthetics:Discussion:*start*00829 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 26 OCT 88 15:38:25 PDTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 26 Oct 88  15:36:42 PDTReceived: from Semillon.ms by ArpaGateway.ms ; 26 OCT 88 15:27:03 PDTDate: 26 Oct 88 15:26 PDTFrom: masinter.paSubject: Re: Issue: STREAM-ELEMENT-TYPE-EXAMPLESIn-reply-to: ROSENKING@A.ISI.EDU's message of 26 Oct 88 16:49 EDTTo: ROSENKING@A.ISI.EDUcc: CL-CLEANUP@SAIL.STANFORD.EDUMessage-ID: <881026-152703-14052@Xerox>I think there are some genuine ambiguities around STREAM-ELEMENT-TYPE. Theissue is whether streams need to remember their element-type, even inimplementations that allow both binary and character I/O to the samestream.*start*01395 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 26 OCT 88 18:35:26 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 26 Oct 88  18:33:19 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 482690; Wed 26-Oct-88 21:32:59 EDTDate: Wed, 26 Oct 88 21:32 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: STREAM-ELEMENT-TYPE-EXAMPLESTo: ROSENKING@A.ISI.EDUcc: CL-CLEANUP@SAIL.STANFORD.EDUIn-Reply-To: <[A.ISI.EDU]26-Oct-88 16:49:53.ROSENKING>Message-ID: <19881027013240.4.MOON@EUPHRATES.SCRC.Symbolics.COM>Note that in many cases, the Common Lisp language does not specifyany particular value to be returned by STREAM-ELEMENT-TYPE.  Thefunction exists so you can find out what implementation-dependentelement type you got, not so you can store an object with OPENand read it back with STREAM-ELEMENT-TYPE.The Common Lisp language also does not specify which of severalequivalent type specifiers (e.g. BIT, (INTEGER 0 1), (INTEGER 0 (2)),(MEMBER 0 1)) is returned.We need to be careful of putting examples in documentation thatimply that the language specification is more restrictive thanit was intended to be.