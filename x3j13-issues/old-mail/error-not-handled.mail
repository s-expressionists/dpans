*start*03797 00024 USfReturn-Path: <X3J13-mailer@SAIL.Stanford.EDU>Received: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 06 OCT 88 13:05:16 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 6 Oct 88  12:49:33 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 472004; Thu 6-Oct-88 15:48:14 EDTDate: Thu, 6 Oct 88 15:48 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: ERROR-NOT-HANDLED (Version 1)To: X3J13@SAIL.Stanford.EDUMessage-ID: <881006154802.3.KMP@BOBOLINK.SCRC.Symbolics.COM>The following issue will be presented at the upcoming meeting.We might try to vote on this if people feel it non-controversialenough, but the "two-week rule" could be invoked to suppress avote if someone felt they had inadequate time to consider it.-----Issue:        ERROR-NOT-HANDLEDReferences:   Interactive Condition Handling (Condition System, Rev 18, p19)Category:     CLARIFICATION/CHANGEEdit history: 25-Sep-88, Version 1 by PitmanStatus:	      For Internal DiscussionProblem Description:  For delivery purposes, some implementations will want to leave out  major sections of runtime support in programs that do not require  them. The debugger is one such section.  However, since ERROR may be called implicitly by a number of Common  Lisp built-in functions, and since the condition system as currently  described insists that the interactive debugger be entered if a  condition is unhandled, the interactive debugger must be retained in  a saved image of any program that might signal an error unless the  compiler can prove that the error will never go unhandled. This  may be undesirable in some cases and may cause unnecessary bloating  of the saved image.Proposal (ERROR-NOT-HANDLED:PERMIT-TERMINATION):  Permit implementors to designate an implementation-specific mechanism  for asking that unhandled errors cause `termination of the running  program' rather than entry into the system's debugger.  Implementations choosing to offer such a facility must clearly define  the nature and scope of such program termination, since the concept  of `program termination' is an ill-defined concept in present-day  Common Lisp.  Even when program termination rather than debugger entry would be  the ultimate effect of an unhandled error, the value of   *DEBUGGER-HOOK* (if non-NIL) must be called to provide programmers  the ability of customized debugging.  All implementations must at least provide the option of a system  debugger for use in program development.Test Case:  (ERROR "Foo"), if unhandled, must now enter the debugger.  Under this proposal, it might also `terminate program execution'  in implementations which choose to provide such a facility and to  clearly define that concept.Rationale:  Although technically an incompatible change, we're dealing at  the very edge of what the user can expect from the system. Once  an error is signalled and not handled, we're in the domain of   implementation-dependent effect anyway.Current Practice:  Probably no one does this yet.Cost to Implementors:  None. This change is upward compatible with existing implementations.Cost to Users:  None.Cost of Non-Adoption:  Saved Lisp images might be forced to be gratuitously larger than  they need to be in some implementations.Benefits:  Addressing this issue will make Lisp more able to compete with  other languages which permit small saved images to result from  small user programs.Aesthetics:  No significant impact.Discussion:  This change was requested by Christian Queinnec of France  (queinnec@inria.inria.fr). Pitman supports the change.*start*00856 00024 US Return-Path: <KMP@STONY-BROOK.SCRC.Symbolics.COM>Received: from STONY-BROOK.SCRC.Symbolics.COM ([128.81.41.144]) by Xerox.COM ; 03 JAN 89 02:22:29 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 514189; Tue 3-Jan-89 03:13:57 ESTDate: Tue, 3 Jan 89 03:13 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Re: Issue: ERROR-NOT-HANDLED (Version 1)To: masinter.pacc: KMP@STONY-BROOK.SCRC.Symbolics.COMIn-Reply-To: <890102-204423-1926@Xerox>Message-ID: <890103031319.5.KMP@BOBOLINK.SCRC.Symbolics.COM>    Date: 2 Jan 89 20:43 PST    From: masinter.pa@Xerox.COM    What happened with this? I don't remember a vote.I don't think there was one.    Should we handle it as a "cleanup"?    Its been distributed.Yes, I'd be happy if you would.*start*01529 00024 US Return-Path: <KMP@STONY-BROOK.SCRC.Symbolics.COM>Received: from STONY-BROOK.SCRC.Symbolics.COM ([128.81.41.144]) by Xerox.COM ; 15 FEB 89 07:49:46 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 539508; Wed 15-Feb-89 10:49:23 ESTDate: Wed, 15 Feb 89 10:49 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Re: Issue: ERROR-NOT-HANDLED -- and related issuesTo: Masinter.PAcc: KMP@STONY-BROOK.SCRC.Symbolics.COMIn-Reply-To: <890103031319.5.KMP@BOBOLINK.SCRC.Symbolics.COM>Message-ID: <890215104906.5.KMP@BOBOLINK.SCRC.Symbolics.COM>    Date: Tue, 3 Jan 89 03:13 EST    From: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>	Date: 2 Jan 89 20:43 PST	From: masinter.pa@Xerox.COM	What happened with this? I don't remember a vote.    I don't think there was one.	Should we handle it as a "cleanup"?	Its been distributed.    Yes, I'd be happy if you would.Did this happen? What is the status of this issue?I'd like to offload the conditions cleanups (of which this is one ofvery few) onto you so that I don't have the administrative overhead ofhaving to look over this list and making sure it's not falling throughthe cracks.On my whiteboard is a note to write a few other conditions-relatedproposals (time permitting), and my intent is to just send them toCL-Cleanup if/when they're ready. (Those proposals would address whatfunctions should signal what types of conditions, and how reliably.)*start*03606 00024 US GV-Info: X3J13-mailer@SAIL.Stanford.EDU at 14-Mar-89 14:37:32 from AGReturn-Path: <X3J13-mailer@SAIL.Stanford.EDU>Received: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 14 MAR 89 14:37:24 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 14 Mar 89  14:19:42 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 14 MAR 89 14:03:50 PSTDate: 14 Mar 89 14:02 PSTFrom: masinter.pato: X3J13@sail.stanford.eduSubject: Issue: ERROR-NOT-HANDLED (Version 1)reply-to: cl-cleanup@sail.stanford.eduline-fold: NOMessage-ID: <890314-140350-1917@Xerox>Cleanup issues for the next meeting will be tricking out over the next week.This issue was distributed prior to the October 1988 meeting,but not voted on. !Issue:        ERROR-NOT-HANDLEDReferences:   Interactive Condition Handling (Condition System, Rev 18, p19)Category:     CLARIFICATION/CHANGEEdit history: 25-Sep-88, Version 1 by PitmanProblem Description:  For delivery purposes, some implementations will want to leave out  major sections of runtime support in programs that do not require  them. The debugger is one such section.  However, since ERROR may be called implicitly by a number of Common  Lisp built-in functions, and since the condition system as currently  described insists that the interactive debugger be entered if a  condition is unhandled, the interactive debugger must be retained in  a saved image of any program that might signal an error unless the  compiler can prove that the error will never go unhandled. This  may be undesirable in some cases and may cause unnecessary bloating  of the saved image.Proposal (ERROR-NOT-HANDLED:PERMIT-TERMINATION):  Permit implementors to designate an implementation-specific mechanism  for asking that unhandled errors cause `termination of the running  program' rather than entry into the system's debugger.  Implementations choosing to offer such a facility must clearly define  the nature and scope of such program termination, since the concept  of `program termination' is an ill-defined concept in present-day  Common Lisp.  Even when program termination rather than debugger entry would be  the ultimate effect of an unhandled error, the value of   *DEBUGGER-HOOK* (if non-NIL) must be called to provide programmers  the ability of customized debugging.  All implementations must at least provide the option of a system  debugger for use in program development.Test Case:  (ERROR "Foo"), if unhandled, must now enter the debugger.  Under this proposal, it might also `terminate program execution'  in implementations which choose to provide such a facility and to  clearly define that concept.Rationale:  Although technically an incompatible change, we're dealing at  the very edge of what the user can expect from the system. Once  an error is signalled and not handled, we're in the domain of   implementation-dependent effect anyway.Current Practice:  Probably no one does this yet.Cost to Implementors:  None. This change is upward compatible with existing implementations.Cost to Users:  None.Cost of Non-Adoption:  Saved Lisp images might be forced to be gratuitously larger than  they need to be in some implementations.Benefits:  Addressing this issue will make Lisp more able to compete with  other languages which permit small saved images to result from  small user programs.Aesthetics:  No significant impact.Discussion:  This change was requested by Christian Queinnec of France  (queinnec@inria.inria.fr). Pitman supports the change.*start*01226 00024 US GV-Info: CL-Cleanup-mailer@SAIL.Stanford.EDU at 14-Mar-89 15:04:41 from AGReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 14 MAR 89 15:04:40 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 14 Mar 89  15:04:58 PSTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 556941; Tue 14-Mar-89 18:02:30 ESTDate: Tue, 14 Mar 89 18:02 ESTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: ERROR-NOT-HANDLED (Version 1)To: cl-cleanup@sail.stanford.educc: X3J13@sail.stanford.eduIn-Reply-To: <890314-140350-1917@Xerox>Message-ID: <19890314230224.2.MOON@EUPHRATES.SCRC.Symbolics.COM>ERROR-NOT-HANDLED:PERMIT-TERMINATION is okay with me.  I wouldalso support a proposal to replace "the condition system as currentlydescribed insists that the interactive debugger be entered if acondition is unhandled" with wording that allowed implementationsto do whatever they want, with perhaps an implementation note thatmany implementations prefer an interactive debugger.*start*01340 00024 US Date:  4 Apr 89 11:24 PDTSender: CL-Cleanup-mailer%SAIL.Stanford:EDU:XeroxFrom: KMP%STONY-BROOK.SCRC.Symbolics:COM:XeroxSubject: Issue: ERROR-NOT-HANDLEDTo: CL-Cleanup%SAIL.Stanford:EDU:Xeroxcc: chapman%aitg.dec%decwrl.dec:COM:XeroxGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: ERROR-NOT-HANDLEDTo: CL-Cleanup@SAIL.Stanford.EDUcc: chapman%aitg.dec@decwrl.dec.comReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 04 APR 89 11:18:54 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 4 Apr 89  11:15:19 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 571089; Tue 4-Apr-89 14:15:16 EDTOriginal-Date: Tue, 4 Apr 89 14:14 EDTMessage-ID: <890404141451.7.KMP@BOBOLINK.SCRC.Symbolics.COM>GVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVMy notes say this issue was withdrawn in favor of providing Kathy witheditorial advice to `minimize implicit requirements on debuggers' in thepresentation of the debugger in the standard.Kathy- if the implication of that is not clear, let me know privatelyand I'll help you get that in order.