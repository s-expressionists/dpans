*start*02341 00024 USaReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 22 JUL 88 10:05:17 PDTReceived: from cs.utah.edu by SAIL.Stanford.EDU with TCP; 22 Jul 88  10:02:36 PDTReceived: by cs.utah.edu (5.54/utah-2.0-cs)	id AA26901; Fri, 22 Jul 88 11:02:14 MDTReceived: by cdr.utah.edu (5.54/utah-2.0-leaf)	id AA02408; Fri, 22 Jul 88 11:02:09 MDTFrom: sandra%cdr@cs.utah.edu (Sandra J Loosemore)Message-Id: <8807221702.AA02408@cdr.utah.edu>Date: Fri, 22 Jul 88 11:02:08 MDTSubject: Re: Issue: PATHNAME-SYNTAX-ERROR-TIME (Version 1)To: Kent M Pitman <KMP@stony-brook.scrc.symbolics.com>Cc: cl-cleanup@sail.stanford.eduIn-Reply-To: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>, Thu, 7 Jul 88 11:23 EDTOf the options presented for this issue, I preferPATHNAME-SYNTAX-ERROR-TIME:PATHNAME-CREATION.  The NAMESTRING-COERCIONoption seems like it is really the wrong time, and I would rather notleave it EXPLICITLY-VAGUE.However, I would really like to see something completely different --namely adding a keyword argument to TRUENAME to allow it to be usedfor explicit syntax checking of filenames without signalling an errorif the file doesn't exist.  Functions such as OPEN and the ones insections 23.3, 23.4, and 23.5 that actually pass pathnames to the hostfile system would be required to (implictly or explicitly) perform thesame checking. This would also solve a problem I brought up some time ago, that I washaving with Lucid Lisp under VMS.  I had defined a logical name likeLISP$LIBRARY that expanded into something that included a directoryspecifier in its expansion, like disk$login:[loosemore.lisp.library].However, I was getting things like    (namestring (merge-pathnames                     (pathname "[loosemore]foo.bar")	            (pathname "lisp$library:")))=>  "lisp$library:[loosemore]foo.bar"which the file system naturally barfed on when I tried to open thefile.  The problem was that Lucid's PATHNAME function was treating thelogical name like a device specification instead of expanding it.TRUENAME would have expanded the logical name for me, but sinceLISP$LIBRARY was not a complete pathname for an existing file, itwould also have signalled an error.-Sandra-------*start*08523 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 07 JUL 88 08:26:52 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 7 Jul 88  08:24:47 PDTReceived: from RIO-DE-JANEIRO.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 429853; Thu 7-Jul-88 11:24:18 EDTDate: Thu, 7 Jul 88 11:23 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-SYNTAX-ERROR-TIME (Version 1)To: CL-Cleanup@SAIL.Stanford.EDUMessage-ID: <880707112359.4.KMP@RIO-DE-JANEIRO.SCRC.Symbolics.COM>Issue:        PATHNAME-SYNTAX-ERROR-TIMEReferences:   File System Interface (pp409-427)Category:     CLARIFICATIONEdit history: 07-Jul-88, Version 1 by PitmanStatus:	      For Internal DiscussionProblem Description:  There exist conceivable pathnames for which there is no valid mapping in a  particular implementation. CLtL is not clear about the time at which this  error might be detected.  For example, on file systems which constrain pathname-types to be three  letters or fewer, the type "LISP" is not valid. The question arises: when  is this error detected?  In some implementations, the error might be detected while forming the  pathname. That is, (MAKE-PATHNAME :TYPE "LISP") signals an error.  In some implementations, the error might be detected while forming the  namestring. That is, (MAKE-PATHNAME :TYPE "LISP") succeeds, but  (NAMESTRING (MAKE-PATHNAME :TYPE "LISP")) signals an error.  In some implementations, validity checking might be done only by the host  operating system, so Lisp does not detect the error unless the operating  system complains. For example, (MAKE-PATHNAME :TYPE "LISP") succeeds,  and even (NAMESTRING (MAKE-PATHNAME :TYPE "LISP")) constructs a plausible  looking pathname, but (OPEN (NAMESTRING (MAKE-PATHNAME :TYPE "LISP"))) fails.  In some implementations, Lisp might make `friendly' corrections to the  pathname in order to form a namestring. For example,  (MAKE-PATHNAME :TYPE "LISP") might succeed, but   (NAMESTRING (MAKE-PATHNAME :TYPE "LISP")) might produce a namestring with  an extension such as ".LIS" or ".LSP".  Similar issues might come up in file systems which don't allow wildcard  pathnames. Is :WILD allowed in a name or type slot and then disallowed  upon coercion to a pathname, or is :WILD complained about "up front"?  This phenomenon is a barrier to portability because if a program is  debugged in an implementation that does, for example, NAMESTRING-time  error checking, the programmer may be lulled into an expectation that  it is acceptable to construct and manipulate invalid pathnames as long  as the problem is caught before an attempt to call NAMESTRING is  attempted. On the other hand, another programmer may debug his code in  a Lisp which does early error checking of syntax and may assume that   he is home free if the pathname gets constructed correctly.Proposal (PATHNAME-SYNTAX-ERROR-TIME:PATHNAME-CREATION):  Clarify that operations such as MAKE-PATHNAME and MERGE-PATHNMES which  construct new pathnames do plausibility checking of their arguments  and signal an error rather than construct a pathname for which NAMESTRING  would not produce a valid pathname.  Rationale:    This would identify clearly to the programmer where he should expect an    error to be signalled for a pathname.    This would mean that fully constructed pathnames could reliably    be converted to namestrings.  Cost to Implementors:      Some implementors, especially those which rely on the operating system    to be the sole authority on pathname syntax, might have to introduce    some new syntax-checking facilities.    Implementations where this error checking is done later would have to be    changed both to do it earlier, and to not make the unwarranted assumption    that pathnames with no valid namestring representation are constructable.  Cost to Users:    The ability to represent non-viable pathnames for the purpose of merging    would be lost. This feature was not portably available, but was available    in some operating systems.    Some code which expected an error, but expected it at a different time    would have to be changed.Proposal (PATHNAME-SYNTAX-ERROR-TIME:NAMESTRING-COERCION):  Clarify that it was valid to create a pathname which could not be  converted to a namestring. Require NAMESTRING (and related functions,  such as ENOUGH-NAMESTRING or any internal functions that might be used  in place of NAMESTRING by functions like OPEN and PROBE-FILE) to signal  an error for pathnames which do not represent valid filenames in the  designated file system.  Rationale:    This would identify clearly to the programmer where he should expect an    error to be signalled for a pathname.    This would allow the construction of pathnames for the sole purpose of    merging without causing what might seem to some as gratuitous errors.  Cost to Implementors:      Implementors who rely on the operating system to be the sole authority    on pathname syntax, might have to introduce some new syntax-checking    facilities.    Implementations where this error checking is done earlier would have to    be changed both to do it later, and to not make the unwarranted    assumption that any pathname has a valid namestring representation.  Cost to Users:    Early error checking of faulty pathnames would be lost.    Some code which expected an error, but expected it at a different time    would have to be changed.  Benefits:      Macsyma, for example, has encountered a need for "hostless" pathnames    (in merging). The concept makes no sense if every pathname must have    a namestring, because a pathname with no host cannot have a namestring.    However, if it's NAMESTRING's responsibility to signal an error, then    hostless pathnames are still useful for merging. Consider:	(MERGE-PATHNAMES (MAKE-PATHNAME :NAME "FRED") MARY)    This will override both the NAME and the HOST field of MARY because you    must currently have a host in every pathname. But if MAKE-PATHNAME did    not force the host, or if one could explicitly say :HOST NIL, then    such pathnames would be considerably more useful for merging.Proposal (PATHNAME-SYNTAX-ERROR-TIME:EXPLICITLY-VAGUE):  Clarify that we were unable to reach agreement on this issue and that  the time at which this error detection occurs is not well-specified.  Advise the editorial group to warn users clearly about this known source  of program portability problems.  Rationale:    This implements the status quo.  Cost to Implementors:      None.  Cost to Users:    No existing code must be modified, but there is an ongoing cost    associated with providing error checking at multiple points in a    program because implementations disagree as to where an error    might be signalled. In some cases, the effects of having to handle    this in multiple places may cause unpleasant modularity violations.Test Case:  See problem description.Current Practice:  Symbolics Genera signals an error at pathname construction time if a  pathname will be invalid. Once a pathname is successfully constructed,  it can generally be assumed that NAMESTRING will always succeed.Aesthetics:  Making this more well-defined would cause a definite aesthetic  improvement to some programs.Discussion:  Pitman prefers PATHNAME-SYNTAX-ERROR-TIME:NAMESTRING-COERCION but  believes that anything is an improvement over ...:EXPLICITLY-VAGUE.  CL pathname functions were not adequate for use in Macsyma because  they did not adequately represent to-be-merged-only pathnames (a  feature used very extensively in Macsyma), because errors could be  signalled at radically different times. To get around this, Pitman  had to create a data structure in Macsyma called an MPATHNAME which  was only trivially different than a PATHNAME but which made it  possible to deal portably with this issue of when errors occurred  and what kinds of errors occured. Unfortunately, since none of the  CL functions worked on MPATHNAMEs, a whole series of functions,  also only trivially different, had to be created: MAKE-MPATHNAME,  MNAMESTRING, MERGE-MPATHNAMES, MPATHNAME-NAME, MPATHNAME-TYPE,   MOPEN, WITH-MOPEN-FILE, etc.*start*03027 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 07 SEP 88 20:31:10 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 7 Sep 88  19:42:29 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 455970; Wed 7-Sep-88 22:40:16 EDTDate: Wed, 7 Sep 88 22:39 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Re: Issue: PATHNAME-SYNTAX-ERROR-TIME (Version 1)To: Sandra J Loosemore <sandra%cdr@cs.utah.edu>, Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: cl-cleanup@SAIL.STANFORD.EDUIn-Reply-To: <8807221702.AA02408@cdr.utah.edu>Message-ID: <19880908023959.9.MOON@EUPHRATES.SCRC.Symbolics.COM>    Date: Fri, 22 Jul 88 11:02:08 MDT    From: sandra%cdr@cs.utah.edu (Sandra J Loosemore)    Of the options presented for this issue, I prefer    PATHNAME-SYNTAX-ERROR-TIME:PATHNAME-CREATION.  The NAMESTRING-COERCION    option seems like it is really the wrong time, and I would rather not    leave it EXPLICITLY-VAGUE.I favor PATHNAME-SYNTAX-ERROR-TIME:PATHNAME-CREATION also.    However, I would really like to see something completely different --    namely adding a keyword argument to TRUENAME to allow it to be used    for explicit syntax checking of filenames without signalling an error    if the file doesn't exist.  Functions such as OPEN and the ones in    sections 23.3, 23.4, and 23.5 that actually pass pathnames to the host    file system would be required to (implictly or explicitly) perform the    same checking.     This would also solve a problem I brought up some time ago, that I was    having with Lucid Lisp under VMS.  I had defined a logical name like    LISP$LIBRARY that expanded into something that included a directory    specifier in its expansion, like disk$login:[loosemore.lisp.library].    However, I was getting things like	(namestring (merge-pathnames 			(pathname "[loosemore]foo.bar")			(pathname "lisp$library:")))    =>  "lisp$library:[loosemore]foo.bar"    which the file system naturally barfed on when I tried to open the    file.  The problem was that Lucid's PATHNAME function was treating the    logical name like a device specification instead of expanding it.    TRUENAME would have expanded the logical name for me, but since    LISP$LIBRARY was not a complete pathname for an existing file, it    would also have signalled an error.I know of no Common Lisp implementation for VMS that doesn't have thisproblem.  It's a strange thing about VMS that foo: sometimes impliesa directory and sometimes doesn't, and there's no syntactic way to tell.I think your suggested extension to TRUENAME is a reasonable way tocope with this oddity of VMS, and perhaps similar oddities of otheroperating systems (although I can't think of any right now).  How aboutwriting it up as a proposal?*start*01904 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 28 NOV 88 11:46:27 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 28 Nov 88  11:40:51 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 28 NOV 88 10:23:49 PSTDate: 26 Nov 88 20:10 PSTFrom: masinter.paSubject: Re: Issue: PATHNAME-SYNTAX-ERROR-TIME (Version 1)To: cl-cleanup@sail.stanford.eduMessage-ID: <881128-102349-1309@Xerox><<Kent asks that we defer the PATHNAME issues beyond the letter ballot. Ithink that is OK, and I am not planning to get more than those issues thatwere pending prior to the October meeting ready for the letter ballot; Iexpect we will have some more to present and discuss in the Januarymeeting, however.>>I think that the clarification could be more constructive thanEXPLICITLY-VAGUE and yet also remain vague.First, I believe the "partial specification" argument that it might beuseful and valuable for pathnames to have no explicit namestring, becausethe pathname is being used for holding data that will be subsequentlymerged. Thus, I would prefer to require that MERGE-PATHNAME, MAKE-PATHNAMEetc. not signal errors if given arguments of the correct type.Secondly, we can say that NAMESTRING may signal an error even if given apathname, if no such namestring could be constructed (and the error type);in addition, OPEN and other functions that take a pathname might alsosignal a (different) error if no such file existed.This would put the burden of consistency checking on NAMESTRING and itsinternal equivalent; if such consistency checking is necessary at all, itwould be necessary in NAMESTRING. It also would separate out the errortypes.I have no opinion about what the error types should be, as long as they aremore well specified than "ERROR".*start*09649 00024 US GV-Info: X3J13-mailer@SAIL.Stanford.EDU at 23-Mar-89 21:20:24 from AGReturn-Path: <X3J13-mailer@SAIL.Stanford.EDU>Received: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 23 MAR 89 21:20:06 PSTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 23 Mar 89  20:59:16 PSTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 563835; Thu 23-Mar-89 15:19:53 ESTDate: Thu, 23 Mar 89 15:19 ESTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: **DRAFT** Issue: PATHNAME-SYNTAX-ERROR-TIME (Version 1)To: X3J13@SAIL.Stanford.EDUMessage-ID: <890323151934.2.KMP@BOBOLINK.SCRC.Symbolics.COM>	>>> PLEASE DO -NOT- REPLY TO THIS ISSUE <<<Ponder it and bring your comments to the meeting.See summary of CL-Cleanup discussion at end. -kmp-----Issue:        PATHNAME-SYNTAX-ERROR-TIMEReferences:   File System Interface (pp409-427)Category:     CLARIFICATIONEdit history: 07-Jul-88, Version 1 by PitmanStatus:	      For Internal DiscussionProblem Description:  There exist conceivable pathnames for which there is no valid mapping in a  particular implementation. CLtL is not clear about the time at which this  error might be detected.  For example, on file systems which constrain pathname-types to be three  letters or fewer, the type "LISP" is not valid. The question arises: when  is this error detected?  In some implementations, the error might be detected while forming the  pathname. That is, (MAKE-PATHNAME :TYPE "LISP") signals an error.  In some implementations, the error might be detected while forming the  namestring. That is, (MAKE-PATHNAME :TYPE "LISP") succeeds, but  (NAMESTRING (MAKE-PATHNAME :TYPE "LISP")) signals an error.  In some implementations, validity checking might be done only by the host  operating system, so Lisp does not detect the error unless the operating  system complains. For example, (MAKE-PATHNAME :TYPE "LISP") succeeds,  and even (NAMESTRING (MAKE-PATHNAME :TYPE "LISP")) constructs a plausible  looking pathname, but (OPEN (NAMESTRING (MAKE-PATHNAME :TYPE "LISP"))) fails.  In some implementations, Lisp might make `friendly' corrections to the  pathname in order to form a namestring. For example,  (MAKE-PATHNAME :TYPE "LISP") might succeed, but   (NAMESTRING (MAKE-PATHNAME :TYPE "LISP")) might produce a namestring with  an extension such as ".LIS" or ".LSP".  Similar issues might come up in file systems which don't allow wildcard  pathnames. Is :WILD allowed in a name or type slot and then disallowed  upon coercion to a pathname, or is :WILD complained about "up front"?  This phenomenon is a barrier to portability because if a program is  debugged in an implementation that does, for example, NAMESTRING-time  error checking, the programmer may be lulled into an expectation that  it is acceptable to construct and manipulate invalid pathnames as long  as the problem is caught before an attempt to call NAMESTRING is  attempted. On the other hand, another programmer may debug his code in  a Lisp which does early error checking of syntax and may assume that   he is home free if the pathname gets constructed correctly.Proposal (PATHNAME-SYNTAX-ERROR-TIME:PATHNAME-CREATION):  Clarify that operations such as MAKE-PATHNAME and MERGE-PATHNMES which  construct new pathnames do plausibility checking of their arguments  and signal an error rather than construct a pathname for which NAMESTRING  would not produce a valid pathname.  Rationale:    This would identify clearly to the programmer where he should expect an    error to be signalled for a pathname.    This would mean that fully constructed pathnames could reliably    be converted to namestrings.  Cost to Implementors:      Some implementors, especially those which rely on the operating system    to be the sole authority on pathname syntax, might have to introduce    some new syntax-checking facilities.    Implementations where this error checking is done later would have to be    changed both to do it earlier, and to not make the unwarranted assumption    that pathnames with no valid namestring representation are constructable.  Cost to Users:    The ability to represent non-viable pathnames for the purpose of merging    would be lost. This feature was not portably available, but was available    in some operating systems.    Some code which expected an error, but expected it at a different time    would have to be changed.Proposal (PATHNAME-SYNTAX-ERROR-TIME:NAMESTRING-COERCION):  Clarify that it was valid to create a pathname which could not be  converted to a namestring. Require NAMESTRING (and related functions,  such as ENOUGH-NAMESTRING or any internal functions that might be used  in place of NAMESTRING by functions like OPEN and PROBE-FILE) to signal  an error for pathnames which do not represent valid filenames in the  designated file system.  Rationale:    This would identify clearly to the programmer where he should expect an    error to be signalled for a pathname.    This would allow the construction of pathnames for the sole purpose of    merging without causing what might seem to some as gratuitous errors.  Cost to Implementors:      Implementors who rely on the operating system to be the sole authority    on pathname syntax, might have to introduce some new syntax-checking    facilities.    Implementations where this error checking is done earlier would have to    be changed both to do it later, and to not make the unwarranted    assumption that any pathname has a valid namestring representation.  Cost to Users:    Early error checking of faulty pathnames would be lost.    Some code which expected an error, but expected it at a different time    would have to be changed.  Benefits:      Macsyma, for example, has encountered a need for "hostless" pathnames    (in merging). The concept makes no sense if every pathname must have    a namestring, because a pathname with no host cannot have a namestring.    However, if it's NAMESTRING's responsibility to signal an error, then    hostless pathnames are still useful for merging. Consider:	(MERGE-PATHNAMES (MAKE-PATHNAME :NAME "FRED") MARY)    This will override both the NAME and the HOST field of MARY because you    must currently have a host in every pathname. But if MAKE-PATHNAME did    not force the host, or if one could explicitly say :HOST NIL, then    such pathnames would be considerably more useful for merging.Proposal (PATHNAME-SYNTAX-ERROR-TIME:EXPLICITLY-VAGUE):  Clarify that we were unable to reach agreement on this issue and that  the time at which this error detection occurs is not well-specified.  Advise the editorial group to warn users clearly about this known source  of program portability problems.  Rationale:    This implements the status quo.  Cost to Implementors:      None.  Cost to Users:    No existing code must be modified, but there is an ongoing cost    associated with providing error checking at multiple points in a    program because implementations disagree as to where an error    might be signalled. In some cases, the effects of having to handle    this in multiple places may cause unpleasant modularity violations.Test Case:  See problem description.Current Practice:  Symbolics Genera signals an error at pathname construction time if a  pathname will be invalid. Once a pathname is successfully constructed,  it can generally be assumed that NAMESTRING will always succeed.Aesthetics:  Making this more well-defined would cause a definite aesthetic  improvement to some programs.Discussion:  Pitman prefers PATHNAME-SYNTAX-ERROR-TIME:NAMESTRING-COERCION but  believes that anything is an improvement over ...:EXPLICITLY-VAGUE.  CL pathname functions were not adequate for use in Macsyma because  they did not adequately represent to-be-merged-only pathnames (a  feature used very extensively in Macsyma), because errors could be  signalled at radically different times. To get around this, Pitman  had to create a data structure in Macsyma called an MPATHNAME which  was only trivially different than a PATHNAME but which made it  possible to deal portably with this issue of when errors occurred  and what kinds of errors occured. Unfortunately, since none of the  CL functions worked on MPATHNAMEs, a whole series of functions,  also only trivially different, had to be created: MAKE-MPATHNAME,  MNAMESTRING, MERGE-MPATHNAMES, MPATHNAME-NAME, MPATHNAME-TYPE,   MOPEN, WITH-MOPEN-FILE, etc.------Summary of CL-Cleanup discussion:Most of the mail was endorsements for option PATHNAME-CREATION.Sandra brought up a tangential issue about truenames that eventuallybecame a separate issue.I think I'm the only person pushing NAMESTRING-COERCION. I stronglybelieve it is the right thing, and that PATHNAME-CREATION is suboptimal,based on problems that have struck me with existing CL pathname system.However, even PATHNAME-CREATION would be an improvement from aportability standpoint and I am probably not going to push it becausethere are compatibility issues on the side of PATHNAME-CREATION (manyimplementations do this already), and because there are more importantissues for us to spend time on at the meeting.[Please try to come prepared to vote yes on one or both of PATHNAME-CREATION or NAMESTRING-COERCION so we don't have to fall back on EXPLICITLY-VAGUE, which is a total loss for program portability. -kmp]*start*01021 00024 US Date:  4 Apr 89 13:07 PDTSender: CL-Cleanup-mailer%SAIL.Stanford:EDU:XeroxFrom: KMP%STONY-BROOK.SCRC.Symbolics:COM:XeroxSubject: Issue: PATHNAME-SYNTAX-ERROR-TIMETo: CL-Cleanup%SAIL.Stanford:EDU:XeroxGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: PATHNAME-SYNTAX-ERROR-TIMETo: CL-Cleanup@SAIL.Stanford.EDUReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 04 APR 89 12:55:20 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 4 Apr 89  12:29:16 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 571240; Tue 4-Apr-89 15:29:14 EDTOriginal-Date: Tue, 4 Apr 89 15:28 EDTMessage-ID: <890404152844.4.KMP@BOBOLINK.SCRC.Symbolics.COM>GVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVThis was deferred to the next meeting.