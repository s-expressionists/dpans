*start*01239 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 21 SEP 88 23:29:53 PDTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 21 Sep 88  23:28:54 PDTReceived: from Cabernet.ms by ArpaGateway.ms ; 21 SEP 88 23:26:53 PDTDate: 21 Sep 88 23:27 PDTFrom: masinter.paSubject: Re: Issue: PRINT-PRETTY-HOOK (version 1)In-reply-to: Dan L. Pierson <pierson%mist@MULTIMAX.ENCORE.COM>'s message of Wed, 21 Sep 88 16:35:32 EDTTo: Dan L. Pierson <pierson%mist@MULTIMAX.ENCORE.COM>cc: cl-cleanup@sail.stanford.eduMessage-ID: <880921-232653-1366@Xerox>I thought at one time that extensions to prettyprint were going to be handled asspecializations to a standard generic function in the same way that print-objectis specializable. I'd like at least to make sure that this is present.There's too much that the prettyprinter needs to do "right" that a portableprettyprinter can't do, that I wonder if this really solves the problem. That is"while it is easy for a user to write a pretty printer" is it really easy for auser to write a correct pretty printer? One that can deal with *print-circle*,for example? *start*02544 00024 US Return-Path: <@multimax.ARPA:pierson%mist@multimax.ARPA>Received: from multimax.ARPA ([192.5.63.14]) by Xerox.COM ; 22 SEP 88 07:39:54 PDTReceived:  by multimax.ARPA (5.51/25-eef)	id AA06691; Thu, 22 Sep 88 10:40:34 EDTReceived: from localhost by mist.UUCP (3.2/4.7)	id AA13567; Thu, 22 Sep 88 10:42:15 EDTMessage-Id: <8809221442.AA13567@mist.UUCP>To: masinter.pa%Xerox.COM@MULTIMAX.ENCORE.COMCc: cl-cleanup%sail.stanford.edu@MULTIMAX.ENCORE.COMSubject: Re: Issue: PRINT-PRETTY-HOOK (version 1) In-Reply-To: Your message of 21 Sep 88 23:27:00 -0700.Date: Thu, 22 Sep 88 10:42:09 EDTFrom: Dan L. Pierson <pierson%mist@MULTIMAX.ENCORE.COM>    I thought at one time that extensions to prettyprint were going to be    handled as specializations to a standard generic function in the same    way that print-object is specializable. I'd like at least to make sure    that this is present.    I very much want this to be present, but it's inadequate for two reasons:1 CLOS may not be a required part of Common Lisp, therefore portable code  may not be able to assume it.2 Writing a separate pretty printer for each structure using standard  Common Lisp functions is likely to be much more verbose than doing  the same job using one of Dick Water's pretty printers.  Of course  some people will find the extension syntax of Dick's pretty  printers distasteful, but I'm proposing to standardize on them.    There's too much that the prettyprinter needs to do "right" that a    portable prettyprinter can't do, that I wonder if this really solves    the problem. That is "while it is easy for a user to write a pretty    printer" is it really easy for a user to write a correct pretty    printer? One that can deal with *print-circle*, for example?There may be things that a user written pretty printer can't do right(though I can't think of any) but *PRINT-CIRCLE* support certainlyisn't one of them as long as the pretty printer starts at the top(i.e. changing from one printer to another at say, level 3, will breakcircular printing for any two independent print functions).  I putfull *PRINT-CIRCLE* support into the VAX Lisp version of GPRINT; doingit as efficiently as possible was a bit of work, but it didn't requireany non user visible support (printing things like structures didrequire implementation dependent functions, but that's being addressedby a separate proposal).  Remember that the pretty printer can alwayspunt to PRINx-TO-STRING for atoms it doesn't understand.*start*01080 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 22 SEP 88 08:15:38 PDTReceived: from SEF1.SLISP.CS.CMU.EDU by SAIL.Stanford.EDU with TCP; 22 Sep 88  08:14:08 PDTReceived: from SEF1.SLISP.CS.CMU.EDU by SEF1.SLISP.CS.CMU.EDU; 22 Sep 88 11:11:01 EDTTo: cl-cleanup@sail.stanford.eduSubject: Re: Issue: PRINT-PRETTY-HOOK (version 1) In-reply-to: Your message of Thu, 22 Sep 88 10:42:09 -0400.             <8809221442.AA13567@mist.UUCP> Date: Thu, 22 Sep 88 11:10:52 EDTFrom: Scott.Fahlman@B.GP.CS.CMU.EDU    1 CLOS may not be a required part of Common Lisp, therefore portable code      may not be able to assume it.Do others share this view?  My understanding of recent decisions was thatCLOS was going to be in the standard with the same status as CONS and EVAL-- required of any system that wants to call itself a legal Common Lisp.I guess there's still some question about the meta-object stuff, but can'twe assume the rest?-- Scott*start*02257 00024 US Return-Path: <Moon@STONY-BROOK.SCRC.Symbolics.COM>Received: from STONY-BROOK.SCRC.Symbolics.COM ([128.81.41.144]) by Xerox.COM ; 22 SEP 88 09:30:40 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 463973; Thu 22-Sep-88 12:30:37 EDTDate: Thu, 22 Sep 88 12:30 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Re: Issue: PRINT-PRETTY-HOOK (version 1)To: masinter.pacc: Dan L. Pierson <pierson%mist@MULTIMAX.ENCORE.COM>, cl-cleanup@sail.stanford.eduIn-Reply-To: <880921-232653-1366@Xerox>Message-ID: <19880922163031.7.MOON@EUPHRATES.SCRC.Symbolics.COM>Line-fold: No    Date: 21 Sep 88 23:27 PDT    From: masinter.pa@Xerox.COM    I thought at one time that extensions to prettyprint were going to be handled as    specializations to a standard generic function in the same way that print-object    is specializable.If you read the writeup of print-object (88-002R p.2-67) you'll see that thepretty printer is required to call the print-object generic function, just asthe ugly printer does.  Perhaps this wasn't said clearly enough.As Pierson pointed out, this form of extension to the printer is orthogonalto he wants to do.  I haven't figured out whether what he really wants is tobe allowed to redefine the unnamed function that WRITE, PRINT, PRINC, FORMAT,etc. all call, or whether he wants to be able to redefine the unnamed functionthat the read-eval-print loop calls to print things.  Either way, thedesire is for a standardized way to redefine a system function wholesale,not to make it generic on its arguments.  This seems like a reasonable idea,although there is likely to be a surprising number of implementation-dependentdifficulties.Using the value of *PRINT-PRETTY* to enable a user-defined pretty printer isincompatible with Symbolics' current practice, where the value of *PRINT-PRETTY*tells the pretty printer additional information about the value being printed,for instance whether it is a program or data.  This should be orthogonal tothe choice of which pretty printer to use.  This pretty printer was writtenby Dick Waters, so perhaps his current portable pretty printer uses the sametechnique.*start*01832 00024 USaReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 22 SEP 88 09:34:06 PDTReceived: from multimax.ARPA (MULTIMAX.ENCORE.COM) by SAIL.Stanford.EDU with TCP; 22 Sep 88  09:32:30 PDTReceived:  by multimax.ARPA (5.51/25-eef)	id AA00508; Thu, 22 Sep 88 11:47:18 EDTReceived: from localhost by mist.UUCP (3.2/4.7)	id AA13717; Thu, 22 Sep 88 11:48:59 EDTMessage-Id: <8809221548.AA13717@mist.UUCP>To: Scott.Fahlman%B.GP.CS.CMU.EDU@MULTIMAX.ENCORE.COMCc: cl-cleanup%sail.stanford.edu@MULTIMAX.ENCORE.COMSubject: Re: Issue: PRINT-PRETTY-HOOK (version 1) In-Reply-To: Your message of Thu, 22 Sep 88 11:10:52 -0400.             <8809221523.AA00252@multimax.ARPA> Date: Thu, 22 Sep 88 11:48:57 EDTFrom: Dan L. Pierson <pierson%mist@MULTIMAX.ENCORE.COM>        1 CLOS may not be a required part of Common Lisp, therefore portable	  code may not be able to assume it.        Do others share this view?  My understanding of recent decisions was that    CLOS was going to be in the standard with the same status as CONS and EVAL    -- required of any system that wants to call itself a legal Common Lisp.    I guess there's still some question about the meta-object stuff, but can't    we assume the rest?    As I understand the vote at the last meeting, we voted to make CLOSchapters 1 and 2 the official definition of that part of the CommonLisp Object System but there was a clear understanding that we woulddecide later whether all Common Lisp implementations were required tosupport an object system at all.  Personally I think that making CLOS optional would be a lousy idea,but there does seem to be enough sentiment for it that we can't assumethat it won't happen.  Am I all wet here?*start*00991 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 22 SEP 88 07:29:05 PDTReceived: from multimax.ARPA by SAIL.Stanford.EDU with TCP; 22 Sep 88  07:27:55 PDTReceived:  by multimax.ARPA (5.51/25-eef)	id AA06543; Thu, 22 Sep 88 10:27:31 EDTReceived: from localhost by mist.UUCP (3.2/4.7)	id AA13532; Thu, 22 Sep 88 10:29:12 EDTMessage-Id: <8809221429.AA13532@mist.UUCP>To: Patrick Dussud <dussud%lucid.com@MULTIMAX.ENCORE.COM>Cc: cl-cleanup%sail.stanford.edu@MULTIMAX.ENCORE.COMSubject: Re: Issue: PRINT-PRETTY-HOOK (version 1) In-Reply-To: Your message of Wed, 21 Sep 88 19:51:50 -0700.Date: Thu, 22 Sep 88 10:29:09 EDTFrom: Dan L. Pierson <pierson%mist@MULTIMAX.ENCORE.COM>Would it help if the pretty print function took an additional optionalargument, the current print level (the current print length alwaysstarts at 0 when the function is called.)*start*03501 00024 USaReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 21 SEP 88 14:04:26 PDTReceived: from multimax.ARPA by SAIL.Stanford.EDU with TCP; 21 Sep 88  14:03:34 PDTReceived:  by multimax.ARPA (5.51/25-eef)	id AA00522; Wed, 21 Sep 88 17:03:06 EDTReceived: from localhost by mist.UUCP (3.2/4.7)	id AA12637; Wed, 21 Sep 88 16:35:37 EDTMessage-Id: <8809212035.AA12637@mist.UUCP>To: cl-cleanup%sail.stanford.edu@MULTIMAX.ENCORE.COMSubject: Issue: PRINT-PRETTY-HOOK (version 1)Date: Wed, 21 Sep 88 16:35:32 EDTFrom: Dan L. Pierson <pierson%mist@MULTIMAX.ENCORE.COM>This is a bit late for a minor change.  But it looks like thefollowing will make my, and many others, lives much easier in thefuture. ---------------Issue:         PRINT-PRETTY-HOOKReferences:    *PRINT-PRETTY* p. 371, WRITE, PRINT, PPRINT, etc. pp. 382-383,               FORMAT pp. 385-407Category:      CHANGE, ADDITIONEdit history:  Version 1 by Pierson, 9/21/88Status:        For Internal DiscussionProblem description:Pretty printers are a part of the Common Lisp development environmentthat are relatively easy for users to write themselves.  Furthermore,vendor supplied pretty printers vary widely in quality.Unfortunately, while it is easy for a user to write a pretty printer,many other Common Lisp functions are defined to invoke the prettyprinter internally under control of the variable, *PRINT-PRETTY*.Proposal (PRINT-PRETTY-HOOK:USE-VALUE):Specify that if the value of *PRINT-PRETTY* is of type FUNCTION thatthe function will be called with the standard arguments of PPRINTwhenever the pretty printer is to be invoked.Test Cases/Examples:(SETQ *PRINT-PRETTY* NIL) (PRINT FOO)Will print the value of FOO without extra white space.(SETQ *PRINT-PRETTY* T) (PRINT FOO)Will print the value of FOO using the standard pretty printer.(DEFUN MY-PPRINT (OBJECT &OPTIONAL OUTPUT-STREAM) ...)(SETQ *PRINT-PRETTY* #'MY-PPRINT) (PRINT FOO)(SETQ *PRINT-PRETTY* 'MY-PPRINT) (PRINT FOO)Will both print the value of FOO using a special pretty printer.Rationale:This seems like the simplest portable method of allowing a user toinstall a custom pretty printer.Current practice:I know of no Common Lisp implementation that supports this feature(though it's not specifically forbidden by CLtL).Cost to Implementors:An additional funcall will have to be added everywhere the value of*PRINT-PRETTY* is checked.  This should be fairly localized in mostimplementations.Cost to Users:None, this is an upward-compatible change.Cost of non-Adoption:Users will continue to be stuck with the vendor-supplied prettyprinter in many cases.Benefits:Users will be able to modify this part of the programming environmentto suite their tastes.  In addition, users of extendable prettyprinters will be able to ensure that their extensions are portablyavailable in all Common Lisp environments.Aesthetics:This sort of hook could well be considered an additional wart on thelanguage. Discussion:This proposal was inspired by Dick Water's announcement of aforthcoming portable Common Lisp pretty printer.Like editors, pretty printers tend to be very much a matter of taste.Since the language defines several ways that the pretty printer getsinvoked, the user should have control over which pretty printer isused across as many of these ways as possible.*start*01325 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 23 SEP 88 08:48:27 PDTReceived: from lucid.com by SAIL.Stanford.EDU with TCP; 23 Sep 88  08:47:52 PDTReceived: from rainbow-warrior ([192.9.200.16]) by heavens-gate.lucid.com id AA07506g; Fri, 23 Sep 88 07:46:05 PSTReceived: by rainbow-warrior id AA24733g; Fri, 23 Sep 88 08:44:24 PDTDate: Fri, 23 Sep 88 08:44:24 PDTFrom: Patrick Dussud <dussud@lucid.com>Message-Id: <8809231544.AA24733@rainbow-warrior>To: pierson%mist@MULTIMAX.ENCORE.COMCc: cl-cleanup@sail.stanford.eduIn-Reply-To: Dan L. Pierson's message of Thu, 22 Sep 88 10:29:09 EDT <8809221429.AA13532@mist.UUCP>Subject: Issue: PRINT-PRETTY-HOOK (version 1)    Date: Thu, 22 Sep 88 10:29:09 EDT   From: Dan L. Pierson <pierson%mist@multimax.ARPA>   Would it help if the pretty print function took an additional optional   argument, the current print level (the current print length always   starts at 0 when the function is called.)I think it makes it more consistent with the structure print functions. Idon't think that you can win all the time, because, if your print functioncalls a Common Lisp print function (print, princ...), then you lose the depth.Patrick.*start*01460 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 03 OCT 88 12:27:52 PDTReceived: from multimax.ARPA (MULTIMAX.ENCORE.COM) by SAIL.Stanford.EDU with TCP; 3 Oct 88  10:37:52 PDTReceived:  by multimax.ARPA (5.51/25-eef)	id AA08683; Mon, 3 Oct 88 13:37:36 EDTReceived: from localhost by mist.UUCP (3.2/4.7)	id AA25971; Mon, 3 Oct 88 13:39:23 EDTMessage-Id: <8810031739.AA25971@mist.UUCP>To: Patrick Dussud <dussud%lucid.com@MULTIMAX.ENCORE.COM>Cc: cl-cleanup%sail.stanford.edu@MULTIMAX.ENCORE.COMSubject: Re: Issue: PRINT-PRETTY-HOOK (version 1) In-Reply-To: Your message of Fri, 23 Sep 88 08:44:24 -0700.             <8809231544.AA24733@rainbow-warrior> Date: Mon, 03 Oct 88 13:39:21 EDTFrom: Dan L. Pierson <pierson%mist@MULTIMAX.ENCORE.COM>       Would it help if the pretty print function took an additional optional       argument, the current print level (the current print length always       starts at 0 when the function is called.)        I think it makes it more consistent with the structure print    functions. I don't think that you can win all the time, because,    if your print function calls a Common Lisp print function (print,    princ...), then you lose the depth.    Not really because I would expect my pretty print function to onlycall a Common Lisp print function on known leaves.    *start*02729 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 03 OCT 88 12:28:46 PDTReceived: from multimax.ARPA (MULTIMAX.ENCORE.COM) by SAIL.Stanford.EDU with TCP; 3 Oct 88  10:35:14 PDTReceived:  by multimax.ARPA (5.51/25-eef)	id AA08641; Mon, 3 Oct 88 13:34:50 EDTReceived: from localhost by mist.UUCP (3.2/4.7)	id AA25962; Mon, 3 Oct 88 13:36:36 EDTMessage-Id: <8810031736.AA25962@mist.UUCP>To: "David A. Moon" <Moon%STONY-BROOK.SCRC.Symbolics.COM@MULTIMAX.ENCORE.COM>Cc: cl-cleanup%sail.stanford.edu@MULTIMAX.ENCORE.COMSubject: Re: Issue: PRINT-PRETTY-HOOK (version 1) In-Reply-To: Your message of Thu, 22 Sep 88 12:30:00 -0400.Date: Mon, 03 Oct 88 13:36:32 EDTFrom: Dan L. Pierson <pierson%mist@MULTIMAX.ENCORE.COM>                                   I haven't figured out whether what he    really wants is to be allowed to redefine the unnamed function that    WRITE, PRINT, PRINC, FORMAT, etc. all call, or whether he wants to be    able to redefine the unnamed function that the read-eval-print loop    calls to print things.    I want to be able to redefine all of the above, in particular I wantto be able to force all interaction, including REP loops, debugger,tracer, etc. to use my pretty print function.  Of course it willalways be possible for a sufficiently dedicated implementation orapplication to defeat this either by rebinding *PRINT-PRETTY* or byusing internal print functions which don't follow the normal rules,but there will be much less chance of an implementation or applicationunintentionally preventing me from specifying my own pretty printer.Also of course, if I do this I take the risk that my pretty printerwill interact unfavorably with the implementation in other ways, butas one vendor likes to say: "Here's the gun, there's my foot".    Using the value of *PRINT-PRETTY* to enable a user-defined pretty    printer is incompatible with Symbolics' current practice, where the    value of *PRINT-PRETTY* tells the pretty printer additional    information about the value being printed, for instance whether it is    a program or data.  This should be orthogonal to the choice of which    pretty printer to use.  This pretty printer was written by Dick    Waters, so perhaps his current portable pretty printer uses the same    technique.Well, if the *PRINT-PRETTY* value hack won't work I'm open tosuggestions.  One possibility is to add a new variable, say*PRINT-PRETTY-FUNCTION*.  Another, which will cause screams ofoutrage, is to fbind *PRINT-PRETTY* as well as bind it.  Userredefinition of PPRINT is probably not a good choice.*start*01489 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 03 OCT 88 18:55:24 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 3 Oct 88  18:54:45 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 469957; Mon 3-Oct-88 21:52:56 EDTDate: Mon, 3 Oct 88 21:52 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Re: Issue: PRINT-PRETTY-HOOK (version 1) To: Dan L. Pierson <pierson%mist@MULTIMAX.ENCORE.COM>cc: cl-cleanup@sail.stanford.eduIn-Reply-To: <8810031736.AA25962@mist.UUCP>Message-ID: <19881004015229.2.MOON@EUPHRATES.SCRC.Symbolics.COM>I don't think you answered my question.  Do you want to change theeffect of -all- calls to WRITE, PRINT, FORMAT ~S, etc.?  Or do youwant to only change the printing by interactive tools (you mentionedthe read-eval-print loop, the debugger, and trace)?It sounds to me like what you want is a function you can redefine(or equivalently a variable you can SETQ to a function) togetherwith a specification of in what situations the function will becalled.  Once that's clear a name can be chosen.  Possibly thefeature already exists in the language, via a :AROUND methodon PRINT-OBJECT with no specialized parameters, depending on whetherwhat that does is precisely what you wanted.*start*02070 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 04 OCT 88 09:13:55 PDTReceived: from multimax.ARPA (MULTIMAX.ENCORE.COM) by SAIL.Stanford.EDU with TCP; 4 Oct 88  09:11:12 PDTReceived:  by multimax.ARPA (5.51/25-eef)	id AA00274; Tue, 4 Oct 88 11:03:47 EDTReceived: from localhost by mist.UUCP (3.2/4.7)	id AA26956; Tue, 4 Oct 88 09:57:36 EDTMessage-Id: <8810041357.AA26956@mist.UUCP>To: "David A. Moon" <Moon%STONY-BROOK.SCRC.Symbolics.COM@MULTIMAX.ENCORE.COM>Cc: cl-cleanup%sail.stanford.edu@MULTIMAX.ENCORE.COMSubject: Re: Issue: PRINT-PRETTY-HOOK (version 1) In-Reply-To: Your message of Mon, 03 Oct 88 21:52:00 -0400.             <19881004015229.2.MOON@EUPHRATES.SCRC.Symbolics.COM> Date: Tue, 04 Oct 88 09:57:34 EDTFrom: Dan L. Pierson <pierson%mist@MULTIMAX.ENCORE.COM>    I don't think you answered my question.  Do you want to change the    effect of -all- calls to WRITE, PRINT, FORMAT ~S, etc.?  Or do you    want to only change the printing by interactive tools (you mentioned    the read-eval-print loop, the debugger, and trace)?    Sorry, I want to change the effect of -all- calls.  The only reasonthat I harp on the interactive tools is that they are frequently thehardest to change.  If my own code wants to avoid the this feature Ican easily disable it locally.    It sounds to me like what you want is a function you can redefine    (or equivalently a variable you can SETQ to a function) together    with a specification of in what situations the function will be    called.Right, though dynamic binding would be more convenient than setting insome cases such as local disabling.             Once that's clear a name can be chosen.  Possibly the    feature already exists in the language, via a :AROUND method    on PRINT-OBJECT with no specialized parameters, depending on whether    what that does is precisely what you wanted.Does it do what I want (I'm not yet a CLOS theologian)?*start*02332 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 06 OCT 88 12:58:33 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 6 Oct 88  12:58:10 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 472014; Thu 6-Oct-88 15:56:09 EDTDate: Thu, 6 Oct 88 15:55 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Re: Issue: PRINT-PRETTY-HOOK (version 1) To: Dan L. Pierson <pierson%mist@MULTIMAX.ENCORE.COM>cc: cl-cleanup@sail.stanford.eduIn-Reply-To: <8810041357.AA26956@mist.UUCP>Message-ID: <19881006195542.6.MOON@EUPHRATES.SCRC.Symbolics.COM>    Date: Tue, 04 Oct 88 09:57:34 EDT    From: Dan L. Pierson <pierson%mist@multimax.ARPA>	I don't think you answered my question.  Do you want to change the	effect of -all- calls to WRITE, PRINT, FORMAT ~S, etc.?  Or do you	want to only change the printing by interactive tools (you mentioned	the read-eval-print loop, the debugger, and trace)?        Sorry, I want to change the effect of -all- calls.  The only reason    that I harp on the interactive tools is that they are frequently the    hardest to change.  If my own code wants to avoid the this feature I    can easily disable it locally.Okay.	It sounds to me like what you want is a function you can redefine	(or equivalently a variable you can SETQ to a function) together	with a specification of in what situations the function will be	called.    Right, though dynamic binding would be more convenient than setting in    some cases such as local disabling.You can get the effect of dynamic binding by globally redefining it to afunction that looks at a dynamically bound variable that tells it what to do.		 Once that's clear a name can be chosen.  Possibly the	feature already exists in the language, via a :AROUND method	on PRINT-OBJECT with no specialized parameters, depending on whether	what that does is precisely what you wanted.    Does it do what I want (I'm not yet a CLOS theologian)?Yes.I think this means we can withdraw the PRINT-PRETTY-HOOK proposal, sinceCommon Lisp as amended by CLOS already will do what you want.