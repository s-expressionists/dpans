*start*02103 00024 USfReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 13 SEP 88 12:33:02 PDTReceived: from decwrl.dec.com by SAIL.Stanford.EDU with TCP; 13 Sep 88  12:32:10 PDTReceived: by decwrl.dec.com (5.54.5/4.7.34)	id AA14068; Tue, 13 Sep 88 12:30:52 PDTDate: Tue, 13 Sep 88 12:30:52 PDTMessage-Id: <8809131930.AA14068@decwrl.dec.com>From: vanroggen%aitg.DEC@decwrl.dec.comTo: cl-cleanup@sail.stanford.eduSubject: Issue: HASH-TABLE-ACCESS (version 1)Issue:		HASH-TABLE-ACCESSReferences:	hash-tables (Chapter 21 of CLtL)Category:	ADDITIONEdit History:	13-Sept-88, version 1 by Walter van RoggenProblem Description:  There are many characteristics of hash-tables which are specified upon  creation but are not accessible afterwards.Proposal: (HASH-TABLE-ACCESS:PROVIDE)  Add the following functions to the language:  HASH-TABLE-REHASH-SIZE hash-table    Returns the current rehash size of a hash table.  HASH-TABLE-REHASH-THRESHOLD hash-table    Returns the current rehash threshold of a hash table.  HASH-TABLE-SIZE hash-table    Returns the current size of a hash table.  HASH-TABLE-TEST hash-table    Returns the test used for comparing keys in the hash table.    By default the value will be either EQL or #'EQL.Current Practice:  VAX LISP implements the proposal.Cost to Implementors:  Most of these should be trivial to implement, since the information  must be present for nearly all types.Cost to Users:  None.  This is an upward-compatible extension.Cost of Non-Adoption:  The benefits would not be available in a portable fashion.Benefits:  Programs would be able to access useful information otherwise hidden.  For example, it would allow programs to gain statistics about hash  table usage that might enable better tuning.Discussion:  None of these are required to be SETF'able, though that might be  a reasonable implementation-dependent extension.  This first appeared in ">GLS>clarifications.text" of 12/06/85.*start*01367 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 13 SEP 88 16:12:36 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM (SCRC-STONY-BROOK.ARPA) by SAIL.Stanford.EDU with TCP; 13 Sep 88  16:12:00 PDTReceived: from GRYPHON.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 458655; Tue 13-Sep-88 19:10:49 EDTDate: Tue, 13 Sep 88 19:10 EDTFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: HASH-TABLE-ACCESS (version 1)To: vanroggen%aitg.DEC@decwrl.dec.comcc: CL-CLEANUP@SAIL.Stanford.EDUIn-Reply-To: <8809131930.AA14068@decwrl.dec.com>Message-ID: <880913191005.8.KMP@GRYPHON.SCRC.Symbolics.COM>I'll support this, though I would -really- like to see this business ofthe test (EQ vs #'EQ) resolved.Personally, I feel that since the set is non-extensible, we ought tochange it to allow only :EQ, :EQL, or :EQUAL (and permit implementationsto accept other values for compatibility). Then the value returnedby HASH-TABLE-TEST could be deterministically :EQ (or whatever) andwe could do away with the popular Trivial Pursuit (TM) question abouthow the test is recognized. I think it would simplify a lot of things.If people buy this, I will write it up as a separate cleanup item.*start*01860 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 14 SEP 88 13:24:23 PDTReceived: from YUKON.SCRC.Symbolics.COM (SCRC-YUKON.ARPA) by SAIL.Stanford.EDU with TCP; 14 Sep 88  13:21:55 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by YUKON.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 390886; Wed 14-Sep-88 15:46:40 EDTDate: Wed, 14 Sep 88 15:46 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: not about Issue: HASH-TABLE-ACCESS (version 1)To: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>cc: vanroggen%aitg.DEC@decwrl.dec.com, CL-CLEANUP@SAIL.Stanford.EDUIn-Reply-To: <880913191005.8.KMP@GRYPHON.SCRC.Symbolics.COM>Message-ID: <19880914194605.0.MOON@EUPHRATES.SCRC.Symbolics.COM>    Date: Tue, 13 Sep 88 19:10 EDT    From: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>    I'll support this, though I would -really- like to see this business of    the test (EQ vs #'EQ) resolved.    Personally, I feel that since the set is non-extensible, we ought to    change it to allow only :EQ, :EQL, or :EQUAL (and permit implementations    to accept other values for compatibility). Then the value returned    by HASH-TABLE-TEST could be deterministically :EQ (or whatever) and    we could do away with the popular Trivial Pursuit (TM) question about    how the test is recognized. I think it would simplify a lot of things.    If people buy this, I will write it up as a separate cleanup item.I am strongly opposed to this.  It would be horrible for this to beincompatible with every other :TEST keyword argument in the language.Also I deny that it is non-extensible.  Common Lisp doesn't currentlyprovide a way to make it extensible, but in fact that is very easy toadd; SCL has it.*start*01044 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 14 SEP 88 13:24:26 PDTReceived: from ALLEGHENY.SCRC.Symbolics.COM ([128.81.41.45]) by SAIL.Stanford.EDU with TCP; 14 Sep 88  13:21:20 PDTReceived: from EUPHRATES.SCRC.Symbolics.COM by ALLEGHENY.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 106652; Wed 14-Sep-88 15:48:20 EDTDate: Wed, 14 Sep 88 15:48 EDTFrom: David A. Moon <Moon@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: HASH-TABLE-ACCESS (version 1)To: vanroggen%aitg.DEC@decwrl.dec.comcc: cl-cleanup@sail.stanford.eduIn-Reply-To: <8809131930.AA14068@decwrl.dec.com>Message-ID: <19880914194817.1.MOON@EUPHRATES.SCRC.Symbolics.COM>I don't see anything immediately wrong with this, but I have a vaguerecollection that the cleanup committee discussed and rejected asimilar proposal once before.  If so, we should find out why.Could it be that it's not clear precisely what some of these valuesmean?*start*01370 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([10.0.0.11]) by Xerox.COM ; 16 SEP 88 00:07:11 PDTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 16 Sep 88  00:05:46 PDTReceived: from Cabernet.ms by ArpaGateway.ms ; 16 SEP 88 00:04:25 PDTDate: 16 Sep 88 00:04 PDTFrom: masinter.paSubject: Re: Issue: HASH-TABLE-ACCESS (version 1)In-reply-to: vanroggen%aitg.DEC@decwrl.dec.com's message of Tue, 13 Sep 88 12:30:52 PDTTo: vanroggen%aitg.DEC@decwrl.dec.comcc: cl-cleanup@sail.stanford.eduMessage-ID: <880916-000425-3811@Xerox>Is it reasonable for implementations to extend the set of SETF-able forms? Itwould seem to lead to more subtle incompatibilities, because there would be nosimple lexical analysis that would determine the use of an extension vs thestandard. Further, I don't think that HASH-TABLE-SIZE HASH-TABLE-TEST, arereasonably SETF-able.  If you change the :TEST, would would you do about entriesthat now collide? It would make more sense to make HASH-TABLE-REHASH-SIZEHASH-TABLE-REHASH-THRESHOLDboth SETFable if it is reasonable to expect to do so.I wonder before we add more "instance variables" for built in data structures ifwe wouldn't be doing better if we made access to these via CLOS? I won't push onthat too hard....*start*02435 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 19 SEP 88 20:15:52 PDTReceived: from lucid.com by SAIL.Stanford.EDU with TCP; 19 Sep 88  20:14:34 PDTReceived: from bhopal ([192.9.200.13]) by heavens-gate.lucid.com id AA03947g; Mon, 19 Sep 88 19:12:54 PSTReceived: by bhopal id AA16279g; Mon, 19 Sep 88 20:12:22 PDTDate: Mon, 19 Sep 88 20:12:22 PDTFrom: Jon L White <jonl@lucid.com>Message-Id: <8809200312.AA16279@bhopal>To: vanroggen%aitg.DEC@decwrl.dec.comCc: cl-cleanup@sail.stanford.eduIn-Reply-To: vanroggen%aitg.DEC@decwrl.dec.com's message of Tue, 13 Sep 88 12:30:52 PDT <8809131930.AA14068@decwrl.dec.com>Subject: Issue: HASH-TABLE-ACCESS (version 1)re: Proposal: (HASH-TABLE-ACCESS:PROVIDE)      Add the following functions to the language:      HASH-TABLE-REHASH-SIZE hash-table	Returns the current rehash size of a hash table.      HASH-TABLE-REHASH-THRESHOLD hash-table	Returns the current rehash threshold of a hash table.      HASH-TABLE-SIZE hash-table	Returns the current size of a hash table.      HASH-TABLE-TEST hash-table	Returns the test used for comparing keys in the hash table.	By default the value will be either EQL or #'EQL.Sigh, this issue is one of the very clear "Clarifications" that GuySteele issued on 6-Dec-1985, and which have not hitherto been turnedinto format "Cleanup" proposals.For the "Current Practice" section, you can mention that ever since the 2.0 release Lucid has provided all four accessors, as well as setf methodsfor HASH-TABLE-REHASH-THRESHOLD and HASH-TABLE-REHASH-SIZE.   [However, they have not been in Lucid's documentation until the 3.0 release].  Could you be convinced to ask the for two setf "methods" too?One other request: the return value of HASH-TABLE-TEST shouldbe among the values of 'EQ, 'EQL, or 'EQUAL -- not among #'EQ,#'EQL, or #'EQUAL.  I'd actually prefer to see MAKE-HASH-TABLErestricted to 'EQ, 'EQL, or 'EQUAL since this argument is notused for it's functional value so much as merely a way to signify one choice out of three possible.  But this is probably too muchbackwards incompatibility for too little return; at least theaccessor function doesn't have to perpetuate the myth thatany old function of two arguments is acceptable as a hash-table:test argument.-- JonL --*start*03210 00024 US Date:  8 Oct 88 17:35 PDTSender: masinter.paSubject: DRAFTIssue: HASH-TABLE-ACCESS (version 1)From: cl-cleanup@sail.stanford.eduTo: x3j13@sail.stanford.eduREPLY-TO: cl-cleanup@sail.stanford.eduline-fold: NOcc: MasinterStatus: DRAFT -- see comments at endIssue: HASH-TABLE-ACCESSReferences:	hash-tables (Chapter 21 of CLtL)Category:	ADDITIONEdit History: 13-Sept-88, version 1 by Walter van RoggenProblem Description:  There are many characteristics of hash-tables which are specified upon  creation but are not accessible afterwards.Proposal: (HASH-TABLE-ACCESS:PROVIDE)  Add the following functions to the language:  HASH-TABLE-REHASH-SIZE hash-table    Returns the current rehash size of a hash table.  HASH-TABLE-REHASH-THRESHOLD hash-table    Returns the current rehash threshold of a hash table.  HASH-TABLE-SIZE hash-table    Returns the current size of a hash table.  HASH-TABLE-TEST hash-table    Returns the test used for comparing keys in the hash table.    By default the value will be EQL.Current Practice:  VAX LISP implements the proposal.Cost to Implementors:  Most of these should be trivial to implement, since the information  must be present for nearly all types.Cost to Users:  None.  This is an upward-compatible extension.Cost of Non-Adoption:  The benefits would not be available in a portable fashion.Benefits:  Programs would be able to access useful information otherwise hidden.  For example, it would allow programs to gain statistics about hash  table usage that might enable better tuning.Discussion:  None of these are required to be SETF'able, though that might be  a reasonable implementation-dependent extension.  This first appeared in ">GLS>clarifications.text" of 12/06/85.- - - - -Is it reasonable for implementations to extend the set of SETF-able forms? Itwould seem to lead to more subtle incompatibilities, because there would be nosimple lexical analysis that would determine the use of an extension vs thestandard. Further, I don't think that HASH-TABLE-SIZE HASH-TABLE-TEST, arereasonably SETF-able.  If you change the :TEST, would would you do about entriesthat now collide? It would make more sense to make HASH-TABLE-REHASH-SIZEHASH-TABLE-REHASH-THRESHOLDboth SETFable if it is reasonable to expect to do so.I wonder before we add more slots for built in data structures ifwe wouldn't be doing better if we made access to these via CLOS? I won't push onthat too hard....- - - - -this issue is one of the very clear "Clarifications" that GuySteele issued on 6-Dec-1985, and which have not hitherto been turnedinto format "Cleanup" proposals.For the "Current Practice" section, you can mention that ever since the 2.0 release Lucid has provided all four accessors, as well as setf methodsfor HASH-TABLE-REHASH-THRESHOLD and HASH-TABLE-REHASH-SIZE.   [However, they have not been in Lucid's documentation until the 3.0 release].  Could you be convinced to ask the for two setf "methods" too?One other request: the return value of HASH-TABLE-TEST shouldbe among the values of 'EQ, 'EQL, or 'EQUAL -- not among #'EQ,#'EQL, or #'EQUAL.  *start*03534 00024 US Return-Path: <X3J13-mailer@SAIL.Stanford.EDU>Received: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 08 OCT 88 17:55:03 PDTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 8 Oct 88  17:41:26 PDTReceived: from Cabernet.ms by ArpaGateway.ms ; 08 OCT 88 17:35:50 PDTDate: 8 Oct 88 17:35 PDTSender: masinter.paSubject: DRAFTIssue: HASH-TABLE-ACCESS (version 1)From: cl-cleanup@sail.stanford.eduTo: x3j13@sail.stanford.eduREPLY-TO: cl-cleanup@sail.stanford.eduline-fold: NOcc: Masinter.paMessage-ID: <881008-173550-2380@Xerox>!Status: DRAFT -- see comments at endIssue: HASH-TABLE-ACCESSReferences:	hash-tables (Chapter 21 of CLtL)Category:	ADDITIONEdit History: 13-Sept-88, version 1 by Walter van RoggenProblem Description:  There are many characteristics of hash-tables which are specified upon  creation but are not accessible afterwards.Proposal: (HASH-TABLE-ACCESS:PROVIDE)  Add the following functions to the language:  HASH-TABLE-REHASH-SIZE hash-table    Returns the current rehash size of a hash table.  HASH-TABLE-REHASH-THRESHOLD hash-table    Returns the current rehash threshold of a hash table.  HASH-TABLE-SIZE hash-table    Returns the current size of a hash table.  HASH-TABLE-TEST hash-table    Returns the test used for comparing keys in the hash table.    By default the value will be EQL.Current Practice:  VAX LISP implements the proposal.Cost to Implementors:  Most of these should be trivial to implement, since the information  must be present for nearly all types.Cost to Users:  None.  This is an upward-compatible extension.Cost of Non-Adoption:  The benefits would not be available in a portable fashion.Benefits:  Programs would be able to access useful information otherwise hidden.  For example, it would allow programs to gain statistics about hash  table usage that might enable better tuning.Discussion:  None of these are required to be SETF'able, though that might be  a reasonable implementation-dependent extension.  This first appeared in ">GLS>clarifications.text" of 12/06/85.- - - - -Is it reasonable for implementations to extend the set of SETF-able forms? Itwould seem to lead to more subtle incompatibilities, because there would be nosimple lexical analysis that would determine the use of an extension vs thestandard. Further, I don't think that HASH-TABLE-SIZE HASH-TABLE-TEST, arereasonably SETF-able.  If you change the :TEST, would would you do about entriesthat now collide? It would make more sense to make HASH-TABLE-REHASH-SIZEHASH-TABLE-REHASH-THRESHOLDboth SETFable if it is reasonable to expect to do so.I wonder before we add more slots for built in data structures ifwe wouldn't be doing better if we made access to these via CLOS? I won't push onthat too hard....- - - - -this issue is one of the very clear "Clarifications" that GuySteele issued on 6-Dec-1985, and which have not hitherto been turnedinto format "Cleanup" proposals.For the "Current Practice" section, you can mention that ever since the 2.0 release Lucid has provided all four accessors, as well as setf methodsfor HASH-TABLE-REHASH-THRESHOLD and HASH-TABLE-REHASH-SIZE.   [However, they have not been in Lucid's documentation until the 3.0 release].  Could you be convinced to ask the for two setf "methods" too?One other request: the return value of HASH-TABLE-TEST shouldbe among the values of 'EQ, 'EQL, or 'EQUAL -- not among #'EQ,#'EQL, or #'EQUAL.  *start*02270 00024 USfReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 13 OCT 88 12:33:19 PDTReceived: from decwrl.dec.com by SAIL.Stanford.EDU with TCP; 13 Oct 88  12:32:25 PDTReceived: by decwrl.dec.com (5.54.5/4.7.34)	id AA15360; Thu, 13 Oct 88 12:30:44 PDTDate: Thu, 13 Oct 88 12:30:44 PDTMessage-Id: <8810131930.AA15360@decwrl.dec.com>From: vanroggen%aitg.DEC@decwrl.dec.comTo: cl-cleanup@sail.stanford.eduSubject: Issue: HASH-TABLE-ACCESS (version 2) Issue: HASH-TABLE-ACCESSReferences:	hash-tables (Chapter 21 of CLtL)Category:	ADDITIONEdit History: 13-Sept-88, version 1 by Walter van Roggen              13-Oct-88, version 2 by Walter van Roggen Problem Description:   There are many characteristics of hash-tables which are specified upon  creation but are not accessible afterwards. Proposal: (HASH-TABLE-ACCESS:PROVIDE)   Add the following functions to the language:   HASH-TABLE-REHASH-SIZE hash-table     Returns the current rehash size of a hash table.   HASH-TABLE-REHASH-THRESHOLD hash-table     Returns the current rehash threshold of a hash table.   HASH-TABLE-SIZE hash-table     Returns the current size of a hash table.   HASH-TABLE-TEST hash-table     Returns the test used for comparing keys in the hash table.    By default the value will be EQL.  Current Practice:   VAX LISP and Lucid 3.0 implement the proposal. Cost to Implementors:   Most of these should be trivial to implement, since the information  must be present for nearly all types. Cost to Users:   None.  This is an upward-compatible extension. Cost of Non-Adoption:   The benefits would not be available in a portable fashion. Benefits:   Programs would be able to access useful information otherwise hidden.  For example, it would allow programs to gain statistics about hash  table usage that might enable better tuning. Discussion:   None of these are required to be SETF'able, though some might be  reasonable implementation-dependent extensions.  Including such  modification abilities might constrain some implementations unduly.   This first appeared in ">GLS>clarifications.text" of 12/06/85.*start*00797 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 13 OCT 88 14:19:46 PDTReceived: from cs.utah.edu by SAIL.Stanford.EDU with TCP; 13 Oct 88  14:20:02 PDTReceived: by cs.utah.edu (5.54/utah-2.0-cs)	id AA20859; Thu, 13 Oct 88 15:18:24 MDTReceived: by defun.utah.edu (5.54/utah-2.0-leaf)	id AA19898; Thu, 13 Oct 88 15:18:22 MDTFrom: sandra%defun@cs.utah.edu (Sandra J Loosemore)Message-Id: <8810132118.AA19898@defun.utah.edu>Date: Thu, 13 Oct 88 15:18:21 MDTSubject: issue HASH-TABLE-ACCESSTo: cl-cleanup@sail.stanford.eduAdding accessors for hash tables seems like a reasonable idea to me,but I don't like the idea of being able to SETF them.-Sandra-------*start*01616 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 13 OCT 88 19:18:39 PDTReceived: from EDDIE.MIT.EDU by SAIL.Stanford.EDU with TCP; 13 Oct 88  19:17:04 PDTReceived: by EDDIE.MIT.EDU with UUCP with smail2.5 with sendmail-5.45/4.7 id <AA21938@EDDIE.MIT.EDU>; Thu, 13 Oct 88 22:15:55 EDTReceived: by spt.entity.com (smail2.5); 13 Oct 88 21:09:35 EDT (Thu)To: vanroggen%aitg.DEC@decwrl.dec.comCc: cl-cleanup@sail.stanford.eduIn-Reply-To: vanroggen%aitg.DEC@decwrl.dec.com's message of Thu, 13 Oct 88 12:30:44 PDT <8810131930.AA15360@decwrl.dec.com>Subject: Issue: HASH-TABLE-ACCESS (version 2)Message-Id: <8810132109.AA01858@spt.entity.com>Date: 13 Oct 88 21:09:35 EDT (Thu)From: gz@spt.entity.com (Gail Zacharias)   Date: Thu, 13 Oct 88 12:30:44 PDT   From: vanroggen%aitg.DEC@decwrl.dec.com     HASH-TABLE-REHASH-SIZE hash-table       Returns the current rehash size of a hash table.     HASH-TABLE-REHASH-THRESHOLD hash-table       Returns the current rehash threshold of a hash table.     HASH-TABLE-SIZE hash-table       Returns the current size of a hash table.I don't think the "current" values of these are well defined except inreference to one particular implementation technique (I believe thecorresponding arguments to make-hash-table are advisory in nature and can beignored when not applicable).  For instance, can you describe what animplementation using alists should return from each of these functions?I do support the addition of HASH-TABLE-TEST.*start*00926 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 14 OCT 88 13:31:28 PDTReceived: from decwrl.dec.com by SAIL.Stanford.EDU with TCP; 14 Oct 88  13:29:48 PDTReceived: by decwrl.dec.com (5.54.5/4.7.34)	id AA06582; Fri, 14 Oct 88 13:29:08 PDTDate: Fri, 14 Oct 88 13:29:08 PDTMessage-Id: <8810142029.AA06582@decwrl.dec.com>From: vanroggen%aitg.DEC@decwrl.dec.comTo: gz@spt.entity.comSubject: RE: Issue: HASH-TABLE-ACCESS (version 2)Well, I think there would be some leeway on the return values forHASH-TABLE-REHASH-SIZE/REHASH-THRESHOLD/SIZE too.If an implementation really did implement them with association lists,perhaps reasonable return values would be:  HASH-TABLE-REHASH-SIZE  1  HASH-TABLE-REHASH-THRESHOLD  1.0  HASH-TABLE-SIZE  the length of the association list			---Walter*start*01874 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 17 OCT 88 16:25:11 PDTReceived: from lucid.com by SAIL.Stanford.EDU with TCP; 17 Oct 88  16:23:58 PDTReceived: from bhopal ([192.9.200.13]) by LUCID.COM id AA05331g; Mon, 17 Oct 88 16:23:55 PDTReceived: by bhopal id AA04673g; Mon, 17 Oct 88 16:22:21 PDTDate: Mon, 17 Oct 88 16:22:21 PDTFrom: Jon L White <jonl@lucid.com>Message-Id: <8810172322.AA04673@bhopal>To: vanroggen%aitg.DEC@decwrl.dec.comCc: cl-cleanup@sail.stanford.eduIn-Reply-To: vanroggen%aitg.DEC@decwrl.dec.com's message of Thu, 13 Oct 88 12:30:44 PDT <8810131930.AA15360@decwrl.dec.com>Subject: Issue: HASH-TABLE-ACCESS (version 2)I still would like to see SETF enabled for:    HASH-TABLE-REHASH-SIZE    HASH-TABLE-REHASH-THRESHOLDAt issue is the rate of "rehashing" between successive, novel entriesinto the table, and the rate of consing to maintain the table.  [Perhaps this would be clearer if there were a function in the language called REHASH; Lucid 3.0 has such a function, and Interlisp-D had such a function.]Of course, the setf methods for these two accessors would do a good deal of argument and consistency checking.  So what possible harm could come from permitting the user to alter these parameters after initial creation?  those implementations that substitute alists for "hash-tables" can try to adapt to this view, that some kind of "rehash" step [with some determined cost] is done after the entry which first makes:    (hash-table-count x)  >  (* (hash-table-size x)                                (hash-table-rehash-threshold x))be true [assuming a floating-point value for the threshold].  This is part of the whole point for having "hash tables" in the language.-- JonL --*start*00706 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 17 OCT 88 17:17:53 PDTReceived: from decwrl.dec.com by SAIL.Stanford.EDU with TCP; 17 Oct 88  17:16:33 PDTReceived: by decwrl.dec.com (5.54.5/4.7.34)	id AA10064; Mon, 17 Oct 88 17:16:05 PDTDate: Mon, 17 Oct 88 17:16:05 PDTMessage-Id: <8810180016.AA10064@decwrl.dec.com>From: vanroggen%aitg.DEC@decwrl.dec.comTo: jonl@lucid.comSubject: RE: Issue: HASH-TABLE-ACCESS (version 2)I'm quite sympathetic to being able to SETF some of the hash-table readers,but I didn't think it appropriate to require of all implementations.*start*02101 00024 USaReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 14 NOV 88 15:31:37 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 14 Nov 88  15:29:23 PSTReceived: from Cabernet.ms by ArpaGateway.ms ; 14 NOV 88 14:57:56 PSTDate: 14 Nov 88 14:57 PSTFrom: masinter.paSubject: RE: Issue: HASH-TABLE-ACCESS (version 2)In-reply-to: vanroggen%aitg.DEC@decwrl.dec.com's message of Mon, 17 Oct 88 17:16:05 PDTTo: vanroggen%aitg.DEC@decwrl.dec.comcc: cl-cleanup@sail.stanford.eduMessage-ID: <881114-145756-2292@Xerox>I think we need a new version of this proposal that spells out the answersto the questions that arose in response to version 2. If things are notspecified, give the reason for not specifying them; if the return valuesare implementation-dependent, give that as well.The value of HASH-TAbLE-REHASH-SIZE and HASH-TAbLE-REHASH-THRESHOLD areimplementation dependent, and guaranteed to be greater than or equal to thevalues given to MAKE-HASH-TABLE, and idempotent, in that if you make a hashtable with the same values as a given hash table then the -REHASH-SIZE and-REHASH-THRESHOLD of the newly created one will be the same as the inputvalues. (This says that they may be thresholded upward in someimplementation-dependent-manner.)HASH-TABLE-SIZE should be greater than or equal to the count of thingsMAPHASH would iterate over, and HASH-TABLE-TEST will return one of thesymbols EQ EQL EQUAL (or, if HASH-TABLE-TESTS passes, EQUALP), even if #'EQ#'EQUAL #'EQL are given.Normally implementation-dependent-extensions are explicitly discouraged;I'm no longer sure at the momemnt whether PACKAGE-CLUTTER would expliciltydisallow such extensions unless they are explicitly allowed, but we shouldbe cautious in throwing around phrases like "might be  reasonable implementation-dependent extensions" if we don't mean it. Iwould take that out, actually.Walter, as you are the author of this, I'll ask you first to produce arevision. Will you?*start*02352 00024 US Date:  8 Dec 88 11:17 PSTFrom: masinter.paSubject: [masinter.pa: RE: Issue: HASH-TABLE-ACCESS (version 2)]To: vanroggen%aitg.DEC@decwrl.dec.comcc: masinter.pa     ----- Begin Forwarded Messages -----Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 14 NOV 88 15:31:37 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 14 Nov 88  15:29:23 PSTReceived: from Cabernet.ms by ArpaGateway.ms ; 14 NOV 88 14:57:56 PSTDate: 14 Nov 88 14:57 PSTFrom: masinter.paSubject: RE: Issue: HASH-TABLE-ACCESS (version 2)In-reply-to: vanroggen%aitg.DEC@decwrl.dec.com's message of Mon, 17 Oct 88 17:16:05 PDTTo: vanroggen%aitg.DEC@decwrl.dec.comcc: cl-cleanup@sail.stanford.eduMessage-ID: <881114-145756-2292@Xerox>I think we need a new version of this proposal that spells out the answersto the questions that arose in response to version 2. If things are notspecified, give the reason for not specifying them; if the return valuesare implementation-dependent, give that as well.The value of HASH-TAbLE-REHASH-SIZE and HASH-TAbLE-REHASH-THRESHOLD areimplementation dependent, and guaranteed to be greater than or equal to thevalues given to MAKE-HASH-TABLE, and idempotent, in that if you make a hashtable with the same values as a given hash table then the -REHASH-SIZE and-REHASH-THRESHOLD of the newly created one will be the same as the inputvalues. (This says that they may be thresholded upward in someimplementation-dependent-manner.)HASH-TABLE-SIZE should be greater than or equal to the count of thingsMAPHASH would iterate over, and HASH-TABLE-TEST will return one of thesymbols EQ EQL EQUAL (or, if HASH-TABLE-TESTS passes, EQUALP), even if #'EQ#'EQUAL #'EQL are given.Normally implementation-dependent-extensions are explicitly discouraged;I'm no longer sure at the momemnt whether PACKAGE-CLUTTER would expliciltydisallow such extensions unless they are explicitly allowed, but we shouldbe cautious in throwing around phrases like "might be  reasonable implementation-dependent extensions" if we don't mean it. Iwould take that out, actually.Walter, as you are the author of this, I'll ask you first to produce arevision. Will you?     ----- End Forwarded Messages -----*start*00858 00024 US Return-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 12 DEC 88 11:48:46 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 12 Dec 88  11:43:44 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 12 DEC 88 11:31:45 PSTDate: 12 Dec 88 11:31 PSTFrom: masinter.paSubject: RE: Issue: HASH-TABLE-ACCESS (version 2)In-reply-to: masinter.pa's message of 14 Nov 88 14:57 PSTTo: vanroggen%aitg.DEC@decwrl.dec.com, cl-cleanup@sail.stanford.eduMessage-ID: <881212-113145-4632@Xerox>I've not heard from Walter in weeks; I presume he is somehow unavailable.I don't have a new version of this issue and I'm reluctant to mail outVersion 2 given comments from Sandra, GZ and JonL.I hope we can have a new version to bring with us.*start*05983 00024 US GV-Info: X3J13-mailer@SAIL.Stanford.EDU at 16-Mar-89 23:02:41 from AGReturn-Path: <X3J13-mailer@SAIL.Stanford.EDU>Received: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 16 MAR 89 23:02:35 PSTReceived: from Xerox.COM by SAIL.Stanford.EDU with TCP; 16 Mar 89  22:53:48 PSTReceived: from Semillon.ms by ArpaGateway.ms ; 16 MAR 89 22:51:36 PSTDate: 16 Mar 89 22:51 PSTFrom: masinter.paSubject: Issue: HASH-TABLE-ACCESS (version 2)to: X3J13@sail.stanford.eduLine-fold: NOMessage-ID: <890316-225136-6875@Xerox>Version 1 of this issue was distributed priorto the October 1988 meeting.This version was produced in response tocomments there.Additional comments are at the end.!Issue: HASH-TABLE-ACCESSReferences:	hash-tables (Chapter 21 of CLtL)Category:	ADDITIONEdit History: 13-Sept-88, version 1 by Walter van Roggen              13-Oct-88, version 2 by Walter van Roggen Problem Description:   There are many characteristics of hash-tables which are specified upon  creation but are not accessible afterwards. Proposal: (HASH-TABLE-ACCESS:PROVIDE)   Add the following functions to the language:   HASH-TABLE-REHASH-SIZE hash-table     Returns the current rehash size of a hash table.   HASH-TABLE-REHASH-THRESHOLD hash-table     Returns the current rehash threshold of a hash table.   HASH-TABLE-SIZE hash-table     Returns the current size of a hash table.   HASH-TABLE-TEST hash-table     Returns the test used for comparing keys in the hash table.    By default the value will be EQL.  Current Practice:   VAX LISP and Lucid 3.0 implement the proposal. Cost to Implementors:   Most of these should be trivial to implement, since the information  must be present for nearly all types. Cost to Users:   None.  This is an upward-compatible extension. Cost of Non-Adoption:   The benefits would not be available in a portable fashion. Benefits:   Programs would be able to access useful information otherwise hidden.  For example, it would allow programs to gain statistics about hash  table usage that might enable better tuning. Discussion:   None of these are required to be SETF'able, though some might be  reasonable implementation-dependent extensions.  Including such  modification abilities might constrain some implementations unduly.   This first appeared in ">GLS>clarifications.text" of 12/06/85.!Additional Comments:Adding accessors for hash tables seems like a reasonable idea to me,but I don't like the idea of being able to SETF them.- - - - -     HASH-TABLE-REHASH-SIZE hash-table       Returns the current rehash size of a hash table.     HASH-TABLE-REHASH-THRESHOLD hash-table       Returns the current rehash threshold of a hash table.     HASH-TABLE-SIZE hash-table       Returns the current size of a hash table.I don't think the "current" values of these are well defined except inreference to one particular implementation technique (I believe thecorresponding arguments to make-hash-table are advisory in nature and can beignored when not applicable).  For instance, can you describe what animplementation using alists should return from each of these functions?I do support the addition of HASH-TABLE-TEST.- - - - - - -Well, I think there would be some leeway on the return values forHASH-TABLE-REHASH-SIZE/REHASH-THRESHOLD/SIZE too.If an implementation really did implement them with association lists,perhaps reasonable return values would be:  HASH-TABLE-REHASH-SIZE  1  HASH-TABLE-REHASH-THRESHOLD  1.0  HASH-TABLE-SIZE  the length of the association list- - - - - - -I still would like to see SETF enabled for:    HASH-TABLE-REHASH-SIZE    HASH-TABLE-REHASH-THRESHOLDAt issue is the rate of "rehashing" between successive, novel entriesinto the table, and the rate of consing to maintain the table.  [Perhaps this would be clearer if there were a function in the language called REHASH; Lucid 3.0 has such a function, and Interlisp-D had such a function.]Of course, the setf methods for these two accessors would do a good deal of argument and consistency checking.  So what possible harm could come from permitting the user to alter these parameters after initial creation?  those implementations that substitute alists for "hash-tables" can try to adapt to this view, that some kind of "rehash" step [with some determined cost] is done after the entry which first makes:    (hash-table-count x)  >  (* (hash-table-size x)                                (hash-table-rehash-threshold x))be true [assuming a floating-point value for the threshold].  This is part of the whole point for having "hash tables" in the language.- - - - -I'm quite sympathetic to being able to SETF some of the hash-table readers,but I didn't think it appropriate to require of all implementations.- - - - - -The value of HASH-TAbLE-REHASH-SIZE and HASH-TAbLE-REHASH-THRESHOLD areimplementation dependent, and guaranteed to be greater than or equal to thevalues given to MAKE-HASH-TABLE, and idempotent, in that if you make a hashtable with the same values as a given hash table then the -REHASH-SIZE and-REHASH-THRESHOLD of the newly created one will be the same as the inputvalues. (This says that they may be thresholded upward in someimplementation-dependent-manner.)HASH-TABLE-SIZE should be greater than or equal to the count of thingsMAPHASH would iterate over, and HASH-TABLE-TEST will return one of thesymbols EQ EQL EQUAL (or, if HASH-TABLE-TESTS passes, EQUALP), even if #'EQ#'EQUAL #'EQL are given.Normally implementation-dependent-extensions are explicitly discouraged;I'm no longer sure at the momemnt whether PACKAGE-CLUTTER would expliciltydisallow such extensions unless they are explicitly allowed, but we shouldbe cautious in throwing around phrases like "might be  reasonable implementation-dependent extensions" if we don't mean it. Iwould take that out, actually.*start*01400 00024 US GV-Info: alarson@src.honeywell.com at 19-Mar-89 10:56:27 from AGReturn-Path: <alarson@src.honeywell.com>Received: from moon.src.honeywell.com ([129.30.1.10]) by Xerox.COM ; 19 MAR 89 10:56:16 PSTReturn-Path: <alarson@src.honeywell.com>Received: from pavo.SRC.Honeywell.COM by moon.src.honeywell.com (5.59/smail2.6.3/06-17-88);	Sun, 19 Mar 89 12:57:12 CST id AA11401 for masinter.pa@Xerox.COMPosted-Date: Sun, 19 Mar 89 12:55:24 CSTReceived: by pavo.src.honeywell.com (3.2/SMI-3.2)	id AA20779; Sun, 19 Mar 89 12:55:24 CSTDate: Sun, 19 Mar 89 12:55:24 CSTFrom: alarson@src.honeywell.com (Aaron Larson)Message-Id: <8903191855.AA20779@pavo.src.honeywell.com>To: masinter.paCc: cl-cleanup@sail.stanford.eduIn-Reply-To: masinter.pa@Xerox.COM's message of 16 Mar 89 22:51 PST <890316-225136-6875@Xerox>Subject: Issue: HASH-TABLE-ACCESS (version 2)  HASH-TABLE-REHASH-SIZE hash-table     Returns the current rehash size of a hash table.Two minor nits, first the wording should say "of the hash-table", andsecondly the results of passing in a non hash table should be described,e.g. signals an error, or is undefined.  I think having portable access tothe HASH-TABLE-TEST is quite important, I would hate to loose the chance toget that because of the other functions, but I guess that an ammendment onthe floor could remove the ones people have trouble with.*start*01743 00024 US Date:  4 Apr 89 12:04 PDTSender: CL-Cleanup-mailer%SAIL.Stanford:EDU:XeroxFrom: KMP%STONY-BROOK.SCRC.Symbolics:COM:XeroxSubject: Issue: HASH-TABLE-ACCESSTo: CL-Cleanup%SAIL.Stanford:EDU:XeroxGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue: HASH-TABLE-ACCESSTo: CL-Cleanup@SAIL.Stanford.EDUReturn-Path: <CL-Cleanup-mailer@SAIL.Stanford.EDU>Redistributed: xerox-cl-cleanup^.paReceived: from SAIL.Stanford.EDU ([36.86.0.194]) by Xerox.COM ; 04 APR 89 11:48:45 PDTReceived: from STONY-BROOK.SCRC.Symbolics.COM by SAIL.Stanford.EDU with TCP; 4 Apr 89  11:47:01 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 571158; Tue 4-Apr-89 14:46:59 EDTOriginal-Date: Tue, 4 Apr 89 14:46 EDTMessage-ID: <890404144633.3.KMP@BOBOLINK.SCRC.Symbolics.COM>GVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVMy notes say this passed 17-0 with hand-written amendments by me(and agreement that the `obvious' write-o's would be corrected).The [corrected] hand-written text says: Amendment to HASH-TABLE-ACCESS		KMP 3/30/89 Add:	Define that the results of HASH-TABLE-REHASH-SIZE,	HASH-TABLE-REHASH-THRESHOLD, and HASH-TABLE-SIZE	are suitable for use in a call to MAKE-HASH-TABLE	in order to produce a hash table with state	corresponding to the current state of the hash table. Clarify that the result of HASH-TABLE-TEST is always a symbol naming a function rather than the function itself if the test is one of those defined by this standard. (Implementations which provide additional tests for hash tables may determine how this function relates to such  extended tests.)*start*03309 00024 US Date:  5 Apr 89 13:05 PDTFrom: KMP%STONY-BROOK.SCRC.Symbolics:COM:XeroxSubject: Issue HASH-TABLE-ACCESS (Version 3)To: Masinter:PA:Xeroxcc: KMP%STONY-BROOK.SCRC.Symbolics:COM:XeroxGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVFrom: Kent M Pitman <KMP@STONY-BROOK.SCRC.Symbolics.COM>Subject: Issue HASH-TABLE-ACCESS (Version 3)To: Masinter.PAcc: KMP@STONY-BROOK.SCRC.Symbolics.COMReturn-Path: <KMP@STONY-BROOK.SCRC.Symbolics.COM>Received: from STONY-BROOK.SCRC.Symbolics.COM ([128.81.41.144]) by Xerox.COM ; 05 APR 89 12:38:18 PDTReceived: from BOBOLINK.SCRC.Symbolics.COM by STONY-BROOK.SCRC.Symbolics.COM via CHAOS with CHAOS-MAIL id 571936; Wed 5-Apr-89 15:38:04 EDTOriginal-Date: Wed, 5 Apr 89 15:37 EDTMessage-ID: <890405153736.5.KMP@BOBOLINK.SCRC.Symbolics.COM>GVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVGVFor your archives, here's my version corrected per x3j13.Issue:        HASH-TABLE-ACCESSReferences:   Hash-tables (Chapter 21 of CLtL)Category:     ADDITIONEdit History: 13-Sept-88, version 1 by Walter van Roggen              13-Oct-88, version 2 by Walter van Roggen	      05-Apr-89, version 3 by Pitman (changes per x3J13)Status:       Accepted Mar-89 (by vote of 17-0) Problem Description:   There are many characteristics of hash-tables which are specified upon  creation but are not accessible afterwards. Proposal: (HASH-TABLE-ACCESS:X3J13-MAR-89)   Add the following functions to the language:   HASH-TABLE-REHASH-SIZE hash-table     Returns the current rehash size of a hash table.   HASH-TABLE-REHASH-THRESHOLD hash-table     Returns the current rehash threshold of a hash table.   HASH-TABLE-SIZE hash-table     Returns the current size of a hash table.   HASH-TABLE-TEST hash-table     Returns the test used for comparing keys in the hash table.    By default the value will be EQL.   Define that the results of HASH-TABLE-REHASH-SIZE,   HASH-TABLE-REHASH-THRESHOLD, and HASH-TABLE-SIZE are suitable  for use in a call to MAKE-HASH-TABLE in order to produce a hash  table with state corresponding to the current state of the hash  table.  Clarify that the result of HASH-TABLE-TEST is always a symbol  naming a function rather than the function itself if the test  is one of those defined by this standard. (Implementations which  provide additional tests for hash tables may determine how this  function relates to such extended tests.) Current Practice:   VAX LISP and Lucid 3.0 implement the proposal. Cost to Implementors:   Most of these should be trivial to implement, since the information  must be present for nearly all types. Cost to Users:   None.  This is an upward-compatible extension. Cost of Non-Adoption:   The benefits would not be available in a portable fashion. Benefits:   Programs would be able to access useful information otherwise hidden.  For example, it would allow programs to gain statistics about hash  table usage that might enable better tuning. Discussion:   None of these are required to be SETF'able, though some might be  reasonable implementation-dependent extensions.  Including such  modification abilities might constrain some implementations unduly.   This first appeared in ">GLS>clarifications.text" of 12/06/85.